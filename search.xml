<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java8内存结构</title>
      <link href="/2021/10/16/java-jvm/"/>
      <url>/2021/10/16/java-jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="java8内存结构"><a href="#java8内存结构" class="headerlink" title="java8内存结构"></a>java8内存结构</h1><h2 id="java8内存结构图"><a href="#java8内存结构图" class="headerlink" title="java8内存结构图"></a>java8内存结构图</h2><blockquote><p><img src="/2021/10/16/java-jvm/jvm1.png" alt="内存结构"></p></blockquote><h2 id="虚拟机内存与本地内存的区别"><a href="#虚拟机内存与本地内存的区别" class="headerlink" title="虚拟机内存与本地内存的区别?"></a>虚拟机内存与本地内存的区别?</h2><blockquote><p>Java虚拟机在执行的时候会把管理的内存分配成不同的区域，这些区域被称为虚拟机内存，<br>同时，对于虚拟机没有直接管理的物理内存，也有一定的利用，我们称它为本地内存。</p></blockquote><h3 id="jvm内存"><a href="#jvm内存" class="headerlink" title="jvm内存"></a>jvm内存</h3><blockquote><p>受虚拟机内存大小的参数控制，当大小超过参数设置的大小时就会报OOM</p></blockquote><h3 id="本地内存"><a href="#本地内存" class="headerlink" title="本地内存"></a>本地内存</h3><blockquote><p>本地内存不受虚拟机内存参数的限制，只受物理内存容量的限制<br>虽然不受参数的限制，但是如果内存的占用超出物理内存的大小，同样也会报OOM</p></blockquote><h2 id="java运行时数据区域"><a href="#java运行时数据区域" class="headerlink" title="java运行时数据区域"></a>java运行时数据区域</h2><h3 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h3><blockquote><p>程序计数器就是当前线程所执行的字节码的行号指示器，通过改变计数器的值，来选取下一行指令，通过他来实现跳转、循环、恢复线程等功能。<br>在任何时刻，一个处理器内核只能运行一个线程，多线程是通过线程轮流切换，分配时间来完成的，这就需要有一个标志来记住每个线程执行到了哪里，这里便需要到了程序计数器。<br>所以，程序计数器是线程私有的，每个线程都已自己的程序计数器。</p></blockquote><h3 id="虚拟机栈（JVM-Stacks）"><a href="#虚拟机栈（JVM-Stacks）" class="headerlink" title="虚拟机栈（JVM Stacks）"></a>虚拟机栈（JVM Stacks）</h3><blockquote><p><img src="/2021/10/16/java-jvm/jvm2.png"><br>虚拟机栈是线程私有的，随线程生灭。虚拟机栈描述的是线程中的方法的内存模型：<br>每个方法被执行的时候，都会在虚拟机栈中同步创建一个栈帧（stack frame）。<br>每个栈帧的包含如下的内容:</p><ul><li>局部变量表<ul><li>局部变量表中存储着方法里的java基本数据类型（byte/boolean/char/int/long/double/float/short）以及对象的引用（注：这里的基本数据类型指的是方法内的局部变量）</li></ul></li><li>操作数栈</li><li>动态连接</li><li>方法返回地址</li><li>方法被执行时入栈，执行完后出栈<br>虚拟机栈可能会抛出两种异常：</li><li>如果线程请求的栈深度大于虚拟机所规定的栈深度，则会抛出StackOverFlowError即栈溢出</li><li>如果虚拟机的栈容量可以动态扩展，那么当虚拟机栈申请不到内存时会抛出OutOfMemoryError即OOM内存溢出</li></ul></blockquote><h3 id="本地方法栈（Native-Method-Stacks）"><a href="#本地方法栈（Native-Method-Stacks）" class="headerlink" title="本地方法栈（Native Method Stacks）"></a>本地方法栈（Native Method Stacks）</h3><blockquote><p>本地方法栈与虚拟机栈的作用是相似的,都会抛出OutOfMemoryError和StackOverFlowError，都是线程私有的，主要的区别在于：</p><ul><li>虚拟机栈执行的是java方法</li><li>本地方法栈执行的是native方法(什么是Native方法？)</li></ul></blockquote><h3 id="Java堆（Java-Heap）"><a href="#Java堆（Java-Heap）" class="headerlink" title="Java堆（Java Heap）"></a>Java堆（Java Heap）</h3><blockquote><p>java堆是JVM内存中最大的一块，由所有线程共享,是由垃圾收集器管理的内存区域，主要存放对象实例，当然由于java虚拟机的发展，堆中也多了许多东西，现在主要有：</p><ul><li>对象实例<ul><li>类初始化生成的对象</li><li>基本数据类型的数组也是对象实例</li></ul></li><li>字符串常量池<ul><li>字符串常量池原本存放于方法区，jdk7开始放置于堆中。</li><li>字符串常量池存储的是string对象的直接引用，而不是直接存放的对象，是一张string table</li></ul></li><li>静态变量<ul><li>静态变量是有static修饰的变量，jdk7时从方法区迁移至堆中</li></ul></li><li>线程分配缓冲区（Thread Local Allocation Buffer）<ul><li>线程私有，但是不影响java堆的共性</li><li>增加线程分配缓冲区是为了提升对象分配时的效率<br>java堆既可以是固定大小的，也可以是可扩展的（通过参数-Xmx和-Xms设定），如果堆无法扩展或者无法分配内存时也会报OOM。</li></ul></li></ul></blockquote><h3 id="方法区-Method-Area"><a href="#方法区-Method-Area" class="headerlink" title="方法区(Method Area)"></a>方法区(Method Area)</h3><blockquote><p>方法区是所有线程共享的内存，在java8以前是放在JVM内存中的，由永久代实现，受JVM内存大小参数的限制，<br>在java8中移除了永久代的内容，方法区由元空间(Meta Space)实现，并直接放到了本地内存中，不受JVM参数的限制<br>（当然，如果物理内存被占满了，方法区也会报OOM），并且将原来放在方法区的字符串常量池和静态变量都转移到了Java堆中，<br>方法区与其他区域不同的地方在于，方法区在编译期间和类加载完成后的内容有少许不同，不过总的来说分为这两部分：</p><ul><li>类元信息（Klass）<ul><li>类元信息在类编译期间放入方法区，里面放置了类的基本信息，包括类的版本、字段、方法、接口以及常量池表（Constant Pool Table）</li><li>常量池表（Constant Pool Table）存储了类在编译期间生成的字面量、符号引用(什么是字面量？什么是符号引用？)，这些信息在类加载完后会被解析到运行时常量池中</li></ul></li><li>运行时常量池（Runtime Constant Pool）<ul><li>运行时常量池主要存放在类加载后被解析的字面量与符号引用，但不止这些</li><li>运行时常量池具备动态性，可以添加数据，比较多的使用就是String类的intern()方法</li></ul></li></ul></blockquote><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><blockquote><p>直接内存位于本地内存，不属于JVM内存，但是也会在物理内存耗尽的时候报OOM<br>在jdk1.4中加入了NIO（New Input/Putput）类，引入了一种基于通道（channel）与缓冲区（buffer）的新IO方式，它可以使用native函数直接分配堆外内存，然后通过存储在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，这样可以在一些场景下大大提高IO性能，避免了在java堆和native堆来回复制数据。</p></blockquote><h3 id="什么是Native方法？"><a href="#什么是Native方法？" class="headerlink" title="什么是Native方法？"></a>什么是Native方法？</h3><blockquote><p>由于java是一门高级语言，离硬件底层比较远，有时候无法操作底层的资源，于是，java添加了native关键字，被native关键字修饰的方法可以用其他语言重写，这样，我们就可以写一个本地方法，然后用C语言重写，这样来操作底层资源。当然，使用了native方法会导致系统的可移植性不高，这是需要注意的。</p></blockquote><h3 id="成员变量、局部变量、类变量分别存储在内存的什么地方？"><a href="#成员变量、局部变量、类变量分别存储在内存的什么地方？" class="headerlink" title="成员变量、局部变量、类变量分别存储在内存的什么地方？"></a>成员变量、局部变量、类变量分别存储在内存的什么地方？</h3><blockquote><ul><li>类变量<ul><li>类变量是用static修饰符修饰，定义在方法外的变量，随着java进程产生和销毁</li><li>在java8之前把静态变量存放于方法区，在java8时存放在堆中</li></ul></li><li>成员变量<ul><li>成员变量是定义在类中，随着类的实例产生和销毁，是类实例的一部分</li><li>由于是实例的一部分，在类初始化的时候，从运行时常量池取出直接引用或者值，与初始化的对象一起放入堆中</li></ul></li><li>局部变量<ul><li>局部变量是定义在类的方法中的变量</li><li>在所在方法被调用时放入虚拟机栈的栈帧中，方法执行结束后从虚拟机栈中弹出，所以存放在虚拟机栈中</li></ul></li></ul></blockquote><h3 id="final修饰的常量存放在哪里？"><a href="#final修饰的常量存放在哪里？" class="headerlink" title="final修饰的常量存放在哪里？"></a>final修饰的常量存放在哪里？</h3><blockquote><p>final修饰与不修饰不影响内存所处位置。</p></blockquote><h3 id="类常量池、运行时常量池、字符串常量池有什么关系？有什么区别？"><a href="#类常量池、运行时常量池、字符串常量池有什么关系？有什么区别？" class="headerlink" title="类常量池、运行时常量池、字符串常量池有什么关系？有什么区别？"></a>类常量池、运行时常量池、字符串常量池有什么关系？有什么区别？</h3><blockquote><p>类常量池与运行时常量池都存储在方法区，而字符串常量池在jdk7时就已经从方法区迁移到了java堆中。<br>在类编译过程中，会把类元信息放到方法区，类元信息的其中一部分便是类常量池，主要存放字面量和符号引用，而字面量的一部分便是文本字符，在类加载时将字面量和符号引用解析为直接引用存储在运行时常量池；<br>对于文本字符来说，它们会在解析时查找字符串常量池，查出这个文本字符对应的字符串对象的直接引用，将直接引用存储在运行时常量池</p></blockquote><h3 id="什么是字面量？什么是符号引用？"><a href="#什么是字面量？什么是符号引用？" class="headerlink" title="什么是字面量？什么是符号引用？"></a>什么是字面量？什么是符号引用？</h3><blockquote><ul><li>字面量<ul><li>java代码在编译过程中是无法构建引用的，字面量就是在编译时对于数据的一种表示:<pre class="line-numbers language-none"><code class="language-none">int a&#x3D;1;&#x2F;&#x2F;这个1便是字面量String b&#x3D;&quot;iloveu&quot;;&#x2F;&#x2F;iloveu便是字面量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li>符号引用<ul><li>由于在编译过程中并不知道每个类的地址，因为可能这个类还没有加载，所以如果你在一个类中引用了另一个类，那么你完全无法知道他的内存地址，那怎么办，我们只能用他的类名作为符号引用，在类加载完后用这个符号引用去获取他的内存地址。</li><li>例子：我在com.demo.Solution类中引用了com.test.Quest，那么我会把com.test.Quest作为符号引用存到类常量池，等类加载完后，拿着这个引用去方法区找这个类的内存地址。<br>参考： Java技术迷微信公众号</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot注解篇</title>
      <link href="/2021/10/15/springboot-note/"/>
      <url>/2021/10/15/springboot-note/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot注解篇"><a href="#springboot注解篇" class="headerlink" title="springboot注解篇"></a>springboot注解篇</h1><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><blockquote><p>@Configuration、@EnableAutoConfiguration、@ComponentScan 注解的集合</p></blockquote><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><blockquote><p>启用 SpringBoot 的自动配置机制</p></blockquote><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><blockquote><p>扫描被@Component (@Service,@Controller)注解的 bean，注解默认会扫描该类所在的包下所有的类</p></blockquote><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><blockquote><p>允许在 Spring 上下文中注册额外的 bean 或导入其他配置类</p></blockquote><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><blockquote><p>通用的注解，可标注任意类为 Spring 组件。如果一个 Bean 不知道属于哪个层，可以使用@Component 注解标注。</p></blockquote><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><blockquote><p>对应持久层即 Dao 层，主要用于数据库相关操作。</p></blockquote><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><blockquote><p>对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。</p></blockquote><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><blockquote><p>对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面</p></blockquote><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><blockquote><p>@Controller和@ResponseBody的合集,表示这是个控制器 bean,并且是将函数的返回值直 接填入 HTTP 响应体中,是 REST 风格的控制器<br>单独使用 @Controller 的话一般使用在要返回一个视图的情况，这种情况属于比较传统的 Spring MVC 的应用，对应于前后端不分离的情况</p></blockquote><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><blockquote><p>声明 Spring Bean 的作用域，使用方法:</p><pre class="line-numbers language-none"><code class="language-none">@Bean@Scope(&quot;singleton&quot;)public Person personSingleton() &#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四种常见的 Spring Bean 的作用域：<br>singleton : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。<br>prototype : 每次请求都会创建一个新的 bean 实例。<br>request : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。<br>session : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。</p></blockquote><h2 id="PathVariable、-RequestParam"><a href="#PathVariable、-RequestParam" class="headerlink" title="@PathVariable、@RequestParam"></a>@PathVariable、@RequestParam</h2><blockquote><p>@PathVariable用于获取路径参数，@RequestParam用于获取查询参数,举例：</p><pre class="line-numbers language-none"><code class="language-none">public List&lt;Teacher&gt; getKlassRelatedTeachers(        @PathVariable(&quot;klassId&quot;) Long klassId,        @RequestParam(value &#x3D; &quot;type&quot;, required &#x3D; false) String type )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><blockquote><p>body 部分并且Content-Type 为 application/json 格式的数据，接收到数据之后会自动将数据绑定到 Java 对象上<br>系统会使用HttpMessageConverter或者自定义的HttpMessageConverter将请求的 body 中的 json 字符串转换为 java 对象。</p></blockquote><h2 id="value、-ConfigurationProperties"><a href="#value、-ConfigurationProperties" class="headerlink" title="@value、@ConfigurationProperties"></a>@value、@ConfigurationProperties</h2><blockquote><ol><li>使用 @Value(“${property}”) 读取比较简单的配置信息：<pre class="line-numbers language-none"><code class="language-none">@Value(&quot;$&#123;wuhan2020&#125;&quot;)String wuhan2020;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>通过@ConfigurationProperties读取配置信息并与 bean 绑定:<pre class="line-numbers language-none"><code class="language-none">配置文件：library: location: 湖北武汉加油中国加油 books:   - name: 你的名字    description: 描述读取：@Component@ConfigurationProperties(prefix &#x3D; &quot;library&quot;)class LibraryProperties &#123;   @NotEmpty   private String location;   private List&lt;Book&gt; books;   @Setter   @Getter   @ToString   static class Book &#123;       String name;       String description;   &#125; 省略getter&#x2F;setter ......&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><h3 id="NotNull"><a href="#NotNull" class="headerlink" title="@NotNull"></a>@NotNull</h3><blockquote><pre class="line-numbers language-none"><code class="language-none">@NotNull(message &#x3D; &quot;classId 不能为空&quot;)   private String classId;   @Size(max &#x3D; 33)   @NotNull(message &#x3D; &quot;name 不能为空&quot;)private String name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="Valid"><a href="#Valid" class="headerlink" title="@Valid"></a>@Valid</h3><blockquote><pre class="line-numbers language-none"><code class="language-none">@PostMapping(&quot;&#x2F;person&quot;)   public ResponseEntity&lt;Person&gt; getPerson(@RequestBody @Valid Person person) &#123;       return ResponseEntity.ok().body(person);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在类上加上 Validated 注解，这个参数可以告诉 Spring 去校验方法参数</p></blockquote><h2 id="全局处理-Controller-层异常"><a href="#全局处理-Controller-层异常" class="headerlink" title="全局处理 Controller 层异常"></a>全局处理 Controller 层异常</h2><blockquote><p>@ControllerAdvice :注解定义全局异常处理类<br>@ExceptionHandler :注解声明异常处理方法<br>举例：</p><pre class="line-numbers language-none"><code class="language-none">@ControllerAdvice@ResponseBodypublic class GlobalExceptionHandler &#123;   &#x2F;**    * 请求参数异常处理    *&#x2F;   @ExceptionHandler(MethodArgumentNotValidException.class)public ResponseEntity&lt;?&gt; handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, HttpServletRequest request) &#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><blockquote><p>@Entity 声明一个类对应一个数据库实体。<br>@Table 设置表明<br>@Id 声明一个字段为主键<br>@GeneratedValue 指定主键生成策略<br>四种常见的主键生成策略<br>1.TABLE, 使用一个特定的数据库表格来保存主键<br>2.SEQUENCE,某些数据库中,不支持主键自增长,比如Oracle、PostgreSQL其提供了一种叫做”序列(sequence)”的机制生成主键<br>3.IDENTITY,主键自增长<br>4.AUTO把主键生成策略交给持久化引擎(persistence engine)（默认auto）<br>&emsp;<br>@Column(name = “user_name”, nullable = false, length=32)<br>设置属性 userName 对应的数据库字段名为 user_name，长度为 32，非空<br>&emsp;<br>@Transient 声明不需要与数据库映射的字段，在保存的时候不需要保存进数据库</p></blockquote><h2 id="json数据处理"><a href="#json数据处理" class="headerlink" title="json数据处理"></a>json数据处理</h2><blockquote><p>@JsonIgnoreProperties 作用在类上用于过滤掉特定字段不返回或者不解析<br>举例：</p><pre class="line-numbers language-none"><code class="language-none">@JsonIgnoreProperties(&#123;&quot;userRoles&quot;&#125;public class User &#123;   private String userName;   private String fullName;   private String password;   @JsonIgnoreprivate List&lt;UserRole&gt; userRoles &#x3D; new ArrayList&lt;&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>@JsonFormat一般用来格式化 json 数据<br>举例：</p><pre class="line-numbers language-none"><code class="language-none">@JsonFormat(shape&#x3D;JsonFormat.Shape.STRING, pattern&#x3D;&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&quot;, timezone&#x3D;&quot;GMT&quot;)private Date date;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;<br>@JsonUnwrapped 扁平对象</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库范式设计</title>
      <link href="/2021/10/15/sql-nf/"/>
      <url>/2021/10/15/sql-nf/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库范式设计"><a href="#数据库范式设计" class="headerlink" title="数据库范式设计"></a>数据库范式设计</h1><h2 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h2><blockquote><p>确保每列保持原子性<br>举例：<br>地址这个属性可以分出为省份和城市，那么地址和省份就不能共同存在，需要分出来。</p></blockquote><h2 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h2><blockquote><p>确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关(主要针对联合主键而言)<br>举例:<br><img src="/2021/10/15/sql-nf/sql-nf1.png"><br>订单金额和订单时间仅与“订单号”相关，与“产品号”无关，不满足2nf<br>更改：（分出来）<br><img src="/2021/10/15/sql-nf/sql-nf2.png"></p></blockquote><h2 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h2><blockquote><p>确保数据表中的每一列数据都和主键直接相关，而不能间接相关<br>举例:<br><img src="/2021/10/15/sql-nf/sql-nf3.png"><br>班主任性别，年龄与 姓名 相关，不满足3nf<br>更改：（分出来）<br><img src="/2021/10/15/sql-nf/sql-nf4.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python使用socket编程</title>
      <link href="/2021/10/15/python-socket/"/>
      <url>/2021/10/15/python-socket/</url>
      
        <content type="html"><![CDATA[<h1 id="python使用socket编程"><a href="#python使用socket编程" class="headerlink" title="python使用socket编程"></a>python使用socket编程</h1><h2 id="什么是socket"><a href="#什么是socket" class="headerlink" title="什么是socket?"></a>什么是socket?</h2><blockquote><p>Socket接口是TCP/IP网络的API（Application Programming Interface,应用程序编程接口），Socket接口定义了许多函数或例程，程序员可以用它们来开发 TCP/IP网络上的应用程序。<br>socket不是具体的网络协议，属于存在于tcp、udp协议之上的一个抽象层。是对TCP/IP的封装。</p></blockquote><h2 id="具体使用socket"><a href="#具体使用socket" class="headerlink" title="具体使用socket"></a>具体使用socket</h2><p>首先需要导入socket库:import socket<br>打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可，以下是相关操作：</p><pre class="line-numbers language-none"><code class="language-none">s.bind()：绑定（主机名称、端口到一个套接字上）s.listen()：设置并启动TCP监听s.accept()：等待客户端连接s.connect()：连接指定服务器s.recv()：接受TCP消息s.send()：发送TCP消息s.recvfrom()：接受UDP消息s.sendto()：发送UDP消息s.close()：关闭套接字对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>创建一个socket:<pre class="line-numbers language-none"><code class="language-none">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)# 建立连接:s.connect((&#39;www.sina.com.cn&#39;, 80))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>AF_INET指定使用IPv4协议，如果要用更先进的IPv6，就指定为AF_INET6。SOCK_STREAM指定使用面向流的TCP协议建立TCP连接后，我们就可以向新浪服务器发送请求<pre class="line-numbers language-none"><code class="language-none"># 发送数据:s.send(b&#39;GET &#x2F; HTTP&#x2F;1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>TCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端<pre class="line-numbers language-none"><code class="language-none"># 接收数据:buffer &#x3D; []while True:    # 每次最多接收1k字节:    d &#x3D; s.recv(1024)    if d:        buffer.append(d)    else:        breakdata &#x3D; b&#39;&#39;.join(buffer)s.close()header, html &#x3D; data.split(b&#39;\r\n\r\n&#39;, 1)print(header.decode(&#39;utf-8&#39;))# 把接收的数据写入文件:with open(&#39;sina.html&#39;, &#39;wb&#39;) as f:    f.write(html)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>服务器的编程：<pre class="line-numbers language-none"><code class="language-none">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)# 监听端口:s.bind((&#39;127.0.0.1&#39;, 9999))#调用listen()方法开始监听端口，传入的参数指定等待连接的最大数量：s.listen(5)print(&#39;Waiting for connection...&#39;)while True:    # 接受一个新连接:    sock, addr &#x3D; s.accept()    # 创建新线程来处理TCP连接:    t &#x3D; threading.Thread(target&#x3D;tcplink, args&#x3D;(sock, addr))    t.start()#每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：def tcplink(sock, addr):    print(&#39;Accept new connection from %s:%s...&#39; % addr)    sock.send(b&#39;Welcome!&#39;)    while True:        data &#x3D; sock.recv(1024)        time.sleep(1)        if not data or data.decode(&#39;utf-8&#39;) &#x3D;&#x3D; &#39;exit&#39;:            break        sock.send((&#39;Hello, %s!&#39; % data.decode(&#39;utf-8&#39;)).encode(&#39;utf-8&#39;))    sock.close()    print(&#39;Connection from %s:%s closed.&#39; % addr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上Hello再发送给客户端。如果客户端发送了exit字符串，就直接关闭连接。要测试这个服务器程序，我们还需要编写一个客户端程序：<pre class="line-numbers language-none"><code class="language-none">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)# 建立连接:s.connect((&#39;127.0.0.1&#39;, 9999))# 接收欢迎消息:print(s.recv(1024).decode(&#39;utf-8&#39;))for data in [b&#39;Michael&#39;, b&#39;Tracy&#39;, b&#39;Sarah&#39;]:    # 发送数据:    s.send(data)    print(s.recv(1024).decode(&#39;utf-8&#39;))s.send(b&#39;exit&#39;)s.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了。(以上内容来自廖雪峰python教程)]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构排序</title>
      <link href="/2021/10/15/data-sort/"/>
      <url>/2021/10/15/data-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构排序"><a href="#数据结构排序" class="headerlink" title="数据结构排序"></a>数据结构排序</h1><p><img src="/2021/10/15/data-sort/data-sort.png" alt="排序"></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>把待排序的数据插入到已经排好序的数据中，直到所有的数据插入完成.<br>例子：<br><img src="/2021/10/15/data-sort/sort1.png" alt="直接插入排序"></p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序就是在前面直接插入排序的基础上进行改进的一种排序。直接插入排序的变量 i 其实就是一个间隔，而希尔排序的间隔不是 1，它的间隔逐渐缩小直到为 1 的一种排序，因此又叫缩小增量法。它是对直接插入排序算法的优化，当间隔不为 1 的时候，都是预排序。第一次的间隔是 数据长度的三分之一再加一。即 gap = size / 3 + 1（间隔几个进行比较，）<br>例子：<br><img src="/2021/10/15/data-sort/sort2.png" alt="希尔排序"></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><p>直接选择排序就是在待排序的数据中选择一个最大的或者最小的放在带待排序数据的末尾<br>例子：<br><img src="/2021/10/15/data-sort/sort3.png" alt="直接选择排序"></p><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>从第一个数开始，和第二个数比较，满足条件就进行交换，然后第二个数和第三个数进行比较满足进行交换，直到最后一个数，这是一个“泡”已经冒出。现在有从开始比较，这个时候总的比较的数减少一个，因为“泡”已经冒出了。冒泡排序一共会进行 size - 1次冒泡，每次的比较次数为size - i，i是比较的第几次。<br>例子：<br><img src="/2021/10/15/data-sort/sort4.png" alt="冒泡排序"><br>java代码实现：</p><pre class="line-numbers language-none"><code class="language-none">public class demo_sort &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;冒泡排序算法        int[] numbers&#x3D;new int[]&#123;1,5,8,2,3,9,4&#125;;        &#x2F;&#x2F;需进行length-1次冒泡        for(int i&#x3D;0;i&lt;numbers.length-1;i++)        &#123;            for(int j&#x3D;0;j&lt;numbers.length-1-i;j++)            &#123;                if(numbers[j]&gt;numbers[j+1])                &#123;                    int temp&#x3D;numbers[j];                    numbers[j]&#x3D;numbers[j+1];                    numbers[j+1]&#x3D;temp;                &#125;            &#125;        &#125;        System.out.println(&quot;从小到大排序后的结果是:&quot;);        for(int i&#x3D;0;i&lt;numbers.length;i++)            System.out.print(numbers[i]+&quot; &quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序：</p><ol><li>选择一个基准元素,通常选择第一个元素或者最后一个元素,</li><li>通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的 元素值比基准值大。</li><li>此时基准元素在其排好序后的正确位置</li><li>然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序<br>例子：<br><img src="/2021/10/15/data-sort/sort5.png" alt="快速排序"><br>以上完成第一次比较，左右两边还要进行比较<br>java代码实现：<pre class="line-numbers language-none"><code class="language-none">public static void quickSort(int[] arr)&#123;    qsort(arr, 0, arr.length-1);&#125;private static void qsort(int[] arr, int low, int high)&#123;    if (low &lt; high)&#123;        int pivot&#x3D;partition(arr, low, high);        &#x2F;&#x2F;将数组分为两部分        qsort(arr, low, pivot-1);                   &#x2F;&#x2F;递归排序左子数组        qsort(arr, pivot+1, high);                  &#x2F;&#x2F;递归排序右子数组    &#125;&#125;private static int partition(int[] arr, int low, int high)&#123;    int pivot &#x3D; arr[low];     &#x2F;&#x2F;枢轴记录    while (low&lt;high)&#123;        while (low&lt;high &amp;&amp; arr[high]&gt;&#x3D;pivot) --high;        arr[low]&#x3D;arr[high];             &#x2F;&#x2F;交换比枢轴小的记录到左端        while (low&lt;high &amp;&amp; arr[low]&lt;&#x3D;pivot) ++low;        arr[high] &#x3D; arr[low];           &#x2F;&#x2F;交换比枢轴小的记录到右端    &#125;    &#x2F;&#x2F;扫描完成，枢轴到位    arr[low] &#x3D; pivot;    &#x2F;&#x2F;返回的是枢轴的位置    return low;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构总汇</title>
      <link href="/2021/10/15/data-structure/"/>
      <url>/2021/10/15/data-structure/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构总汇"><a href="#数据结构总汇" class="headerlink" title="数据结构总汇"></a>数据结构总汇</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><blockquote><p>分为顺序表和链式表：<br>顺序表（按照顺序结构存储，就是逻辑相邻元素在内存也相邻）<br>链式表（按链式存储结构存储，就是元素在内存中随机存储，因此各节点存放值，还有下一个节点的地址）</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的<br>优点：<br>1、按照索引查询元素速度快<br>2、按照索引遍历数组方便<br>缺点：<br>1、数组的大小固定后就无法扩容了<br>2、数组只能存储一种类型的数据<br>3、添加，删除的操作慢，因为要移动其他的元素。<br>适用场景：<br>频繁查询，对存储空间要求不大，很少增加和删除的情况。    </p></blockquote><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><blockquote><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。<br>栈的特点是：先进后出。<br>栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p></blockquote><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><blockquote><p>队列与栈一样，也是一种线性表。<br>不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。<br>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。    </p></blockquote><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote><p>链表是物理存储单元上非连续的、非顺序的存储结构。<br>数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。<br>根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。<br>循环链表：最后一个节点的指针域指向头结点，形成循环<br>双链表：每个节点有下一个节点地址，也有上一个节点地址<br>链表的优点：<br>链表是不需要初始化容量，可以任意加减元素；<br>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；<br>缺点：<br>因为含有大量的指针域，占用空间较大；<br>查找元素需要遍历链表来查找，非常耗时。<br>适用场景：数据量较小，需要频繁增加，删除操作的场景    </p></blockquote><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><blockquote><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。<br>把它叫做 “树” 是因为它看起来像一棵倒挂的树，。它具有以下的特点：    </p><ol><li>每个节点有零个或多个子节点；    </li><li>没有父节点的节点称为根节点；    </li><li>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；    </li></ol><p>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。<br>二叉树是树的特殊一种，具有如下特点：<br>1、每个结点最多有两颗子树，结点的度最大为2。<br>2、左子树和右子树是有顺序的，次序不能颠倒。<br>3、即使某结点只有一个子树，也要区分左右子树。    </p><p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化。<br>所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。    </p></blockquote><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><blockquote><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，<br>通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。<br>记录的存储位置=f(key)<br>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，    然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。<br>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构<br>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p></blockquote><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><blockquote><p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：<br>堆中某个节点的值总是不大于或不小于其父节点的值；<br>堆总是一棵完全二叉树。<br>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。<br>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：<br>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p></blockquote><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><blockquote><p>图是由结点的有穷集合V和边的集合E组成。<br>其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。<br>按照顶点指向的方向可分为无向图和有向图。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解mvvm</title>
      <link href="/2021/10/15/mvvm/"/>
      <url>/2021/10/15/mvvm/</url>
      
        <content type="html"><![CDATA[<h1 id="mvvm详解"><a href="#mvvm详解" class="headerlink" title="mvvm详解"></a>mvvm详解</h1><h2 id="什么是mvvm？"><a href="#什么是mvvm？" class="headerlink" title="什么是mvvm？"></a>什么是mvvm？</h2><blockquote><p>mvvm是Model-View-ViewModel的缩写。<br>-model：数据-后端传递的数据-data数据<br>-view：视图-代表 UI 组件，它负责将数据模型转化成 UI 展现出来-template<br>-ViewModel:视图模型-是一个同步View 和 Model的对象。MVVM模式的核心，它是连接Model和View的桥梁。<br>MVVM的设计思想：关注Model的变化，让MVVM框架去自动更新DOM的状态，从而把开发者从操作DOM的繁琐步骤中解脱出来！<br><img src="/2021/10/15/mvvm/mvvm-1.jpg" alt="mvvm"></p></blockquote><h2 id="为什么出现mvvm？"><a href="#为什么出现mvvm？" class="headerlink" title="为什么出现mvvm？"></a>为什么出现mvvm？</h2><blockquote><p>一直以来前端开发暴露的问题：<br>1.开发者在代码中大量调用相同的 DOM API，处理繁琐 ，操作冗余，使得代码难以维护。<br>2.用户大量交互，导致dom操作过于频繁，效率低下，影响用户体验<br>3.当 Model 频繁发生变化，开发者需要主动更新到 View ；当用户的操作导致 Model 发生变化，开发者同样需要将变化的数据同步到 Model 中，这样的工作不仅繁琐，而且很难维护复杂多变的数据状态。<br>早期 jquery 的出现就是为了前端能更简洁的操作 DOM 而设计的，但它只解决了第一个问题，另外两个问题始终伴随着前端一直存在。</p></blockquote><h2 id="mvvm优势？"><a href="#mvvm优势？" class="headerlink" title="mvvm优势？"></a>mvvm优势？</h2><blockquote><p>1.视图与数据分离，耦合性低，互不影响。<br>2.数据视图双向绑定，有mvvm框架自动绑定。<br>3.前端开发更灵活。</p></blockquote><h2 id="具体来看前端发展过程"><a href="#具体来看前端发展过程" class="headerlink" title="具体来看前端发展过程"></a>具体来看前端发展过程</h2><p>1.直接使用js操作dom节点，使用浏览器提供的原生API：</p><pre class="line-numbers language-none"><code class="language-none">var dom &#x3D; document.getElementById(&#39;xxx&#39;);dom.innerHTML &#x3D; &#39;xxx&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开发者需要调用dom api进行操作<br>&emsp;<br>2.使用jQuery，简洁的API使用起来很方便</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;#xxx&#39;).text(&#39;xxx&#39;).css(&#39;color&#39;, &#39;green&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>3.使用mvvm框架（这里举个例子与jquery对比）<br>修改下面name和age：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- HTML --&gt;&lt;p&gt;Hello, &lt;span id&#x3D;&quot;name&quot;&gt;Bart&lt;&#x2F;span&gt;!&lt;&#x2F;p&gt;&lt;p&gt;You are &lt;span id&#x3D;&quot;age&quot;&gt;12&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>使用jquery修改两个dom节点：</p><pre class="line-numbers language-none"><code class="language-none">var name &#x3D; &#39;Homer&#39;;var age &#x3D; 51;$(&#39;#name&#39;).text(name);$(&#39;#age&#39;).text(age);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>使用mvvm实现：</p><pre class="line-numbers language-none"><code class="language-none">var person &#x3D; &#123;    name: &#39;Bart&#39;,    age: 12&#125;;person.name &#x3D; &#39;Homer&#39;;person.age &#x3D; 51;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（以上例子来自廖雪峰js教程)<br>&emsp;<br>可以发现我们只需要修改数据，不需要关心怎么操作dom节点,而是直接修改js的对象。<br>剩下的由mvvm框架帮我们实现了(数据绑定)</p>]]></content>
      
      
      <categories>
          
          <category> mvvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> mvvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq安装配置+springboot整合</title>
      <link href="/2021/10/14/rabbitmq-springboot/"/>
      <url>/2021/10/14/rabbitmq-springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="rabbitmq安装配置-springboot整合"><a href="#rabbitmq安装配置-springboot整合" class="headerlink" title="rabbitmq安装配置+springboot整合"></a>rabbitmq安装配置+springboot整合</h1><h2 id="什么是消息队列？"><a href="#什么是消息队列？" class="headerlink" title="什么是消息队列？"></a>什么是消息队列？</h2><blockquote><p>简单来说消息队列就是一个使用队列来通信的组件。<br>就现在而言我们日常所说的消息队列常常指代的是消息中间件，它的存在不仅仅<br>只是为了通信这个问题。</p></blockquote><h2 id="为什么需要消息队列"><a href="#为什么需要消息队列" class="headerlink" title="为什么需要消息队列?"></a>为什么需要消息队列?</h2><blockquote><p>从本质上来说是因为互联网的快速发展，业务不断扩张，促使技术架构需要不断的演进。<br>从以前的单体架构到现在的微服务架构，从互联网初期一个服务器上有 100 个在线用户已经很了不得，到现在坐拥10亿日活的微信。<br>我们需要有一个「东西」来解耦服务之间的关系、控制资源合理合时的使用以及缓冲流量洪峰等等。<br>消息队列就应运而生了。它常用来实现：异步处理、服务解耦、流量控制。</p></blockquote><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><blockquote><p>随着公司的发展你可能会发现你项目的请求链路越来越长，例如刚开始的电商项目，可以就是粗暴的扣<br>库存、下单。慢慢地又加上积分服务、短信服务等。这一路同步调用下来客户可能等急了，这时候就是<br>消息队列登场的好时机。<br>调用链路长、响应就慢了，并且相对于扣库存和下单，积分和短信没必要这么的 “及时”。因此只需要在<br>下单结束那个流程，扔个消息到消息队列中就可以直接返回响应了。而且积分服务和短信服务可以并行<br>的消费这条消息。<br>可以看出消息队列可以减少请求的等待，还能让服务异步并发处理，提升系统总体性能。<br><img src="/2021/10/14/rabbitmq-springboot/mq1.png"></p></blockquote><h2 id="服务解耦"><a href="#服务解耦" class="headerlink" title="服务解耦"></a>服务解耦</h2><blockquote><p><img src="/2021/10/14/rabbitmq-springboot/mq2.png"></p></blockquote><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><blockquote><p>后端服务相对而言都是比较「弱」的，因为业务较重，处理时间较长。<br>像一些例如秒杀活动爆发式流量打过来可能就顶不住了。因此需要引入一个中间件来做缓冲，消息队列再适合不过了。<br>网关的请求先放入消息队列中，后端服务尽自己最大能力去消息队列中消费请求。超时的请求可以直接返回错误。<br>当然还有一些服务特别是某些后台任务，不需要及时地响应，并且业务处理复杂且流程长，<br>那么过来的请求先放入消息队列中，后端服务按照自己的节奏处理。这也是很 nice 的。<br><img src="/2021/10/14/rabbitmq-springboot/mq3.png"></p></blockquote><h2 id="Windows下RabbitMQ安装及配置"><a href="#Windows下RabbitMQ安装及配置" class="headerlink" title="Windows下RabbitMQ安装及配置"></a>Windows下RabbitMQ安装及配置</h2><h3 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h3><blockquote><p>下载地址：<a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a><br>设置环境变量，新建ERLANG_HOME 指向安装目录<br>修改环境变量path，增加Erlang变量至path，%ERLANG_HOME%\bin;<br>cmd输入erl，查看是否更改成功</p></blockquote><h3 id="安装rabbitmq"><a href="#安装rabbitmq" class="headerlink" title="安装rabbitmq"></a>安装rabbitmq</h3><blockquote><p>下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a><br>启动rabbitmq<br>浏览器访问<a href="http://localhost:15672,查看是否启动成功">http://localhost:15672,查看是否启动成功</a><br><img src="/2021/10/14/rabbitmq-springboot/mq4.png"><br>输入账户密码进入后台管理界面，默认账户密码都是guest<br>后台管理界面可以手动创建虚拟host，创建用户，分配权限，创建交换机，创建队列等等，还有查看队列消息，消费效率，推送效率等等</p></blockquote><h2 id="springboot整合rabbitmq"><a href="#springboot整合rabbitmq" class="headerlink" title="springboot整合rabbitmq"></a>springboot整合rabbitmq</h2><h3 id="消息推送和接收流程"><a href="#消息推送和接收流程" class="headerlink" title="消息推送和接收流程"></a>消息推送和接收流程</h3><blockquote><p><img src="/2021/10/14/rabbitmq-springboot/mq5.png"></p></blockquote><h3 id="常用的交换机"><a href="#常用的交换机" class="headerlink" title="常用的交换机"></a>常用的交换机</h3><h4 id="直连型交换机"><a href="#直连型交换机" class="headerlink" title="直连型交换机"></a>直连型交换机</h4><blockquote><p>根据消息携带的路由键将消息投递给对应队列。<br>大致流程，有一个队列绑定到一个直连交换机上，同时赋予一个路由键 routing key 。<br>然后当一个消息携带着路由值为X，这个消息通过生产者发送给交换机时，交换机就会根据这个路由值X去寻找绑定值也是X的队列。</p></blockquote><h4 id="扇型交换机"><a href="#扇型交换机" class="headerlink" title="扇型交换机"></a>扇型交换机</h4><blockquote><p>这个交换机没有路由键概念，就算你绑了路由键也是无视的。<br>这个交换机在接收到消息后，会直接转发到绑定到它上面的所有队列。</p></blockquote><h4 id="主题交换机"><a href="#主题交换机" class="headerlink" title="主题交换机"></a>主题交换机</h4><blockquote><p>这个交换机其实跟直连交换机流程差不多，但是它的特点就是在它的路由键和绑定键之间是有规则的。<br>简单地介绍下规则：<br>“*”  (星号) 用来表示一个单词 (必须出现的)<br>“#” (井号) 用来表示任意数量（零个或多个）单词<br>当一个队列的绑定键为 “#”（井号） 的时候，这个队列将会无视消息的路由键，接收所有的消息。<br>当 * (星号) 和 # (井号) 这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。<br>所以主题交换机也就实现了扇形交换机的功能，和直连交换机的功能。</p></blockquote><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><blockquote><p>需要创建2个springboot项目，一个 rabbitmq-provider （生产者），一个rabbitmq-consumer（消费者）<br>首先创建 rabbitmq-provider<br>pom.xml里用到的jar依赖：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--rabbitmq--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-amqp&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置application.yml：</p><pre class="line-numbers language-none"><code class="language-none">server: port: 8021spring: application:   name: rabbitmq-provider #配置rabbitMq 服务器 rabbitmq:   host: 127.0.0.1   port: 5672   username: guest   password: guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先使用direct exchange(直连型交换机),创建DirectRabbitConfig.java（对于队列和交换机持久化以及连接使用设置)</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.amqp.core.Binding;import org.springframework.amqp.core.BindingBuilder;import org.springframework.amqp.core.DirectExchange;import org.springframework.amqp.core.Queue;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class DirectRabbitConfig &#123;   &#x2F;&#x2F;队列 起名：TestDirectQueue   @Bean   public Queue TestDirectQueue() &#123;       &#x2F;&#x2F; durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效       &#x2F;&#x2F; exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable       &#x2F;&#x2F; autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。       &#x2F;&#x2F;   return new Queue(&quot;TestDirectQueue&quot;,true,true,false);       &#x2F;&#x2F;一般设置一下队列的持久化就好,其余两个就是默认false       return new Queue(&quot;TestDirectQueue&quot;,true);   &#125;   &#x2F;&#x2F;Direct交换机 起名：TestDirectExchange   @Bean   DirectExchange TestDirectExchange() &#123;     &#x2F;&#x2F;  return new DirectExchange(&quot;TestDirectExchange&quot;,true,true);       return new DirectExchange(&quot;TestDirectExchange&quot;,true,false);   &#125;   &#x2F;&#x2F;绑定  将队列和交换机绑定, 并设置用于匹配键：TestDirectRouting   @Bean   Binding bindingDirect() &#123;       return BindingBuilder.bind(TestDirectQueue()).to(TestDirectExchange()).with(&quot;TestDirectRouting&quot;);   &#125;   @Bean   DirectExchange lonelyDirectExchange() &#123;       return new DirectExchange(&quot;lonelyDirectExchange&quot;);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>消息推送接口：(根据需求也可以改为定时任务等等)</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.HashMap;import java.util.Map;import java.util.UUID;@RestControllerpublic class SendMessageController &#123;   @Autowired   RabbitTemplate rabbitTemplate;  &#x2F;&#x2F;使用RabbitTemplate,这提供了接收&#x2F;发送等等方法   @GetMapping(&quot;&#x2F;sendDirectMessage&quot;)   public String sendDirectMessage() &#123;       String messageId &#x3D; String.valueOf(UUID.randomUUID());       String messageData &#x3D; &quot;test message, hello!&quot;;       String createTime &#x3D; LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));       Map&lt;String,Object&gt; map&#x3D;new HashMap&lt;&gt;();       map.put(&quot;messageId&quot;,messageId);       map.put(&quot;messageData&quot;,messageData);       map.put(&quot;createTime&quot;,createTime);       &#x2F;&#x2F;将消息携带绑定键值：TestDirectRouting 发送到交换机TestDirectExchange       rabbitTemplate.convertAndSend(&quot;TestDirectExchange&quot;, &quot;TestDirectRouting&quot;, map);       return &quot;ok&quot;;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行项目，并且调用接口。观察后台管理界面变化<br>此时消息已经发布，但没有被消费。<br>&emsp;<br>下面创建rabbitmq-consumer项目：<br>操作同上，yml配置端口改成不同端口</p><pre class="line-numbers language-none"><code class="language-none">server: port: xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建消息接收监听类，DirectReceiver.java：</p><pre class="line-numbers language-none"><code class="language-none">@Component@RabbitListener(queues &#x3D; &quot;TestDirectQueue&quot;)&#x2F;&#x2F;监听的队列名称 TestDirectQueuepublic class DirectReceiver &#123;   @RabbitHandler   public void process(Map testMessage) &#123;       System.out.println(&quot;DirectReceiver消费者收到消息  : &quot; + testMessage.toString());   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行项目，可以发现消息已被消费。<br>&emsp;<br>现在使用Topic Exchange 主题交换机<br>在rabbitmq-provider项目里面创建TopicRabbitConfig.java：</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.amqp.core.Binding;import org.springframework.amqp.core.BindingBuilder;import org.springframework.amqp.core.Queue;import org.springframework.amqp.core.TopicExchange;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class TopicRabbitConfig &#123;   &#x2F;&#x2F;绑定键   public final static String man &#x3D; &quot;topic.man&quot;;   public final static String woman &#x3D; &quot;topic.woman&quot;;   @Bean   public Queue firstQueue() &#123;       return new Queue(TopicRabbitConfig.man);   &#125;   @Bean   public Queue secondQueue() &#123;       return new Queue(TopicRabbitConfig.woman);   &#125;   @Bean   TopicExchange exchange() &#123;       return new TopicExchange(&quot;topicExchange&quot;);   &#125;   &#x2F;&#x2F;将firstQueue和topicExchange绑定,而且绑定的键值为topic.man   &#x2F;&#x2F;这样只要是消息携带的路由键是topic.man,才会分发到该队列   @Bean   Binding bindingExchangeMessage() &#123;       return BindingBuilder.bind(firstQueue()).to(exchange()).with(man);   &#125;   &#x2F;&#x2F;将secondQueue和topicExchange绑定,而且绑定的键值为用上通配路由键规则topic.#   &#x2F;&#x2F; 这样只要是消息携带的路由键是以topic.开头,都会分发到该队列   @Bean   Binding bindingExchangeMessage2() &#123;       return BindingBuilder.bind(secondQueue()).to(exchange()).with(&quot;topic.#&quot;);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后添加2个接口，用于推送消息到主题交换机：</p><pre class="line-numbers language-none"><code class="language-none">   @GetMapping(&quot;&#x2F;sendTopicMessage1&quot;)   public String sendTopicMessage1() &#123;       String messageId &#x3D; String.valueOf(UUID.randomUUID());       String messageData &#x3D; &quot;message: M A N &quot;;       String createTime &#x3D; LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));       Map&lt;String, Object&gt; manMap &#x3D; new HashMap&lt;&gt;();       manMap.put(&quot;messageId&quot;, messageId);       manMap.put(&quot;messageData&quot;, messageData);       manMap.put(&quot;createTime&quot;, createTime);       rabbitTemplate.convertAndSend(&quot;topicExchange&quot;, &quot;topic.man&quot;, manMap);       return &quot;ok&quot;;   &#125;   @GetMapping(&quot;&#x2F;sendTopicMessage2&quot;)   public String sendTopicMessage2() &#123;       String messageId &#x3D; String.valueOf(UUID.randomUUID());       String messageData &#x3D; &quot;message: woman is all &quot;;       String createTime &#x3D; LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));       Map&lt;String, Object&gt; womanMap &#x3D; new HashMap&lt;&gt;();       womanMap.put(&quot;messageId&quot;, messageId);       womanMap.put(&quot;messageData&quot;, messageData);       womanMap.put(&quot;createTime&quot;, createTime);       rabbitTemplate.convertAndSend(&quot;topicExchange&quot;, &quot;topic.woman&quot;, womanMap);       return &quot;ok&quot;;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产者项目完成，同理，对消费者项目编码：创建TopicManReceiver.java：</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;import java.util.Map;@Component@RabbitListener(queues &#x3D; &quot;topic.man&quot;)public class TopicManReceiver &#123;   @RabbitHandler   public void process(Map testMessage) &#123;       System.out.println(&quot;TopicManReceiver消费者收到消息  : &quot; + testMessage.toString());   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再创建一个TopicTotalReceiver.java：</p><pre class="line-numbers language-none"><code class="language-none">package com.elegant.rabbitmqconsumer.receiver;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;import java.util.Map;@Component@RabbitListener(queues &#x3D; &quot;topic.woman&quot;)public class TopicTotalReceiver &#123;   @RabbitHandler   public void process(Map testMessage) &#123;       System.out.println(&quot;TopicTotalReceiver消费者收到消息  : &quot; + testMessage.toString());   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行两个项目，先调用sendTopicMessage1接口。<br>可以发现两个监听消费者都接收到了消息。<br>然后调用sendTopicMessage2接口。<br>只有TopicTotalReceiver消费到了消息<br>参考：yes消息队列核心知识点<br>参考：<a href="https://blog.csdn.net/qq_35387940/article/details/100514134">https://blog.csdn.net/qq_35387940/article/details/100514134</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+mybatis自动生成器实现多表连接的example查询</title>
      <link href="/2021/09/29/mybatis-tableslink-example/"/>
      <url>/2021/09/29/mybatis-tableslink-example/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-mybatis自动生成器实现多表连接的example查询"><a href="#springboot-mybatis自动生成器实现多表连接的example查询" class="headerlink" title="springboot+mybatis自动生成器实现多表连接的example查询"></a>springboot+mybatis自动生成器实现多表连接的example查询</h1><h2 id="修改-mapper文件"><a href="#修改-mapper文件" class="headerlink" title="修改.mapper文件"></a>修改.mapper文件</h2><blockquote><p>新增resultMap:(根据多表组合需要的字段，type绑定组合后的类)</p><pre class="line-numbers language-none"><code class="language-none">&lt;resultMap id&#x3D;&quot;AdminActionAdminResultMap&quot; type&#x3D;&quot;com.zwq.websocket2.constants.AdminActionAdmin&quot; &gt;   &lt;id column&#x3D;&quot;action_id&quot; property&#x3D;&quot;actionId&quot; jdbcType&#x3D;&quot;INTEGER&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;admin_id&quot; property&#x3D;&quot;adminId&quot; jdbcType&#x3D;&quot;INTEGER&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;name&quot; property&#x3D;&quot;name&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;ac_type&quot; property&#x3D;&quot;acType&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;content_type&quot; property&#x3D;&quot;contentType&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;ac_content&quot; property&#x3D;&quot;acContent&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;ac_date&quot; property&#x3D;&quot;acDate&quot; jdbcType&#x3D;&quot;TIMESTAMP&quot; &#x2F;&gt; &lt;&#x2F;resultMap&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>select查询：</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;selectAdminActionAdminByExample&quot; resultMap&#x3D;&quot;AdminActionAdminResultMap&quot; parameterType&#x3D;&quot;com.zwq.websocket2.pojo.AdminActionExample&quot; &gt;   select action_id,ad.admin_id,ad.name,ac_type,content_type,ac_content,ac_date   from admin_action ac   left join admin ad on ac.admin_id &#x3D; ad.admin_id   &lt;if test&#x3D;&quot;_parameter !&#x3D; null&quot; &gt;     &lt;include refid&#x3D;&quot;Example_Where_Clause&quot; &#x2F;&gt;   &lt;&#x2F;if&gt;   &lt;if test&#x3D;&quot;orderByClause !&#x3D; null&quot; &gt;     order by $&#123;orderByClause&#125;   &lt;&#x2F;if&gt; &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="修改对应example类"><a href="#修改对应example类" class="headerlink" title="修改对应example类"></a>修改对应example类</h2><blockquote><p>新增指定的模糊查询：<br>例：（根据主键查询，因为多表连接，所以得指定到哪个表的哪个字段）</p><pre class="line-numbers language-none"><code class="language-none">public Criteria andAdminIdEqualTo(Integer value) &#123;           addCriterion(&quot;ad.admin_id &#x3D;&quot;, value, &quot;adminId&quot;);           return (Criteria) this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例：（根据Name模糊查询）</p><pre class="line-numbers language-none"><code class="language-none">public Criteria andAdminNameLike(String value) &#123;           addCriterion(&quot;ad.name like&quot;, value, &quot;name&quot;);           return (Criteria) this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><pre class="line-numbers language-none"><code class="language-none">@RequestMapping(value &#x3D; &quot;&#x2F;admintest&quot;, method &#x3D; RequestMethod.GET)   public Object aaaa() &#123;       AdminActionExample adminActionExample &#x3D; new AdminActionExample();       AdminActionExample.Criteria criteria &#x3D; adminActionExample.createCriteria();       criteria.andAdminNameLike(&quot;%z%&quot;);       List list &#x3D; adminActionMapper.selectAdminActionAdminByExample(adminActionExample);       logger.info(&quot;测试：&#123;&#125;&quot;,list);       return list;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos+keepalived+nginx实现节点漂移</title>
      <link href="/2021/09/18/linux-keepalived-nginx/"/>
      <url>/2021/09/18/linux-keepalived-nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="centos-keepalived-nginx实现节点漂移"><a href="#centos-keepalived-nginx实现节点漂移" class="headerlink" title="centos+keepalived+nginx实现节点漂移"></a>centos+keepalived+nginx实现节点漂移</h1><h2 id="Keepalived-简要介绍"><a href="#Keepalived-简要介绍" class="headerlink" title="Keepalived 简要介绍"></a>Keepalived 简要介绍</h2><blockquote><p>Keepalived 是一种高性能的服务器高可用或热备解决方案， Keepalived 可以用来防止服务器单点故障的发生，通过配合 Nginx 可以实现 web 前端服务的高可用。</p></blockquote><h2 id="方案规划"><a href="#方案规划" class="headerlink" title="方案规划"></a>方案规划</h2><blockquote><p>两台虚拟机分别装好nginx、keepalived<br>一台主机，一台从机。主节点提供服务，之后断掉主节点，观察备用节点是否启用</p></blockquote><h2 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h2><blockquote><pre class="line-numbers language-none"><code class="language-none">#安装nginxyum install nginx#关闭防火墙和selinuxsystemctl stop firewalld.servicesetenfore 0#启动 Nginxsystemctl start nginx#设置 Nginx 开机启动systemctl enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别访问两个nginx查看是否启动</p></blockquote><h2 id="安装-Keepalived"><a href="#安装-Keepalived" class="headerlink" title="安装 Keepalived"></a>安装 Keepalived</h2><blockquote><pre class="line-numbers language-none"><code class="language-none">#解压安装yum install keepalived -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主节点配置:（注意网卡，vip，主从ip等配置）<br>vi /etc/keepalived/keepalived.conf<br>内容如下：</p><pre class="line-numbers language-none"><code class="language-none">! Configuration File for keepalivedglobal_defs &#123;   #一个没重复的名字即可   router_id keepalived_master&#125;# 检测nginx是否运行vrrp_script chk_nginx &#123;       script &quot;&#x2F;etc&#x2F;keepalived&#x2F;nginx_check.sh&quot;       interval 2       weight -20&#125;vrrp_instance VI_1 &#123;   # 此处不设置为MASTER，通过priority来竞争master   state BACKUP   # 网卡名字   interface ens33   # 同一个keepalived集群的virtual_router_id相同   virtual_router_id 51   # 权重，master要大于slave   priority 100   # 主备通讯时间间隔   advert_int 1   # 如果两节点的上联交换机禁用了组播，则采用vrrp单播通告的方式   # 本机即主节点ip   unicast_src_ip 192.168.0.200   unicast_peer &#123;               192.168.0.201   # 备节点ip   &#125;   # 设置nopreempt防止抢占资源   nopreempt   # 主备保持一致   authentication &#123;       auth_type PASS       auth_pass 1111   &#125;   # 与上方nginx运行状况检测呼应   track_script &#123;       chk_nginx   &#125;   virtual_ipaddress &#123;       # 虚拟ip地址（VIP，一个尚未占用的内网ip即可）       192.168.0.18   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>从节点配置:（注意网卡，vip，主从ip等配置）</p><pre class="line-numbers language-none"><code class="language-none">! Configuration File for keepalivedglobal_defs &#123;   #一个没重复的名字即可   router_id keepalived_slave&#125;# 检测nginx是否运行vrrp_script chk_nginx &#123;       script &quot;&#x2F;etc&#x2F;keepalived&#x2F;nginx_check.sh&quot;       interval 2       weight -20&#125;vrrp_instance VI_1 &#123;   # 此处不设置为MASTER，通过priority来竞争master   state BACKUP   # 网卡名字   interface ens33   # 同一个keepalived集群的virtual_router_id相同   virtual_router_id 51   # 权重，master要大于slave   priority 90   # 主备通讯时间间隔   advert_int 1   # 如果两节点的上联交换机禁用了组播，则采用vrrp单播通告的方式   # 本机即主节点ip   unicast_src_ip 192.168.0.201   unicast_peer &#123;               192.168.0.200   # 备节点ip   &#125;   # 设置nopreempt防止抢占资源   nopreempt   # 主备保持一致   authentication &#123;       auth_type PASS       auth_pass 1111   &#125;   # 与上方nginx运行状况检测呼应   track_script &#123;       chk_nginx   &#125;   virtual_ipaddress &#123;       # 虚拟ip地址（VIP，一个尚未占用的内网ip即可）       192.168.0.18   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动nginx,keepalive<br>systemctl start keepalived<br>配置好输入vip:注意加端口号，我的nginx端口是8089</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx+tomcat*2实现负载均衡</title>
      <link href="/2021/09/13/linux-nginx-tomcat2/"/>
      <url>/2021/09/13/linux-nginx-tomcat2/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-tomcat-2实现负载均衡"><a href="#nginx-tomcat-2实现负载均衡" class="headerlink" title="nginx+tomcat*2实现负载均衡"></a>nginx+tomcat*2实现负载均衡</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><blockquote><p>安装tomcat<br>安装gcc<br>安装make<br>yum -y install gcc automake autoconf libtool make<br>安装pcre和zlib这两个包：<br>yum install -y pcre-devel<br>yum install -y zlib-devel<br>安装nginx1.12.2<br>去官网下载nginx的tar.gz的包：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a><br>下载后解压安装</p><pre class="line-numbers language-none"><code class="language-none">tar -xvzf nginx-1.12.2.tar.gzcd nginx-1.12.2.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx   #执行配置的命令make &amp;&amp; make install   #当前位置代码编译<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><blockquote><p>vi /usr/local/nginx/conf/nginx.conf   #更改端口</p><pre class="line-numbers language-none"><code class="language-none">server&#123;   listen:  8089   server_name   localhost&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动nginx<br>方式一：/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>方式二：/usr/local/nginx/sbin/nginx -t</p></blockquote><blockquote><p>配置:<br>vi /usr/local/nginx/conf/nginx.conf<br>第一个server前面加：(根据配置)</p><pre class="line-numbers language-none"><code class="language-none">upstream tomcat_test  &#123;     server localhost:8080 weight&#x3D;1;     server localhost:8082 weight&#x3D;1;  &#125;   server &#123;       listen       8089;       server_name  localhost;       #charset koi8-r;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释Local:</p><pre class="line-numbers language-none"><code class="language-none">#location &#x2F; &#123;       #access_log  logs&#x2F;host.access.log  main;       #location &#x2F; &#123;        #   root   html;        #   index  index.html index.htm;       #&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加location</p><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;  proxy_pass http:&#x2F;&#x2F;tomcat_test;  proxy_redirect     off;  proxy_set_header   Host             $host:$server_port;  proxy_set_header   X-Real-IP        $remote_addr;  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;  proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;  proxy_max_temp_file_size 0;  proxy_connect_timeout      90; #连接前面的服务器超时时间  proxy_send_timeout         90;#请求转发数据报文的超时时间  proxy_read_timeout         90;#读取超时时间  proxy_buffer_size          4k; # 缓冲区的大小  proxy_buffers              4 32k; #  proxy_busy_buffers_size    64k; # #proxy_buffers缓冲区，网页平均在32k以下的  proxy_temp_file_write_size 64k; ##高负荷下缓冲大小（proxy_buffers*2）&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>location:详解：</p><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;  proxy_pass http:&#x2F;&#x2F;tomcat_pool;    #转向tomcat处理  proxy_redirect     off;#是否跳转  proxy_set_header   Host             $host; #请求要转发的host  proxy_set_header   X-Real-IP        $remote_addr;#请求的远程地址    这些在浏览器的header都可看，不一一解释  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;  proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;  proxy_max_temp_file_size 0;  proxy_connect_timeout      90; #连接前面的服务器超时时间  proxy_send_timeout         90;#请求转发数据报文的超时时间  proxy_read_timeout         90;#读取超时时间  proxy_buffer_size          4k; # 缓冲区的大小  proxy_buffers              4 32k; #  proxy_busy_buffers_size    64k; # #proxy_buffers缓冲区，网页平均在32k以下的  proxy_temp_file_write_size 64k; ##高负荷下缓冲大小（proxy_buffers*2）&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="加入服务"><a href="#加入服务" class="headerlink" title="加入服务"></a>加入服务</h2><blockquote><p>vi /usr/lib/systemd/system/nginx.service<br>创建nginx.service加入以下内容:</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description&#x3D;nginx -  web serverAfter&#x3D;network.target remote-fs.target nss-lookup.target [Service]Type&#x3D;forkingPIDFile&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pidExecStartPre&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confExecReload&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reloadExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stopExecQuit&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s quitPrivateTmp&#x3D;true [Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关操作：</p><pre class="line-numbers language-none"><code class="language-none">systemctl start  nginx.servicesystemctl stop  nginx.servicesystemctl  enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos下添加tomcat服务并自启动</title>
      <link href="/2021/09/13/linux-tomcat-service-autostart/"/>
      <url>/2021/09/13/linux-tomcat-service-autostart/</url>
      
        <content type="html"><![CDATA[<p>&emsp;</p><h1 id="centos下添加tomcat服务并自启动"><a href="#centos下添加tomcat服务并自启动" class="headerlink" title="centos下添加tomcat服务并自启动"></a>centos下添加tomcat服务并自启动</h1><h2 id="为Tomcat添加启动参数"><a href="#为Tomcat添加启动参数" class="headerlink" title="为Tomcat添加启动参数"></a>为Tomcat添加启动参数</h2><blockquote><p>catalina.sh在执行的时候会调用同级路径下的setenv.sh来设置额外的环境变量，<br>因此在/usr/local/tomcat/apache-tomcat-9.0.31/bin（安装路径）下创建setenv.sh文件，内容如下：(根据安装路径设置)</p><pre class="line-numbers language-none"><code class="language-none">export CATALINA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-9.0.31export CATALINA_BASE&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-9.0.31#设置Tomcat的PID文件CATALINA_PID&#x3D;&quot;$CATALINA_BASE&#x2F;tomcat.pid&quot;#添加JVM选项JAVA_OPTS&#x3D;&quot;-server -XX:PermSize&#x3D;256M -XX:MaxPermSize&#x3D;1024m -Xms512M -Xmx1024M -XX:MaxNewSize&#x3D;256m&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="编写tomcat-service文件"><a href="#编写tomcat-service文件" class="headerlink" title="编写tomcat.service文件"></a>编写tomcat.service文件</h2><blockquote><p>在/usr/lib/systemd/system路径下添加tomcat.service</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description&#x3D;TomcatAfter&#x3D;syslog.target network.target remote-fs.target nss-lookup.target[Service]Type&#x3D;forkingPIDFile&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-9.0.31&#x2F;tomcat.pidExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-9.0.31&#x2F;bin&#x2F;startup.shExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPIDExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT $MAINPIDPrivateTmp&#x3D;true[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[unit]配置了服务的描述，规定了在network启动之后执行，<br>[service]配置服务的pid，服务的启动，停止，重启<br>[install]配置了使用用户</p></blockquote><h2 id="将Tomcat加入服务管理"><a href="#将Tomcat加入服务管理" class="headerlink" title="将Tomcat加入服务管理"></a>将Tomcat加入服务管理</h2><blockquote><p>systemctl enable tomcat.service<br>systemctl disable tomcat.service<br>systemctl start tomcat.service<br>systemctl stop tomcat.service<br>systemctl restart tomcat.service</p></blockquote><p>原文链接：<a href="https://blog.csdn.net/u012351661/article/details/76254268">https://blog.csdn.net/u012351661/article/details/76254268</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useradd -s /nologin创建用户后ftp无法登录</title>
      <link href="/2021/09/13/linux-ftp-login-error/"/>
      <url>/2021/09/13/linux-ftp-login-error/</url>
      
        <content type="html"><![CDATA[<h1 id="useradd-s-nologin创建用户后ftp无法登录"><a href="#useradd-s-nologin创建用户后ftp无法登录" class="headerlink" title="useradd -s /nologin创建用户后ftp无法登录"></a>useradd -s /nologin创建用户后ftp无法登录</h1><h2 id="530-Login-incorrect"><a href="#530-Login-incorrect" class="headerlink" title="530 Login incorrect"></a>530 Login incorrect</h2><blockquote><p>服务器中useradd -s /sbin/nologin xxx创建用户后客户端发现竟然不能登录，报530错误<br>检查本地配置没有问题，使用正常用户也可以登录。<br>原因：vsftpd默认会检查用户的shell，如果用户的shell在/etc/shells没有记录，则无法登陆ftp</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>在/etc/shells文件里面添加用户的shell解释器<br>vim /etc/shells<br>解释：/etc/shells文件的作用<br>1.系统某些服务在运行过程中，回去检查用户使用的shells，而这些shell查询就是借助/etc/shells这个文件。<br>2.修改该文件不会影响用户登陆服务器主机的权限，该文件提供给解释器给系统的某些服务判断一个用户是否是有效用户，<br>例如我创建的ftp用户解释器为/sbin/nologin，我系统的/etc/shells文件里面没有添加/sbin/nologin，<br>所以我创建的ftp用户登陆不了ftp服务，后面将/sbin/nologin添加进/etc/shells文件，则问题解决。<br>&emsp;<br>原文链接：<a href="https://blog.csdn.net/sunnySe/article/details/116023901">https://blog.csdn.net/sunnySe/article/details/116023901</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7搭建本地yum源</title>
      <link href="/2021/09/13/linux-create-yum/"/>
      <url>/2021/09/13/linux-create-yum/</url>
      
        <content type="html"><![CDATA[<h1 id="centos7搭建本地yum源"><a href="#centos7搭建本地yum源" class="headerlink" title="centos7搭建本地yum源"></a>centos7搭建本地yum源</h1><h2 id="安装启动httpd服务器"><a href="#安装启动httpd服务器" class="headerlink" title="安装启动httpd服务器"></a>安装启动httpd服务器</h2><pre class="line-numbers language-none"><code class="language-none">yum -y install httpd yumsystemctl start httpd#设置开机启动http服务systemctl enable httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器输入ip:80查看是否开启成功</p><h2 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h2><pre class="line-numbers language-none"><code class="language-none">#创建挂载目录mkdir -p &#x2F;mnt&#x2F;cdrom#挂载mount &#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;cdrom#编译此文件vi &#x2F;etc&#x2F;fstab#在文件最后一行增加以下内容：(挂载的镜像)&#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;cdrom iso9660 defaults 0 0#开启目录阅览vi &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;welcome.conf#将Options -Indexes修改为Options +Indexes#旧文件复制mv &#x2F;var&#x2F;www&#x2F;html &#x2F;var&#x2F;www&#x2F;html_old#做挂载目录 的软链接ln -s &#x2F;mnt&#x2F;cdrom&#x2F; &#x2F;var&#x2F;www&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启httpd</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;yum.repos.d&#x2F;zhsx-lan.repo#修改：(根据网络设置)[ZHSX-LAN-YUM]name&#x3D;CentOS7baseurl&#x3D;http:&#x2F;&#x2F;192.168.0.200:8000gpgcheck&#x3D;1gpgkey&#x3D;http:&#x2F;&#x2F;192.168.0.200:8000&#x2F;RPM-GPG-KEY-CentOS-7#测试是否能下载yum install telnet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
