<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java-3</title>
      <link href="/2021/11/14/java-base-3/"/>
      <url>/2021/11/14/java-base-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="concurrent包的实现"><a href="#concurrent包的实现" class="headerlink" title="concurrent包的实现"></a>concurrent包的实现</h2><p>由于java的CAS同时具有 volatile 读和volatile写的内存语义，因此Java线程之间的通信现在有了下⾯四种⽅式：</p><ol><li>A线程写volatile变量，随后B线程读这个volatile变量。</li><li>A线程写volatile变量，随后B线程⽤CAS更新这个volatile变量。</li><li>A线程⽤CAS更新⼀个volatile变量，随后B线程⽤CAS更新这个volatile变量。</li><li>A线程⽤CAS更新⼀个volatile变量，随后B线程读这个volatile变量。</li></ol><p>Java的CAS会使⽤现代处理器上提供的⾼效机器级别原⼦指令，这些原⼦指令以原⼦⽅式对内存执⾏读- 改-写操作，这是在多处理器中实现同步的关键<br>同时，volatile变量的读/写和CAS可以实现线程之间的通信。把这些特性整合在 ⼀起，就形成了整个concurrent包得以实现的基⽯。<br>通用化的实现模式：</p><ul><li>⾸先，声明共享变量为volatile；</li><li>然后，使⽤CAS的原⼦条件更新来实现线程之间的同步；</li><li>同时，配合以volatile的读/写和CAS所具有的volatile读和写的内存语义来实现线程之间的通信。</li></ul><p>AQS，非阻塞数据结构和原子变量类（java.util.concurrent.atomic包中的类），这些concurrent包中的基础类都是使⽤这种模式来实现的，⽽concurrent包中的⾼层类⼜是依赖于这些基础类来实现的。从整体来看，concurrent包的实现示意图如下：<br><img src="/2021/11/14/java-base-3/java-1.png"></p><h2 id="Java线程池详解"><a href="#Java线程池详解" class="headerlink" title="Java线程池详解"></a>Java线程池详解</h2><p>线程的创建和销毁，都涉及到系统调⽤，⽐较消耗系统资源，那么有没有⼀种办法使得线程可以复⽤，就 是执⾏完⼀个任务，并不被销毁，⽽是可以继续执⾏其他的任务？所以就引⼊了线程池技术，避免频繁的 线程创建和销毁。<br>在Java中有⼀个Executors⼯具类，可以为我们创建⼀个线程池，其本质就是new了⼀个 ThreadPoolExecutor对象</p><h3 id="ThreadPoolExecutor类"><a href="#ThreadPoolExecutor类" class="headerlink" title="ThreadPoolExecutor类"></a>ThreadPoolExecutor类</h3><p>java.uitl.concurrent.ThreadPoolExecutor类是线程池中最核⼼的⼀个类，因此如果要透彻地了解Java中 的线程池，必须先了解这个类。<br>ThreadPoolExecutor类中提供了四个构造⽅法：</p><pre class="line-numbers language-none"><code class="language-none">public ThreadPoolExecutor(int corePoolSize,                             int maximumPoolSize,                             long keepAliveTime,                             TimeUnit unit,                             BlockingQueue&lt;Runnable&gt; workQueue) &#123;       this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,            Executors.defaultThreadFactory(), defaultHandler);   &#125;public ThreadPoolExecutor(int corePoolSize,                             int maximumPoolSize,                             long keepAliveTime,                             TimeUnit unit,                             BlockingQueue&lt;Runnable&gt; workQueue,                             ThreadFactory threadFactory) &#123;       this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,            threadFactory, defaultHandler);   &#125;public ThreadPoolExecutor(int corePoolSize,                             int maximumPoolSize,                             long keepAliveTime,                             TimeUnit unit,                             BlockingQueue&lt;Runnable&gt; workQueue,                             RejectedExecutionHandler handler) &#123;       this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,            Executors.defaultThreadFactory(), handler);   &#125;public ThreadPoolExecutor(int corePoolSize,                             int maximumPoolSize,                             long keepAliveTime,                             TimeUnit unit,                             BlockingQueue&lt;Runnable&gt; workQueue,                             ThreadFactory threadFactory,                             RejectedExecutionHandler handler) &#123;       if (corePoolSize &lt; 0 ||           maximumPoolSize &lt;&#x3D; 0 ||           maximumPoolSize &lt; corePoolSize ||           keepAliveTime &lt; 0)           throw new IllegalArgumentException();       if (workQueue &#x3D;&#x3D; null || threadFactory &#x3D;&#x3D; null || handler &#x3D;&#x3D; null)           throw new NullPointerException();       this.acc &#x3D; System.getSecurityManager() &#x3D;&#x3D; null ?               null :               AccessController.getContext();       this.corePoolSize &#x3D; corePoolSize;       this.maximumPoolSize &#x3D; maximumPoolSize;       this.workQueue &#x3D; workQueue;       this.keepAliveTime &#x3D; unit.toNanos(keepAliveTime);       this.threadFactory &#x3D; threadFactory;       this.handler &#x3D; handler;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ThreadPoolExecutor继承了AbstractExecutorService类，并提供了四个构造 器，事实上，通过观察每个构造器的源码具体实现，发现前⾯三个构造器都是调⽤的第四个构造器进⾏的 初始化⼯作<br>构造器中各个参数的含义：</p><ul><li>corePoolSize：核⼼池的⼤⼩，这个参数跟后⾯讲述的线程池的实现原理有⾮常⼤的关系。在创建了 线程池后，默认情况下，线程池中并没有任何线程，⽽是等待有任务到来才创建线程去执⾏任务，除⾮ 调⽤了prestartAllCoreThreads()或者prestartCoreThread()⽅法，从这2个⽅法的名字就可以看出， 是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者⼀个线程。默认情况 下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建⼀个线程去执⾏任务，当 线程池中的线程数⽬达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li><li>maximumPoolSize：线程池最⼤线程数，这个参数也是⼀个⾮常重要的参数，它表示在线程池中最多 能创建多少个线程；</li><li>keepAliveTime：表示线程没有任务执⾏时最多保持多久时间会终⽌。默认情况下，只有当线程池中的 线程数⼤于corePoolSize时，keepAliveTime才会起作⽤，直到线程池中的线程数不⼤于 corePoolSize，即当线程池中的线程数⼤于corePoolSize时，如果⼀个线程空闲的时间达到 keepAliveTime，则会终⽌，直到线程池中的线程数不超过corePoolSize。但是如果调⽤了 allowCoreThreadTimeOut(boolean)⽅法，在线程池中的线程数不⼤于corePoolSize时， keepAliveTime参数也会起作⽤，直到线程池中的线程数为0；</li><li>unit：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性：<pre class="line-numbers language-none"><code class="language-none">TimeUnit.DAYS; &#x2F;&#x2F;天TimeUnit.HOURS; &#x2F;&#x2F;⼩时TimeUnit.MINUTES; &#x2F;&#x2F;分钟TimeUnit.SECONDS; &#x2F;&#x2F;秒TimeUnit.MILLISECONDS; &#x2F;&#x2F;毫秒TimeUnit.MICROSECONDS; &#x2F;&#x2F;微妙TimeUnit.NANOSECONDS; &#x2F;&#x2F;纳秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>workQueue：⼀个阻塞队列，用来存储等待执⾏的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，⼀般来说，这里的阻塞队列有以下⼏种选择：<ul><li>ArrayBlockingQueue;</li><li>LinkedBlockingQueue;</li><li>SynchronousQueue;</li><li>ArrayBlockingQueue和PriorityBlockingQueue使⽤较少，⼀般使⽤LinkedBlockingQueue和 Synchronous。线程池的排队策略与BlockingQueue有关。</li></ul></li><li>threadFactory：线程⼯⼚，主要⽤来创建线程；</li><li>handler：表示当拒绝处理任务时的策略，有以下四种取值：<ul><li>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionExcepti on异常</li><li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前⾯的任务，然后重新尝 试执⾏任务（重复此过程）</li><li>ThreadPoolExecutor.CallerRunsPolicy：由调⽤线程处理该任务</li></ul></li></ul><p>线程池的执⾏流程：<br><img src="/2021/11/14/java-base-3/java-2.png"><br>任务被提交到线程池，会先判断当前线程数量是否⼩于corePoolSize，如果⼩于则创建线程来执⾏提交的 任务，否则将任务放⼊workQueue队列，如果workQueue满了，则判断当前线程数量是否⼩于 maximumPoolSize,如果⼩于则创建线程执⾏任务，否则就会调⽤handler，以表示线程池拒绝接收任务。<br>&emsp;<br>线程池的execute方法:</p><pre class="line-numbers language-none"><code class="language-none">int c &#x3D; ctl.get();if (workerCountOf(c) &lt; corePoolSize) &#123;    if (addWorker(command, true))        return;    c &#x3D; ctl.get();&#125;if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;    int recheck &#x3D; ctl.get();    if (! isRunning(recheck) &amp;&amp; remove(command))        reject(command);    else if (workerCountOf(recheck) &#x3D;&#x3D; 0)        addWorker(null, false);&#125;else if (!addWorker(command, false))    reject(command);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断当前活跃线程数是否⼩于corePoolSize,如果⼩于，则调⽤addWorker创建线程执⾏任务<br>如果不⼩于corePoolSize，则将任务添加到workQueue队列。<br>如果放⼊workQueue失败，则创建线程执⾏任务，如果这时创建线程失败(当前线程数不⼩于 maximumPoolSize时)，就会调⽤reject(内部调⽤handler)拒绝接受任务。<br>&emsp;<br>addWorker方法：</p><pre class="line-numbers language-none"><code class="language-none">private boolean addWorker(Runnable firstTask, boolean core) &#123;        retry:        for (;;) &#123;            int c &#x3D; ctl.get();            int rs &#x3D; runStateOf(c);            &#x2F;&#x2F; Check if queue empty only if necessary.            if (rs &gt;&#x3D; SHUTDOWN &amp;&amp;                ! (rs &#x3D;&#x3D; SHUTDOWN &amp;&amp;                   firstTask &#x3D;&#x3D; null &amp;&amp;                   ! workQueue.isEmpty()))                return false;            for (;;) &#123;                int wc &#x3D; workerCountOf(c);                if (wc &gt;&#x3D; CAPACITY ||                    wc &gt;&#x3D; (core ? corePoolSize : maximumPoolSize))                    return false;                if (compareAndIncrementWorkerCount(c))                    break retry;                c &#x3D; ctl.get();  &#x2F;&#x2F; Re-read ctl                if (runStateOf(c) !&#x3D; rs)                    continue retry;                &#x2F;&#x2F; else CAS failed due to workerCount change; retry inner loop            &#125;        &#125;        boolean workerStarted &#x3D; false;        boolean workerAdded &#x3D; false;        Worker w &#x3D; null;        try &#123;            w &#x3D; new Worker(firstTask);            final Thread t &#x3D; w.thread;            if (t !&#x3D; null) &#123;                final ReentrantLock mainLock &#x3D; this.mainLock;                mainLock.lock();                try &#123;                    &#x2F;&#x2F; Recheck while holding lock.                    &#x2F;&#x2F; Back out on ThreadFactory failure or if                    &#x2F;&#x2F; shut down before lock acquired.                    int rs &#x3D; runStateOf(ctl.get());                    if (rs &lt; SHUTDOWN ||                        (rs &#x3D;&#x3D; SHUTDOWN &amp;&amp; firstTask &#x3D;&#x3D; null)) &#123;                        if (t.isAlive()) &#x2F;&#x2F; precheck that t is startable                            throw new IllegalThreadStateException();                        workers.add(w);                        int s &#x3D; workers.size();                        if (s &gt; largestPoolSize)                            largestPoolSize &#x3D; s;                        workerAdded &#x3D; true;                    &#125;                &#125; finally &#123;                    mainLock.unlock();                &#125;                if (workerAdded) &#123;                    t.start();                    workerStarted &#x3D; true;                &#125;            &#125;        &#125; finally &#123;            if (! workerStarted)                addWorkerFailed(w);        &#125;        return workerStarted;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">wc &gt;&#x3D; (core ? corePoolSize : maximumPoolSize))                    return false;&#x2F;&#x2F;这块代码是在创建非核心线程时，即core等于false。&#x2F;&#x2F;判断当前线程数是否大于等于maximumPoolSize， 如果大于等于则返回false，&#x2F;&#x2F;即上边说到的addWorker(command, false)中创建线程失败的情况。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">w &#x3D; new Worker(firstTask);            final Thread t &#x3D; w.thread;&#x2F;&#x2F;创建Worker对象，同时也会实例化⼀个Thread对象。t.start();&#x2F;&#x2F;启动这个线程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>再看看Worker的实现：</p><pre class="line-numbers language-none"><code class="language-none">Worker(Runnable firstTask) &#123;          setState(-1); &#x2F;&#x2F; inhibit interrupts until runWorker          this.firstTask &#x3D; firstTask;          this.thread &#x3D; getThreadFactory().newThread(this);      &#125;public void run() &#123;          runWorker(this);      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在创建Worker时会调⽤threadFactory来创建⼀个线程。上边的t.start()中启动⼀个线程就会触发 Worker的run⽅法被线程调⽤。<br>&emsp;<br>runWorker⽅法的逻辑:</p><pre class="line-numbers language-none"><code class="language-none">try &#123;          while (task !&#x3D; null || (task &#x3D; getTask()) !&#x3D; null) &#123;              w.lock();              &#x2F;&#x2F; If pool is stopping, ensure thread is interrupted;              &#x2F;&#x2F; if not, ensure thread is not interrupted.  This              &#x2F;&#x2F; requires a recheck in second case to deal with              &#x2F;&#x2F; shutdownNow race while clearing interrupt              if ((runStateAtLeast(ctl.get(), STOP) ||                   (Thread.interrupted() &amp;&amp;                    runStateAtLeast(ctl.get(), STOP))) &amp;&amp;                  !wt.isInterrupted())                  wt.interrupt();              try &#123;                  beforeExecute(wt, task);                  Throwable thrown &#x3D; null;                  try &#123;                      task.run();                  &#125; catch (RuntimeException x) &#123;                      thrown &#x3D; x; throw x;                  &#125; catch (Error x) &#123;                      thrown &#x3D; x; throw x;                  &#125; catch (Throwable x) &#123;                      thrown &#x3D; x; throw new Error(x);                  &#125; finally &#123;                      afterExecute(task, thrown);                  &#125;              &#125; finally &#123;                  task &#x3D; null;                  w.completedTasks++;                  w.unlock();              &#125;          &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程调⽤runWoker，会while循环调⽤getTask⽅法从workerQueue⾥读取任务，然后执⾏任务。只要 getTask⽅法不返回null,此线程就不会退出。<br>&emsp;<br>看getTask⽅法实现:</p><pre class="line-numbers language-none"><code class="language-none">private Runnable getTask() &#123;        boolean timedOut &#x3D; false; &#x2F;&#x2F; Did the last poll() time out?        for (;;) &#123;            int c &#x3D; ctl.get();            int rs &#x3D; runStateOf(c);            &#x2F;&#x2F; Check if queue empty only if necessary.            if (rs &gt;&#x3D; SHUTDOWN &amp;&amp; (rs &gt;&#x3D; STOP || workQueue.isEmpty())) &#123;                decrementWorkerCount();                return null;            &#125;            int wc &#x3D; workerCountOf(c);            &#x2F;&#x2F; Are workers subject to culling?            boolean timed &#x3D; allowCoreThreadTimeOut || wc &gt; corePoolSize;            if ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))                &amp;&amp; (wc &gt; 1 || workQueue.isEmpty())) &#123;                if (compareAndDecrementWorkerCount(c))                    return null;                continue;            &#125;            try &#123;                Runnable r &#x3D; timed ?                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :                    workQueue.take();                if (r !&#x3D; null)                    return r;                timedOut &#x3D; true;            &#125; catch (InterruptedException retry) &#123;                timedOut &#x3D; false;            &#125;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">boolean timed &#x3D; allowCoreThreadTimeOut || wc &gt; corePoolSize;&#x2F;&#x2F;allowCoreThreadTimeOut,这个变量默认值是false。wc&gt;corePoolSize则是判断当前线 程数是否⼤于corePoolSize。Runnable r &#x3D; timed ?    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :    workQueue.take(); &#x2F;&#x2F;如果当前线程数⼤于corePoolSize，则会调⽤workQueue的poll⽅法获取任务，超时时间是 keepAliveTime。&#x2F;&#x2F;如果超过keepAliveTime时⻓，poll返回了null，上边提到的while循序就会退出，线程也就执⾏完了。&#x2F;&#x2F;如果当前线程数⼩于corePoolSize，则会调⽤workQueue的take⽅法阻塞在当前。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-2</title>
      <link href="/2021/11/06/java-base-2/"/>
      <url>/2021/11/06/java-base-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="数组（Array）与列表（ArrayList）的区别"><a href="#数组（Array）与列表（ArrayList）的区别" class="headerlink" title="数组（Array）与列表（ArrayList）的区别"></a>数组（Array）与列表（ArrayList）的区别</h2><p>空间大小：<br>Array的空间大小是固定的，空间不够时也不能再次申请，所以需要事前确定合适的空间大小。<br>ArrayList的空间是动态增长的，如果空间不够，它会创建一个空间比原空间大0.5倍的新数组，然后将所有元素复制到新数组中，接着抛弃旧数组。而且，每次添加新的元素的时候都会检查内部数组的空间是否足够。<br>存储内容：<br>Array数组可以包含基本类型和对象类型<br>ArrayList却只能包含对象类型<br>方法：<br>ArrayList作为Array的增强版，方法上比Array多样化。比如添加全部addAll()、删除全部removeAll()、返回迭代器iterator()等。</p><h2 id="mybatis中-与-的区别"><a href="#mybatis中-与-的区别" class="headerlink" title="mybatis中#与$的区别"></a>mybatis中#与$的区别</h2><p>MyBatis中使用parameterType向SQL语句传参，parameterType支持的类型可以是基本类型int,String,HashMap和java自定义类型。<br>在SQL中引用这些参数的时候，可以使用两种方式：<br>‘#{parameterName}’<br>‘${parameterName}’</p><ol><li>使用#{parameterName}引用参数的时候，Mybatis会把这个参数认为是一个字符串，并自动加上’’，例如传入参数是“Smith”，那么在下面SQL中：<br>Select * from emp where name = ‘Smith’; </li><li>使用${parameterName},会转换成：<br>Select * from emp where name = Smith;<br>简单说#{}是经过预编译的,是安全的。<br>而${}是未经过预编译的,仅仅是取变量的值,是非安全的,存在SQL注入。</li></ol><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>外部类按常规的类访问方式使用内部类，唯一的差别是外部类可以访问内部 类的所有方法与属性， 包括私有方法与属性。<br>内部类创建实例 OutClass.InnerClass obj = outClassInstance.new InnerClass(); //注意是外部类实例.new，内部类<br>静态内部类创建实例 AAA.StaticInner in = new AAA.StaticInner();//注意是外部类本身，静态内部类<br>为什么要用内部类？</p><ol><li>内部类⼀般只为其外部类使用</li><li>内部类提供了某种进入外部类的窗户</li><li>也是最吸引人的原因，每个内部类都能独立地继承⼀个类，而无论外部类是否已经继承了某个类。 因此，内部类使多重继承的解决方案变得更加完整。</li></ol><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制 形参具体限制的类型）。也就是说在泛型使⽤过程中，操作的数据类型被指定为⼀个参数，这种参数类 型可以⽤在类、接⼝和⽅法中，分别被称为泛型类、泛型接⼝、泛型⽅法。<br>例子：</p><pre class="line-numbers language-none"><code class="language-none">List arrayList &#x3D; new ArrayList(); arrayList.add(&quot;aaaa&quot;); arrayList.add(100); for(int i &#x3D; 0; i&lt; arrayList.size();i++)&#123; String item &#x3D; (String)arrayList.get(i); Log.d(&quot;泛型测试&quot;,&quot;item &#x3D; &quot; + item); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ArrayList可以存放任意类型，例⼦中添加了⼀个String类型，添加了⼀个Integer类型，再使⽤时都以 String的⽅式使⽤，因此程序崩溃了。为了解决类似这样的问题（在编译阶段就可以解决），泛型应运⽽⽣。<br>List<String> arrayList = new ArrayList<String>();<br>&emsp;<br>Java中的泛型，只在编译阶段有效。在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进⼊和离开⽅法的 边界处添加类型检查和类型转换的⽅法。也就是说，泛型信息不会进⼊到运⾏时阶段。<br>泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</String></String></p><h2 id="Java-finally语句到底是在return之前还-是之后执行？"><a href="#Java-finally语句到底是在return之前还-是之后执行？" class="headerlink" title="Java finally语句到底是在return之前还 是之后执行？"></a>Java finally语句到底是在return之前还 是之后执行？</h2><p>以下情况finally语句不会执行：</p><ul><li>执行到try语句块之前就return，当然不会执行finally</li><li>在try块中有System.exit(0);这样的语句，System.exit(0);是终⽌Java虚拟机JVM的，连JVM都停⽌ 了，所有都结束了，当然finally语句也不会被执⾏到。<br>&emsp;<br>finally语句在return语句执⾏之后return返回之前执⾏的。<br>就是return语句已经在try执⾏了再去执⾏finally语句，不过并没有直接返回，⽽是等finally语句执⾏完了再返回结果。<br>另外，如果finally里面也有return，那么就直接返回，覆盖掉try里面的return<br>然后如果finally里面不使用return，而是修改try里面return返回的值。那么返回的是修改之前，还是修改之后？<br>这取决于Java传值还是传址，传值就不会更改，传址就会更改。<br>那么如果异常，不执行try，执行catch，catch里面也有return，那么这里的return和try里的性质一样，执行了再去执行finally，也没有直接返回，而是等finally执行完在返回结果。</li></ul><h2 id="Java对象初始化过程"><a href="#Java对象初始化过程" class="headerlink" title="Java对象初始化过程"></a>Java对象初始化过程</h2><p>Person jack = new Person();</p><ol><li>new ⽤到了Person.class,所以会先找到Person.class⽂件，并加载到内存中(⽤到类中的内容类就会被加载)</li><li>执⾏该对象的static代码块(静态初始块)。(如果有的话，给Person.class类进⾏初始化)</li><li>在堆内存中开辟空间，分配内存地址</li><li>在堆内存中建⽴对象特有属性，并进⾏默认初始化</li><li>对属性进⾏显示初始化(声明成员属性并赋值)</li><li>执⾏普通初始块</li><li>执⾏构造函数</li><li>将内存地址赋值给栈内存中的jack变量</li></ol><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><p>⾯向接⼝编程和⾯向对象编程并不是平级的，它并不是⽐⾯向对象编程更先进的⼀种独⽴的编程思想，⽽是附属于面向对象思想体系，属于其⼀部分。或者说，它是⾯向对象编程体系中的思想精髓之⼀。<br>接⼝是⼀组规则的集合，它规定了实现本接⼝的类或接⼝必须拥有的⼀ 组规则。<br>接⼝是在⼀定粒度视图上同类事物的抽象表示。<br>⾯向对象的精髓是模拟现实，多从现实中思考⾯向对象的东⻄，对提⾼系统分析设计能⼒⼤有脾益。<br>单从具体功能来看， 除多重继承外，抽象类似乎完全能取代接⼝。但是，难道接⼝的存在是为了实现多重继承？当然不是。抽象类和接⼝的区别在于使⽤动机。使⽤抽象类是为了代码的复⽤，⽽使⽤接⼝的动机是为了实现多态性。</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList继承⾃ AbstractList，实现了 List 接⼝。底层基于数组实现容量⼤⼩动态变化。允许 null 的存在。同时还实现了 RandomAccess、Cloneable、 Serializable 接⼝，所以ArrayList 是⽀持快速访问、复制、序列化的。<br><img src="/2021/11/06/java-base-2/java-1.png"></p><ol><li>ArrayList是内部是以动态数组的形式来存储数据的、这⾥的动态数组不是意味着去改变原有内部⽣成的数组的⻓度、⽽是保留原有数组的引⽤、将其指向新 ⽣成的数组对象、这样会造成数组的⻓度可变的假象。</li><li>ArrayList具有数组所具有的特性、通过索引⽀持随机访问、所以通过随机访问ArrayList中的元素 效率⾮常⾼、但是执⾏插⼊、删除时效率⽐较地下。</li><li>ArrayList实现了AbstractList抽象类、List接⼝、所以其更具有了AbstractList和List的功能、前⾯我们知道AbstractList内部已经实现了获取Iterator和ListIterator的⽅法、所以ArrayList只需关⼼对数组操作的⽅法的实现</li><li>ArrayList实现了RandomAccess接⼝、此接⼝只有声明、没有⽅法体、表示ArrayList⽀持随机访问。</li><li>ArrayList实现了Cloneable接⼝、此接⼝只有声明、没有⽅法体、表示ArrayList⽀持克隆。 </li><li>ArrayList实现了Serializable接⼝、此接⼝只有声明、没有⽅法体、表示ArrayList⽀持序列化、即 可以将ArrayList以流的形式通过ObjectInputStream/ObjectOutputStream来写/读。<br>remove:<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;arrayList中的值为 [a,a,c,a,a] for (int i &#x3D; 0; i &lt; arrayList.size(); i++) &#123; if (arrayList.get(i) &#x3D;&#x3D; &quot;a&quot;) &#123; arrayList.remove(i); &#125; &#125; System.out.println(arrayList);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>在调⽤remove()⽅法时List的⻓度会发⽣变化⽽且元素 的位置会发⽣移动，从⽽在遍历时list实际上是变化的。最终达不到效果。<br>解决：<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;逆向遍历for (int i &#x3D; arrayList.size()-1; i &gt;&#x3D;0 ; i--) &#123;if (arrayList.get(i) &#x3D;&#x3D; &quot;a&quot;) &#123;arrayList.remove(i);&#125;&#125;System.out.println(arrayList);&#x2F;&#x2F;迭代器Iterator&lt;String&gt; ite &#x3D; arrayList.listIterator();while (ite.hasNext())&#123;if(ite.next() &#x3D;&#x3D; &quot;a&quot;)ite.remove();&#125;System.out.println(arrayList);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>Map 是 Key-Value 对映射的抽象接⼝，该映射不包括重复的键，即⼀个键对应⼀个值。HashMap 是基于哈希表的 Map 接⼝的实现，以 Key-Value 的形式存在，即存储的对象是 Entry (同时 包含了 Key 和 Value) 。在HashMap中，其会根据hash算法来计算key-value的存储位置并进⾏快速存取。特别地，HashMap最多只允许⼀条Entry的键为Null(多条会覆盖)，但允许多条Entry的值为Null。此 外，HashMap 是 Map 的⼀个⾮同步的实现。<br><img src="/2021/11/06/java-base-2/java-2.png"><br>需要注意，虽然容器号称存储的是 Java 对象，但实际上并不会真正将 Java 对象放⼊容器中，只是在容器中保留这些对象的引⽤。也就是说，Java 容器实际上包含的是引⽤变量，⽽这些引⽤变量指向了我们要实际保存的 Java 对象。</p><pre class="line-numbers language-none"><code class="language-none">HashMap&lt;String, Integer&gt; map &#x3D; new HashMap&lt;String, Integer&gt;();map.put(&quot;语文&quot;,1);map.put(&quot;数学&quot;,2);map.put(&quot;化学&quot;,3);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/06/java-base-2/java-3.png" alt="HashMap"><br><strong>put的实现：</strong></p><ol><li>对key的hashCode()做hash，然后再计算index;</li><li>如果没碰撞直接放到bucket⾥；</li><li>如果碰撞了，以链表的形式存在buckets后；</li><li>如果碰撞导致链表过⻓(⼤于等于TREEIFY_THRESHOLD)，就把链表转换成红⿊树；</li><li>如果节点已经存在就替换old value(保证key的唯⼀性)</li><li>如果bucket满了(超过load factor*current capacity)，就要resize。</li></ol><p><strong>get的实现：</strong></p><ol><li>bucket⾥的第⼀个节点，直接命中；</li><li>如果有冲突，则通过key.equals(k)去查找对应的entry</li><li>若为树，则在树中通过key.equals(k)查找，O(logn)；</li><li>若为链表，则在链表中通过key.equals(k)查找，O(n)。</li></ol><p><strong>HashMap的⼯作原理:</strong><br>通过hash的⽅法，通过put和get存储和获取对象。存储对象时，我们将K/V传给put⽅法时，它调⽤ hashCode计算hash从⽽得到bucket位置，进⼀步存储，HashMap会根据当前bucket的占⽤情况⾃动调整容量(超过Load Facotr则resize为原来的2倍)。获取对象时，我们将K传给get，它调⽤hashCode计算 hash从⽽得到bucket位置，并进⼀步调⽤equals()⽅法确定键值对。如果发⽣碰撞的时候，Hashmap通 过链表将产⽣碰撞冲突的元素组织起来，在Java 8中，如果⼀个bucket中碰撞冲突的元素超过某个限制 (默认是8)，则使⽤红⿊树来替换链表，从⽽提⾼速度。<br>哈希表每次增删改查的代价可以说是O（1）,当有hash冲突时，会在后面建立单链表，这时插入和查找以及删除操作消耗的时间会达到O(n)。每次扩容的代价是O（logn）</p><p><strong>equals()和hashCode()的都有什么作用？</strong><br>通过对key的hashCode()进⾏hashing，并计算下标( n-1 &amp; hash)，从⽽获得buckets的位置。如果产⽣ 碰撞，则利⽤key.equals()⽅法去链表或树中去查找对应的节点<br>&emsp;<br><strong>hash的实现吗？为什么要这样实现？</strong><br>在Java 1.8的实现中，是通过hashCode()的⾼16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在bucket的n⽐较⼩的时候，也能保证考虑到⾼低 bit都参与到hash的计算中，同时不会有太⼤的开销。</p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><p>字节流和字符流的区别：<br>读写单位不同：字节流以字节（8bit）为单位，字符流以字符为单位，根据码表映射字符，⼀次可能读多个字节。<br>处理对象不同：字节流能处理所有类型的数据（如图片、avi等），而字符流只能处理字符类型的数据。<br>只要是处理纯⽂本数据，就优先考虑使⽤字符流。 除此之外都使⽤字节流。</p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p>NIO主要有三⼤核⼼部分：Channel(通道)，Buffer(缓冲区), Selector。传统IO基于字节流和字符流进⾏ 操作，⽽NIO基于Channel和Buffer(缓冲区)进⾏操作，数据总是从通道读取到缓冲区中，或者从缓冲区写 ⼊到通道中。Selector(选择区)⽤于监听多个通道的事件（⽐如：连接打开，数据到达）。因此，单个线程 可以监听多个数据通道。<br>NIO 和 IO：<br>IO是⾯向流的，NIO是⾯向缓冲区的。 Java IO⾯向流意味着每次从流中读⼀个或多个字节，直⾄读取所有字节，它们没有被缓存在任何地⽅。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到⼀个缓冲区。NIO的缓冲导向⽅法略有不同。数据读取到⼀个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。⽽且，需确保当更多的数据读⼊缓冲区时，不要覆盖缓冲区⾥尚未处理的数据。<br>IO的各种流是阻塞的。这意味着，当⼀个线程调⽤read() 或 write()时，该线程被阻塞，直到有⼀些数据 被读取，或数据完全写⼊。该线程在此期间不能再⼲任何事情了。 NIO的⾮阻塞模式，使⼀个线程从某通 道发送请求读取数据，但是它仅能得到⽬前可⽤的数据，如果⽬前没有数据可⽤时，就什么都不会获取。⽽不是保持线程阻塞，所以直⾄数据变的可以读取之前，该线程可以继续做其他的事情。线程通常将⾮阻塞IO的空闲时间⽤于在其它通道上执⾏IO操作，所以⼀个单独的线程现在可以管理多个输 ⼊和输出通道（channel）。<br>&emsp;<br>Channel:<br>Channel和IO中的Stream(流)是差不多⼀个等级的。只不 过Stream是单向的，譬如：InputStream, OutputStream.⽽Channel是双向的，既可以⽤来进⾏读操作，⼜可以⽤来进⾏写操作。<br>NIO中的Channel的主要实现有： FileChannel DatagramChannel SocketChannel ServerSocketChannel<br>Buffer:<br>NIO中的关键Buffer实现有：ByteBuffer, CharBuffer, DoubleBuffer, FloatBuffer, IntBuffer, LongBuffer, ShortBuffer，分别对应基本数据类型: byte, char, double, float, int, long, short<br>Selector:<br>Selector运⾏单线程处理多个Channel，如果你的应⽤打开了多个通道，但每个连接的流量都很低，使⽤ Selector就会很⽅便。例如在⼀个聊天服务器中。要使⽤Selector, 得向Selector注册Channel，然后调⽤ 它的select()⽅法。这个⽅法会⼀直阻塞到某个注册的通道有事件就绪。⼀旦这个⽅法返回，线程就可以处 理这些事件，事件的例⼦有如新的连接进来、数据接收等。<br>Buffer步骤:<br>分配空间（ByteBuffer buf = ByteBuffer.allocate(1024); 还有⼀种allocateDirector后⾯再陈述）<br>写⼊数据到Buffer(int bytesRead = fileChannel.read(buf);)<br>调⽤filp()⽅法（ buf.flip();）<br>从Buffer中读取数据（System.out.print((char)buf.get());）<br>调⽤clear()⽅法或者compact()⽅法<br><img src="/2021/11/06/java-base-2/java-4.png"></p><h2 id="进程线程"><a href="#进程线程" class="headerlink" title="进程线程"></a>进程线程</h2><p>现在的操作系统是多任务操作系统。多线程是实现多任务的⼀种⽅式。<br>进程是指⼀个内存中运⾏的应⽤程序，每个进程都有⾃⼰独⽴的⼀块内存空间，⼀个进程中可以启动多个 线程。⽐如在Windows系统中，⼀个运⾏的exe就是⼀个进程。<br>线程是指进程中的⼀个执⾏流程，⼀个进程中可以运⾏多个线程。⽐如java.exe进程中可以运⾏很多线 程。线程总是属于某个进程，进程中的多个线程共享进程的内存。<br>在java中要想实现多线程，有两种⼿段，⼀种是继续Thread类，另外⼀种是实现Runable接⼝，当然准确来讲还有实现Callable接⼝，并与Future、线程池结合使⽤<br>&emsp;</p><h3 id="Java线程状态："><a href="#Java线程状态：" class="headerlink" title="Java线程状态："></a>Java线程状态：</h3><p>线程的⽣命周期及五种基本状态:<br><img src="/2021/11/06/java-base-2/java-5.png"></p><ul><li>新建状态（New）：当线程对象对创建后，即进⼊了新建状态，如：Thread t = new MyThread();</li><li>就绪状态（Runnable）：当调⽤线程对象的start()⽅法（t.start();），线程即进⼊就绪状态。处于就绪状 态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执⾏，并不是说执⾏了t.start()此线程⽴ 即就会执⾏；</li><li>运⾏状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执⾏，即进⼊到运⾏状态。注：就绪状态是进⼊到运⾏状态的唯⼀⼊⼝，也就是说，线程要想进⼊运⾏状态执⾏，⾸先必须处于就绪状态中；</li><li>阻塞状态（Blocked）：处于运⾏状态中的线程由于某种原因，暂时放弃对CPU的使⽤权，停⽌执⾏，此时进⼊阻塞状态，直到其进⼊到就绪状态，才有机会再次被CPU调⽤以进⼊到运⾏状态。根据阻塞产⽣的 原因不同，阻塞状态⼜可以分为三种：<ul><li>等待阻塞: 运⾏状态中的线程执⾏wait()⽅法，使本线程进⼊到等待阻塞状态；</li><li>同步阻塞: 线程在获取synchronized同步锁失败(因为锁被其它线程所占⽤)，它会进⼊同步阻塞状态；</li><li>其他阻塞: 通过调⽤线程的sleep()或join()或发出了I/O请求时，线程会进⼊到阻塞状态。当 sleep()状态超时、join()等待线程终⽌或者超时、或者I/O处理完毕时，线程重新转⼊就绪状态。</li></ul></li><li>死亡状态（Dead）：线程执⾏完了或者因异常退出了run()⽅法，该线程结束⽣命周期。<br>&emsp;<h3 id="常用线程函数："><a href="#常用线程函数：" class="headerlink" title="常用线程函数："></a>常用线程函数：</h3>sleep: 在指定的毫秒数内让当前正在执⾏的线程休眠（暂停执⾏）<br>join: 指等待t线程终⽌。即join()的作⽤是：“等待该线程终⽌”，这⾥需要理解的就是该线程是指的主线程等待⼦线程的终⽌。也就是在⼦线程调⽤了join()⽅法后⾯的代码，只有等到⼦线程结束了才能执⾏。<br>yield():暂停当前正在执⾏的线程对象，并执⾏其他线程。yield()应该做的是让当前运⾏线程回到可运⾏状态，以允许具有相同优先级的其他线程获得运⾏机会。<br>setPriority(): 更改线程的优先级，</li><li>MIN_PRIORITY = 1</li><li>NORM_PRIORITY = 5</li><li>MAX_PRIORITY = 10<br>interrupt():不要以为它是中断某个线程！它只是向线程发送⼀个中断信号，让线程在⽆限等待时（如死锁时）能抛出，从⽽结束线程，但是如果你吃掉了这个异常，那么这个线程还是不会中断的！<br>wait()：wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调⽤对象的notify()唤醒该线程，才能继续获取对象锁，并继续执⾏。<br>Thread.sleep()与Object.wait()⼆者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制。</li></ul><h3 id="wait和sleep区别："><a href="#wait和sleep区别：" class="headerlink" title="wait和sleep区别："></a>wait和sleep区别：</h3><p>相同点：</p><ul><li>他们都是在多线程的环境下，都可以在程序的调⽤处阻塞指定的毫秒数，并返回。</li><li>wait()和sleep()都可以通过interrupt()⽅法 打断线程的暂停状态 ，从⽽使线程⽴刻抛出 InterruptedException。如果线程A希望⽴即结束线程B，则可以对线程B对应的Thread实例调⽤interrupt⽅法。如果此刻 线程B正在wait/sleep /join，则线程B会⽴刻抛出InterruptedException，在catch() {} 中直接 return即可安全地结束线程。需要注意的是，InterruptedException是线程⾃⼰从内部抛出的，并不是interrupt()⽅法抛出的。 对某⼀线程调⽤ interrupt()时，如果该线程正在执⾏普通的代码，那么该线程根本就不会抛出 InterruptedException。<br>不同点：</li><li>Thread类的⽅法：sleep(),yield()等</li><li>Object的⽅法：wait()和notify()等</li><li>每个对象都有⼀个锁来控制同步访问。Synchronized关键字可以和对象的锁交互，来实现线程的 同步。sleep⽅法没有释放锁，⽽wait方法释放了锁，使得其他线程可以使⽤同步控制块或者⽅法。</li><li>wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用</li></ul><p>sleep():</p><ul><li>sleep()使当前线程进⼊停滞状态（阻塞当前线程），让出CUP的使用、目的是不让当前线程独⾃霸占 该进程所获的CPU资源，以留⼀定时间给其他线程执⾏的机会;</li><li>sleep()是Thread类的Static(静态)的⽅法；因此他不能改变对象的机锁，所以当在⼀个Synchronized 块中调⽤Sleep()⽅法是，线程虽然休眠了，但是对象的机锁并⽊有被释放，其他线程⽆法访问这个对 象（即使睡着也持有对象锁）。</li><li>在sleep()休眠时间期满后，该线程不⼀定会立即执行，这是因为其它线程可能正在运⾏,除非此线程具有更高的优先级。<br>wait():</li><li>wait()⽅法是Object类⾥的方法；当⼀个线程执行到wait()方法时，它就进入到⼀个和该对象相关的等 待池中，同时失去（释放）了对象的机锁（暂时失去机锁，wait(long timeout)超时时间到后还需要返 还对象锁）；</li><li>wait()使⽤notify或者notifyAlll或者指定睡眠时间来唤醒当前等待池中的线程。</li><li>wiat()必须放在synchronized block中，否则会在program runtime时扔 出”java.lang.IllegalMonitorStateException“异常。</li></ul><h3 id="悲观锁与乐观锁："><a href="#悲观锁与乐观锁：" class="headerlink" title="悲观锁与乐观锁："></a>悲观锁与乐观锁：</h3><p>悲观锁：<br>cpu是时分复用的，也就是把cpu的时间片，分配给不同的thread/process轮流执行，时间片与时间片之间，需要进行cpu切换，也就是会发生进程的切换。<br>切换涉及到清空寄存器，缓存数据。然后重新加载新的thread所需数据。当⼀个线程被挂起时，加⼊到阻塞队列，再通过 notify()，notifyAll()唤醒回来。在某个资源不可⽤的时候，就将cpu让出，把当前等待线程切换为阻塞状态。等到资源(⽐如⼀个共享数据）可⽤了，那么就将线程唤醒，让他进⼊runnable状态等待cpu调度。<br>独占锁是⼀种悲观锁，synchronized就是⼀种独占锁，它假设最坏的情况，并 且只有在确保其它线程不会造成⼲扰的情况下执⾏，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。<br>悲观锁缺点：<br>由于在进程挂起和恢复执行过程中存在着很大的开销。当⼀个线程正在等待锁时，它不能做任何事，所以悲观锁有很大的缺点。举个例子，如果⼀个线程需要某个资源，但是这个资源的占⽤时间很短， 当线程第⼀次抢占这个资源时，可能这个资源被占⽤，如果此时挂起这个线程，可能⽴刻就发现资源可用，然后又需要花费很⻓的时间重新抢占锁，时间代价就会非常高。<br>&emsp;<br>乐观锁：它的核心思路就是，每次不加锁而是假设没有冲突⽽去完成某项操作，如果因 为冲突失败就重试，直到成功为⽌。<br>在上面的例子中，某个线程可以不让出cpu,而是⼀直while循环，如果 失败就重试，直到成功为止。所以，当数据争⽤不严重时，乐观锁效果更好。⽐如CAS就是⼀种乐观锁思想的应⽤。</p><h3 id="Java中CAS实现"><a href="#Java中CAS实现" class="headerlink" title="Java中CAS实现"></a>Java中CAS实现</h3><p>CAS就是Compare and Swap的意思，⽐较并操作。很多的cpu直接⽀持CAS指令。CAS是项乐观锁技术，当多个线程尝试使⽤CAS同时更新同⼀个变量时，只有其中⼀个线程能更新变量的值，⽽其它线程都 失败，失败的线程并不会被挂起，⽽是被告知这次竞争中失败，并可以再次尝试。CAS有3个操作数，内存 值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么 都不做。<br>在 java.util.concurrent.atomic包下⾯的所有的原⼦变量类型中，⽐如AtomicInteger，都使⽤了这些底层的 JVM⽀持为数字类型的引⽤类型提供⼀种⾼效的CAS操作。<br>在CAS操作中，会出现ABA问题。就是如果V的值先由A变成B，再由B变成A，那么仍然认为是发⽣了变 化，并需要重新执⾏算法中的步骤。有简单的解决⽅案：不是更新某个引⽤的值，⽽是更新两个值，包括 ⼀个引⽤和⼀个版本号，即使这个值由A变为B，然后为变为A，版本号也是不同的。</p><h3 id="AtomicInteger的实现"><a href="#AtomicInteger的实现" class="headerlink" title="AtomicInteger的实现"></a>AtomicInteger的实现</h3><p>AtomicInteger 是⼀个⽀持原⼦操作的 Integer 类，就是保证对AtomicInteger类型变量的增加和减少操 作是原⼦性的，不会出现多个线程下的数据不⼀致问题。如果不使⽤ AtomicInteger，要实现⼀个按顺序 获取的 ID，就必须在每次获取时进⾏加锁操作，以避免出现并发时获取到同样的 ID 的现象。</p><h3 id="Java8基于CAS的ConcurrentHashMap"><a href="#Java8基于CAS的ConcurrentHashMap" class="headerlink" title="Java8基于CAS的ConcurrentHashMap"></a>Java8基于CAS的ConcurrentHashMap</h3><p>Java 8为进⼀步提高并发性，摒弃了分段锁的方案，而是直接使用一个大的数组。同时为了提高哈希碰撞下的寻址性能，Java 8在链表⻓度超过⼀定阈值（8）时将链表（寻址时间复杂度为O(N)）转换为红黑树（寻址时间复杂度为O(log(N))）。其数据结构如下图所示：<br><img src="/2021/11/06/java-base-2/java-6.png"><br><strong>寻址方式</strong><br>Java 8的ConcurrentHashMap同样是通过Key的哈希值与数组⻓度取模确定该Key在数组中的索引。同样为了避免不太好的Key的hashCode设计，它通过如下⽅法计算得到Key的最终哈希值。Java 8 的ConcurrentHashMap作者认为引⼊红⿊树后，即使哈希冲突⽐较严重，寻址效率也⾜够⾼，所以作者并未在哈希值的计算上做过多设计，只是将Key的hashCode值与其⾼16位作异或并保证最⾼位为0（从⽽保证最终结果为正整数）。</p><pre class="line-numbers language-none"><code class="language-none">static final int spread(int h) &#123; return (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;<br><strong>同步方式</strong><br>put操作：如果Key对应的数组元素为null，则通过CAS操作将其设置为当前值。如果Key对应的数组 元素（也即链表表头或者树的根元素）不为null，则对该元素使⽤synchronized关键字申请锁，然后进行操作。如果该put操作使得当前链表⻓度超过⼀定阈值，则将该链表转换为树，提高寻址效率。<br>&emsp;<br>读操作：由于数组被volatile关键字修饰，因此不⽤担⼼数组的可见性问题。同时每个元素是⼀个Node实例（Java 7中每个元素是⼀个HashEntry），它的Key值和hash值都由final修饰，不可变更，⽆须关⼼它们被修改后的可见性问题。⽽其Value及对下⼀个元素的引⽤由volatile修饰，可见性也有保障。<br>&emsp;<br>size操作：put⽅法和remove⽅法都会通过addCount⽅法维护Map的size。size⽅法通过sumCount获取由 addCount⽅法维护的Map的size。</p><h3 id="Java并发：CopyOnWriteArrayList实现原理"><a href="#Java并发：CopyOnWriteArrayList实现原理" class="headerlink" title="Java并发：CopyOnWriteArrayList实现原理"></a>Java并发：CopyOnWriteArrayList实现原理</h3><p>CopyOnWriteArrayList是Java并发包中提供的⼀个并发容器，它是个线程安全且读操作⽆锁的 ArrayList，写操作则通过创建底层数组的新副本来实现，是⼀种读写分离的并发策略。<br>实现原理：<br>ArrayList是⾮线程安全的，Vector虽是线程安全的，但由于简单粗暴的锁同步 机制，性能较差。⽽CopyOnWriteArrayList则提供了另⼀种不同的并发处理策略：<br>CopyOnWriteArrayList容器允许并发读，读操作 是⽆锁的，性能较⾼。⾄于写操作，⽐如向容器中添加⼀个元素，则⾸先将当前容器复制⼀份，然后在新 副本上执⾏写操作，结束之后再将原容器的引⽤指向新容器。<br><img src="/2021/11/06/java-base-2/java-7.png"><br>优点：读操作性能很⾼，因为⽆需任何同步措施，⽐较适⽤于读多写少的并发场景。<br>缺点：</p><ul><li>内存占⽤问题，毕竟每次执⾏写操作都要将原容器拷⻉⼀份，数据量⼤时，对内存压 ⼒较⼤，可能会引起频繁GC。</li><li>⽆法保证实时性，Vector对于读写操作均加锁同步，可以保证读和写的 强⼀致性。⽽CopyOnWriteArrayList由于其实现策略的原因，写和读分别作⽤在新⽼不同容器上，读的时候是老容器的数据。</li></ul><h3 id="CAS详解"><a href="#CAS详解" class="headerlink" title="CAS详解"></a>CAS详解</h3><p>在JDK 5之前Java是靠synchronized关键字保证同步的，这会导致有锁。</p><ul><li>锁机制的问题<ul><li>在多线程竞争下，加锁、释放锁会导致⽐较多的上下⽂切换和调度延时，引起性能问题。</li><li>⼀个线程持有锁会导致其它所有需要此锁的线程挂起。</li><li>如果⼀个优先级⾼的线程等待⼀个优先级低的线程释放锁会导致优先级倒置，引起性能⻛险。</li></ul></li></ul><p>volatile是不错的机制，但是volatile不能保证原⼦性。因此对于同步最终还是要回到锁机制上来。</p><h4 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS"></a>什么是CAS</h4><p>在Java发展初期，java语⾔是不能够利⽤硬件提供的这些便利来提升系统的性能的。⽽随着java不断的发 展,Java本地⽅法(JNI)的出现，使得java程序越过JVM直接调⽤本地⽅法提供了⼀种便捷的⽅式，因⽽java 在并发的⼿段上也多了起来。⽽在Doug Lea提供的cucurenct包中，CAS理论是它实现整个java包的基 ⽯。<br>CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。 如果内存位置的值与预期原 值相匹配，那么处理器会⾃动将该位置值更新为新值 。否则，处理器不做任何操作。⽆论哪种情况，它都 会在 CAS 指令之前返回该 位置的值。（在 CAS 的⼀些特殊情况下将仅返回 CAS 是否成功，⽽不提取当 前值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否 则，不要更改该位置，只告诉我这个位置现在的值即可。<br>通常将 CAS ⽤于同步的⽅式是从地址 V 读取值 A，执⾏多步计算来获得新 值 B，然后使⽤ CAS 将 V 的值从 A 改为 B。如果 V 处的值尚未同时更改，则 CAS 操作成功。<br>类似于 CAS 的指令允许算法执⾏读-修改-写操作，⽽⽆需害怕其他线程同时修改变量，因为如果其他线程修改变量，那么 CAS 会检测它（并失败），算法可以对该操作重新计算。</p><h4 id="CAS的⽬的"><a href="#CAS的⽬的" class="headerlink" title="CAS的⽬的"></a>CAS的⽬的</h4><p>利⽤CPU的CAS指令，同时借助JNI来完成Java的⾮阻塞算法。其它原⼦操作都是利⽤类似的特性完成的。</p><h4 id="CAS存在的问题"><a href="#CAS存在的问题" class="headerlink" title="CAS存在的问题"></a>CAS存在的问题</h4><ol><li>ABA问题：因为CAS需要在操作值的时候检查下值有没有发⽣变化，如果没有发⽣变化则更新，但是如 果⼀个值原来是A，变成了B，⼜变成了A，那么使⽤CAS进⾏检查时会发现它的值没有发⽣变化，但是实 际上却变化了。ABA问题的解决思路就是使⽤版本号。在变量前⾯追加上版本号，每次变量更新的时候把 版本号加⼀，那么A－B－A 就会变成1A-2B－3A。</li><li>循环时间⻓开销大：自旋CAS如果⻓时间不成功，会给CPU带来⾮常⼤的执⾏开销。如果JVM能⽀持处 理器提供的pause指令那么效率会有⼀定的提升，pause指令有两个作⽤，第⼀它可以延迟流⽔线执⾏指令 （de-pipeline）,使CPU不会消耗过多的执⾏资源，延迟的时间取决于具体实现的版本，在⼀些处理器上 延迟时间是零。第⼆它可以避免在退出循环的时候因内存顺序冲突（memory order violation）⽽引起 CPU流⽔线被清空（CPU pipeline flush），从⽽提⾼CPU的执⾏效率</li><li>只能保证⼀个共享变量的原⼦操作。当对⼀个共享变量执⾏操作时，我们可以使⽤循环CAS的⽅式来保 证原⼦操作，但是对多个共享变量操作时，循环CAS就⽆法保证操作的原⼦性，这个时候就可以⽤锁，或者有⼀个取巧的办法，就是把多个共享变量合并成⼀个共享变量来操作。⽐如有两个共享变量i＝2,j=a，合 并⼀下ij=2a，然后⽤CAS来操作ij。从Java1.5开始JDK提供了AtomicReference类来保证引⽤对象之间 的原⼦性，你可以把多个变量放在⼀个对象⾥来进⾏CAS操作。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-结构型模式</title>
      <link href="/2021/11/02/design-patterns-2/"/>
      <url>/2021/11/02/design-patterns-2/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><blockquote><p>适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。</p><ol><li>类的适配器模式<br><img src="/2021/11/02/design-patterns-2/1.png"><br>核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口是Targetable，通过Adapter类，将Source的功能扩展到Targetable里，看代码：<pre class="line-numbers language-none"><code class="language-none">public class Source &#123;      public void method1() &#123;         System.out.println(&quot;this is original method!&quot;);     &#125;  &#125;  public interface Targetable &#123;      &#x2F;* 与原类中的方法相同 *&#x2F;     public void method1();      &#x2F;* 新类的方法 *&#x2F;     public void method2();  &#125;  public class Adapter extends Source implements Targetable &#123;      @Override     public void method2() &#123;         System.out.println(&quot;this is the targetable method!&quot;);     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>Adapter类继承Source类，实现Targetable接口，下面是测试类：<pre class="line-numbers language-none"><code class="language-none">public class AdapterTest &#123;      public static void main(String[] args) &#123;         Targetable target &#x3D; new Adapter();         target.method1();         target.method2();     &#125;  &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这样Targetable接口的实现类就具有了Source类的功能。<br>&emsp;</li><li>对象的适配器模式<br><img src="/2021/11/02/design-patterns-2/2.jpg"><br>基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。修改Adapter类：<pre class="line-numbers language-none"><code class="language-none">public class Wrapper implements Targetable &#123;      private Source source;          public Wrapper(Source source)&#123;         super();         this.source &#x3D; source;     &#125;     @Override     public void method2() &#123;         System.out.println(&quot;this is the targetable method!&quot;);     &#125;      @Override     public void method1() &#123;         source.method1();     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>测试：<pre class="line-numbers language-none"><code class="language-none">public class AdapterTest &#123;      public static void main(String[] args) &#123;         Source source &#x3D; new Source();         Targetable target &#x3D; new Wrapper(source);         target.method1();         target.method2();     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&emsp;</li><li>接口的适配器模式<br><img src="/2021/11/02/design-patterns-2/3.jpg"><br>有时接口中有多个抽象方法，实现时必须实现所有方法，但并不是所有的方法都是我们需要的，为了解决这个问题，引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，然后我们只和该抽象类取得联系，写一个类，继承该抽象类，重写我们需要的方法就行：<pre class="line-numbers language-none"><code class="language-none">&#x2F;* 接口 *&#x2F;public interface Sourceable &#123;          public void method1();     public void method2();  &#125;  &#x2F;* 借助抽象类 *&#x2F;public abstract class Wrapper2 implements Sourceable&#123;          public void method1()&#123;&#125;     public void method2()&#123;&#125;  &#125;  &#x2F;* 与抽象类打交道 *&#x2F;public class SourceSub1 extends Wrapper2 &#123;     public void method1()&#123;         System.out.println(&quot;the sourceable interface&#39;s first Sub1!&quot;);     &#125;  &#125;  &#x2F;* 与抽象类打交道 *&#x2F;public class SourceSub2 extends Wrapper2 &#123;     public void method2()&#123;         System.out.println(&quot;the sourceable interface&#39;s second Sub2!&quot;);     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>测试：<pre class="line-numbers language-none"><code class="language-none">public class WrapperTest &#123;      public static void main(String[] args) &#123;         Sourceable source1 &#x3D; new SourceSub1();         Sourceable source2 &#x3D; new SourceSub2();                  source1.method1();         source1.method2();         source2.method1();         source2.method2();     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>总结一下三种适配器模式的应用场景：</li></ol><ul><li>类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。</li><li>对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。</li><li>接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。</li></ul></blockquote><h3 id="装饰模式-Decorator"><a href="#装饰模式-Decorator" class="headerlink" title="装饰模式 Decorator"></a>装饰模式 Decorator</h3><blockquote><p>装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例。<br><img src="/2021/11/02/design-patterns-2/4.jpg"><br>示例:Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能:</p><pre class="line-numbers language-none"><code class="language-none">public interface Sourceable &#123;     public void method();  &#125;  public class Source implements Sourceable &#123;      @Override     public void method() &#123;         System.out.println(&quot;the original method!&quot;);     &#125;  &#125;  public class Decorator implements Sourceable &#123;      private Sourceable source;          public Decorator(Sourceable source)&#123;         super();         this.source &#x3D; source;     &#125;     @Override     public void method() &#123;         System.out.println(&quot;before decorator!&quot;);         source.method();         System.out.println(&quot;after decorator!&quot;);     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">public class DecoratorTest &#123;      public static void main(String[] args) &#123;         Sourceable source &#x3D; new Source();         Sourceable obj &#x3D; new Decorator(source);         obj.method();     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>装饰器模式的应用场景：</p><ul><li>需要扩展一个类的功能。</li><li>动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）<br>缺点：产生过多相似的对象，不易排错！</li></ul></blockquote><h3 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式 Proxy"></a>代理模式 Proxy</h3><blockquote><p>代理模式就是多一个代理类出来，替原对象进行一些操作，比如中介。<br><img src="/2021/11/02/design-patterns-2/5.jpg"></p><pre class="line-numbers language-none"><code class="language-none">public interface Sourceable &#123;     public void method();  &#125;  public class Source implements Sourceable &#123;      @Override     public void method() &#123;         System.out.println(&quot;the original method!&quot;);     &#125;  &#125;  public class Proxy implements Sourceable &#123;      private Source source;     public Proxy()&#123;         super();         this.source &#x3D; new Source();     &#125;     @Override     public void method() &#123;         before();         source.method();         atfer();     &#125;     private void atfer() &#123;         System.out.println(&quot;after proxy!&quot;);     &#125;     private void before() &#123;         System.out.println(&quot;before proxy!&quot;);     &#125;  &#125;  public class ProxyTest &#123;      public static void main(String[] args) &#123;         Sourceable source &#x3D; new Proxy();         source.method();     &#125;   &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代理模式的应用场景：<br>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：</p><ol><li>修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。</li><li>就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！<br>装饰器模式和代理模式区别：<br>装饰器模式关注于在一个对象上动态的添加方法，而代理模式关注于控制对对象的访问。用代理模式，代理类可以对它的客户隐藏一个对象的具体信息。因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。当我们使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。<br>使用代理模式，代理和真实对象之间的的关系通常在编译时就已经确定了，而装饰者能够在运行时递归地被构造。<pre class="line-numbers language-none"><code class="language-none">&#x2F;* 代理模式 *&#x2F;Sourceable source &#x3D; new Proxy(); &#x2F;* （构造函数）关系在编译时确定 *&#x2F;this.source &#x3D; new Source();  &#x2F;* 装饰器模式 客户不知道代理委托了另一个对象 *&#x2F;Sourceable source &#x3D; new Source();  Sourceable obj &#x3D; new Decorator(source); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h3 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式 Facade"></a>外观模式 Facade</h3><blockquote><p>外观模式是为了解决类与类之间的依赖关系，将类与类的关系放在一个Facade类中，降低了类与类之间的耦合度：<br><img src="/2021/11/02/design-patterns-2/6.jpg"><br>以一个计算机的启动过程为例:</p><pre class="line-numbers language-none"><code class="language-none">public class CPU &#123;          public void startup()&#123;         System.out.println(&quot;cpu startup!&quot;);     &#125;          public void shutdown()&#123;         System.out.println(&quot;cpu shutdown!&quot;);     &#125;  &#125;  public class Memory &#123;          public void startup()&#123;         System.out.println(&quot;memory startup!&quot;);     &#125;          public void shutdown()&#123;         System.out.println(&quot;memory shutdown!&quot;);     &#125;  &#125;  public class Disk &#123;          public void startup()&#123;         System.out.println(&quot;disk startup!&quot;);     &#125;          public void shutdown()&#123;         System.out.println(&quot;disk shutdown!&quot;);     &#125;  &#125;  public class Computer &#123;     private CPU cpu;     private Memory memory;     private Disk disk;          public Computer()&#123;         cpu &#x3D; new CPU();         memory &#x3D; new Memory();         disk &#x3D; new Disk();     &#125;          public void startup()&#123;         System.out.println(&quot;start the computer!&quot;);         cpu.startup();         memory.startup();         disk.startup();         System.out.println(&quot;start computer finished!&quot;);     &#125;          public void shutdown()&#123;         System.out.println(&quot;begin to close the computer!&quot;);         cpu.shutdown();         memory.shutdown();         disk.shutdown();         System.out.println(&quot;computer closed!&quot;);     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) &#123;         Computer computer &#x3D; new Computer();         computer.startup();         computer.shutdown();     &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观模式！</p></blockquote><h3 id="桥接模式-Bridge"><a href="#桥接模式-Bridge" class="headerlink" title="桥接模式 Bridge"></a>桥接模式 Bridge</h3><blockquote><p>桥接模式是将抽象部分与它的实现部分分离，使它们都可以独立地变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，像JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了：<br><img src="/2021/11/02/design-patterns-2/7.jpg"><br>代码示例：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 定义接口 *&#x2F;public interface Sourceable &#123;     public void method();  &#125;  &#x2F;* 两个实现类 *&#x2F;public class SourceSub1 implements Sourceable &#123;      @Override     public void method() &#123;         System.out.println(&quot;this is the first sub!&quot;);     &#125;  &#125;  public class SourceSub2 implements Sourceable &#123;      @Override     public void method() &#123;         System.out.println(&quot;this is the second sub!&quot;);     &#125;  &#125;  &#x2F;* 定义桥 *&#x2F;public abstract class Bridge &#123;     private Sourceable source;      public void method()&#123;         source.method();     &#125;          public Sourceable getSource() &#123;         return source;     &#125;      public void setSource(Sourceable source) &#123;         this.source &#x3D; source;     &#125;  &#125;  public class MyBridge extends Bridge &#123;     public void method()&#123;         getSource().method();     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) &#123;                  Bridge bridge &#x3D; new MyBridge();                  &#x2F;*调用第一个对象*&#x2F;         Sourceable source1 &#x3D; new SourceSub1();         bridge.setSource(source1);         bridge.method();                  &#x2F;*调用第二个对象*&#x2F;         Sourceable source2 &#x3D; new SourceSub2();         bridge.setSource(source2);         bridge.method();  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。<br>JDBC原理：<br><img src="/2021/11/02/design-patterns-2/8.jpg"><br>优点：</p><ol><li>抽象和实现的分离。 </li><li>优秀的扩展能力。 </li><li>实现细节对客户透明。<br>缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li></ol></blockquote><h3 id="组合模式-Composite"><a href="#组合模式-Composite" class="headerlink" title="组合模式 Composite"></a>组合模式 Composite</h3><blockquote><p>组合模式有时又叫部分-整体模式在处理类似树形结构的问题时比较方便，关系图：<br><img src="/2021/11/02/design-patterns-2/9.jpg"><br>代码示例：</p><pre class="line-numbers language-none"><code class="language-none">public class TreeNode &#123;          private String name;     private TreeNode parent;     private Vector&lt;TreeNode&gt; children &#x3D; new Vector&lt;TreeNode&gt;();          public TreeNode(String name)&#123;         this.name &#x3D; name;     &#125;      public String getName() &#123;         return name;     &#125;      public void setName(String name) &#123;         this.name &#x3D; name;     &#125;      public TreeNode getParent() &#123;         return parent;     &#125;      public void setParent(TreeNode parent) &#123;         this.parent &#x3D; parent;     &#125;          &#x2F;&#x2F;添加孩子节点     public void add(TreeNode node)&#123;         children.add(node);     &#125;          &#x2F;&#x2F;删除孩子节点     public void remove(TreeNode node)&#123;         children.remove(node);     &#125;          &#x2F;&#x2F;取得孩子节点     public Enumeration&lt;TreeNode&gt; getChildren()&#123;         return children.elements();     &#125;  &#125;  public class Tree &#123;      TreeNode root &#x3D; null;      public Tree(String name) &#123;         root &#x3D; new TreeNode(name);     &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) &#123;         Tree tree &#x3D; new Tree(&quot;A&quot;);         TreeNode nodeB &#x3D; new TreeNode(&quot;B&quot;);         TreeNode nodeC &#x3D; new TreeNode(&quot;C&quot;);                  nodeB.add(nodeC);         tree.root.add(nodeB);         System.out.println(&quot;build the tree finished!&quot;);     &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用场景：将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。</p></blockquote><h3 id="享元模式-Flyweight"><a href="#享元模式-Flyweight" class="headerlink" title="享元模式 Flyweight"></a>享元模式 Flyweight</h3><blockquote><p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。<br><img src="/2021/11/02/design-patterns-2/10.jpg"><br>FlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象。<br>一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。<br>代码示例：</p><pre class="line-numbers language-none"><code class="language-none">public class ConnectionPool &#123;          private Vector&lt;Connection&gt; pool;          &#x2F;*公有属性*&#x2F;     private String url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;;     private String username &#x3D; &quot;root&quot;;     private String password &#x3D; &quot;root&quot;;     private String driverClassName &#x3D; &quot;com.mysql.jdbc.Driver&quot;;      private int poolSize &#x3D; 100;     private static ConnectionPool instance &#x3D; null;     Connection conn &#x3D; null;      &#x2F;*构造方法，做一些初始化工作*&#x2F;     private ConnectionPool() &#123;         pool &#x3D; new Vector&lt;Connection&gt;(poolSize);          for (int i &#x3D; 0; i &lt; poolSize; i++) &#123;             try &#123;                 Class.forName(driverClassName);                 conn &#x3D; DriverManager.getConnection(url, username, password);                 pool.add(conn);             &#125; catch (ClassNotFoundException e) &#123;                 e.printStackTrace();             &#125; catch (SQLException e) &#123;                 e.printStackTrace();             &#125;         &#125;     &#125;      &#x2F;* 返回连接到连接池 *&#x2F;     public synchronized void release() &#123;         pool.add(conn);     &#125;      &#x2F;* 返回连接池中的一个数据库连接 *&#x2F;     public synchronized Connection getConnection() &#123;         if (pool.size() &gt; 0) &#123;             Connection conn &#x3D; pool.get(0);             pool.remove(conn);             return conn;         &#125; else &#123;             return null;         &#125;     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过连接池的管理，实现了数据库连接的共享，不需要每一次都重新创建连接，节省了数据库重新创建的开销，提升了系统的性能！<br>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。<br>主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。<br>应用实例：</p><ol><li>JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。</li><li>数据库的数据池。</li></ol><p>&emsp;<br>参考：<a href="http://blog.csdn.net/zhangerqing">http://blog.csdn.net/zhangerqing</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-创建型模式</title>
      <link href="/2021/11/01/design-patterns-1/"/>
      <url>/2021/11/01/design-patterns-1/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式定义"><a href="#设计模式定义" class="headerlink" title="设计模式定义"></a>设计模式定义</h2><blockquote><p>在软件工程领域，设计模式是一套通用的可复用的解决方案，用来解决在软件设计过程中产生的通用问题。它不是一个可以直接转换成源代码的设计，只是一套在软件系统设计过程中程序员应该遵循的最佳实践准则。</p></blockquote><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><blockquote><p>创建型模式：共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式<br>结构型模式：共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式<br>行为型模式：共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p></blockquote><h2 id="设计模式六大原则"><a href="#设计模式六大原则" class="headerlink" title="设计模式六大原则"></a>设计模式六大原则</h2><blockquote><ul><li>总原则：开闭原则，对扩展开放，对修改关闭。</li><li>单一原则：每个类应该实现单一的职责，如若不然，就应该把类拆分。</li><li>里氏替换原则(LSP)：子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</li><li>依赖倒转原则：这个是开闭原则的基础，具体来说就是面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</li><li>接口隔离原则：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口要比使用单个接口要好。</li><li>迪米特法则(Demeter)：一个类对自己依赖的类知道的越少越好。无论被依赖的类多么复杂，都应该将逻辑封装在方法内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</li><li>合成复用原则：尽量使用对象组合，而不是通过继承来达到复用的目的。就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分。新对象通过向这些对象的委派达到复用已有功能的目的。这样耦合度更低。不会破坏封装性，即黑盒复用，继承的话是白盒复用。父类会将实现细节暴露给子类。</li></ul></blockquote><h2 id="设计模式-1"><a href="#设计模式-1" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="创建模式"><a href="#创建模式" class="headerlink" title="创建模式"></a>创建模式</h3><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><blockquote><p>首先，简单工厂模式不属于23种设计模式，简单工厂一般分为：普通简单工厂、多方法简单工厂、静态方法简单工厂。</p><ol><li>普通简单工厂(举例:发送邮件和短信的例子):<br>创建二者的共同接口：<pre class="line-numbers language-none"><code class="language-none">public interface Sender &#123;public void Send();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>创建实现类：<pre class="line-numbers language-none"><code class="language-none">public class MailSender implements Sender &#123;@Overridepublic void Send() &#123;System.out.println(&quot;this is mailsender!&quot;);&#125;&#125;public class SmsSender implements Sender &#123;@Overridepublic void Send() &#123;System.out.println(&quot;this is sms sender!&quot;);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>创建工厂类：<pre class="line-numbers language-none"><code class="language-none">public class SendFactory &#123;public Sender produce(String type) &#123;if (&quot;mail&quot;.equals(type)) &#123;return new MailSender();&#125; else if (&quot;sms&quot;.equals(type)) &#123;return new SmsSender();&#125; else &#123;System.out.println(&quot;请输入正确的类型!&quot;);return null;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>测试：<pre class="line-numbers language-none"><code class="language-none">public class FactoryTest &#123;public static void main(String[] args) &#123;SendFactory factory &#x3D; new SendFactory();Sender sender &#x3D; factory.produce(&quot;sms&quot;);sender.Send();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>输出：this is sms sender!</li><li>多方法简单工厂:是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。<br>对SendFactory进行修改：<pre class="line-numbers language-none"><code class="language-none">public class SendFactory &#123;public Sender produceMail()&#123;return new MailSender();&#125;public Sender produceSms()&#123;return new SmsSender();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>测试：<pre class="line-numbers language-none"><code class="language-none">public class FactoryTest &#123;public static void main(String[] args) &#123;SendFactory factory &#x3D; new SendFactory();Sender sender &#x3D; factory.produceMail();sender.Send();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>输出：this is mailsender!</li><li>静态方法简单工厂,将上面的多方法简单工厂里的方法置为静态的，可直接调用。<pre class="line-numbers language-none"><code class="language-none">public class SendFactory &#123;public static Sender produceMail()&#123;return new MailSender();&#125;public static Sender produceSms()&#123;return new SmsSender();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>测试：<pre class="line-numbers language-none"><code class="language-none">public class FactoryTest &#123;public static void main(String[] args) &#123;Sender sender &#x3D; SendFactory.produceMail();sender.Send();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>输出：this is mailsender!<br>总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。</li></ol></blockquote><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><blockquote><p>简单工厂模式类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则。需要使用工厂方法模式，创建一个工厂接口和创建多个工厂实现类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。<br>举例(共同接口)：</p><pre class="line-numbers language-none"><code class="language-none">public interface Sender &#123;     public void Send();  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实现类:</p><pre class="line-numbers language-none"><code class="language-none">public class MailSender implements Sender &#123;     @Override     public void Send() &#123;         System.out.println(&quot;this is mailsender!&quot;);     &#125;  &#125;  public class SmsSender implements Sender &#123;      @Override     public void Send() &#123;         System.out.println(&quot;this is sms sender!&quot;);     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工厂类：</p><pre class="line-numbers language-none"><code class="language-none">public class SendMailFactory implements Provider &#123;          @Override     public Sender produce()&#123;         return new MailSender();     &#125;  &#125;  public class SendSmsFactory implements Provider&#123;      @Override     public Sender produce() &#123;         return new SmsSender();     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供接口：</p><pre class="line-numbers language-none"><code class="language-none">public interface Provider &#123;     public Sender produce();  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>测试类:</p><pre class="line-numbers language-none"><code class="language-none">public class Test &#123;      public static void main(String[] args) &#123;         Provider provider &#x3D; new SendMailFactory();         Sender sender &#x3D; provider.produce();         sender.Send();     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样工厂方法模式如果想要添加一个功能，只需要做一个实现类(实现Sender),同时做一个工厂类，实现Provider接口，就OK。无需更改现成代码。扩展性较好。</p></blockquote><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><blockquote><p>抽象工厂模式和工厂方法模式很相似，区别如下：</p><ul><li>工厂方法模式：<ul><li>一个抽象产品类，可以派生出多个具体产品类。   </li><li>一个抽象工厂类，可以派生出多个具体工厂类。   </li><li>每个具体工厂类只能创建一个具体产品类的实例。</li></ul></li><li>抽象工厂模式：<ul><li>多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。   </li><li>一个抽象工厂类，可以派生出多个具体工厂类。   </li><li>每个具体工厂类可以创建多个具体产品类的实例，也就是创建的是一个产品线下的多个产品。</li></ul></li><li>工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。</li><li>工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。</li><li>工厂方法创建 “一种” 产品，他的着重点在于”怎么创建”。抽象工厂需要创建一系列产品，着重点在于”创建哪些”产品上。</li></ul></blockquote><h4 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 Singleton"></a>单例模式 Singleton</h4><blockquote><p>单例对象是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：</p><ol><li>某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</li><li>省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</li><li>有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。<br>简单单例类举例：<pre class="line-numbers language-none"><code class="language-none">public class Singleton &#123;      &#x2F;* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 *&#x2F;     private static Singleton instance &#x3D; null;      &#x2F;* 私有构造方法，防止被实例化 *&#x2F;     private Singleton() &#123;     &#125;      &#x2F;* 静态工程方法，创建实例 *&#x2F;     public static Singleton getInstance() &#123;         if (instance &#x3D;&#x3D; null) &#123;             instance &#x3D; new Singleton();         &#125;         return instance;     &#125;      &#x2F;* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 *&#x2F;     public Object readResolve() &#123;         return instance;     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这个类可以满足基本要求，但是没有线程安全保护，放入多线程的环境下肯定会出现问题，如何解决？我们首先会想到对getInstance方法加synchronized关键字，如下：<pre class="line-numbers language-none"><code class="language-none">public static synchronized Singleton getInstance() &#123;         if (instance &#x3D;&#x3D; null) &#123;             instance &#x3D; new Singleton();         &#125;         return instance;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>由于JVM内部的优化机制，JVM先划出了一些分配给Singleton实例的空白内存，并赋值给instance成员（此时JVM没有开始初始化这个实例），然后A离开了synchronized块。这种情况还是可能存在问题。<br>进一步优化：<pre class="line-numbers language-none"><code class="language-none">public class Singleton &#123;        &#x2F;* 私有构造方法，防止被实例化 *&#x2F;      private Singleton() &#123;      &#125;        &#x2F;* 此处使用一个内部类来维护单例 *&#x2F;      private static class SingletonFactory &#123;          private static Singleton instance &#x3D; new Singleton();      &#125;        &#x2F;* 获取实例 *&#x2F;      public static Singleton getInstance() &#123;          return SingletonFactory.instance;      &#125;        &#x2F;* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 *&#x2F;      public Object readResolve() &#123;          return getInstance();      &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式。<br>说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。<br>也有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字，也是可以的：<pre class="line-numbers language-none"><code class="language-none">public class SingletonTest &#123;      private static SingletonTest instance &#x3D; null;      private SingletonTest() &#123;     &#125;      private static synchronized void syncInit() &#123;         if (instance &#x3D;&#x3D; null) &#123;             instance &#x3D; new SingletonTest();         &#125;     &#125;      public static SingletonTest getInstance() &#123;         if (instance &#x3D;&#x3D; null) &#123;             syncInit();         &#125;         return instance;     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。<br>饿汉式实现：<pre class="line-numbers language-none"><code class="language-none">public class Hungry &#123;   &#x2F;**    * 可能会浪费空间    *&#x2F;   private byte[] data1 &#x3D; new byte[1024*1024];   private byte[] data2 &#x3D; new byte[1024*1024];   private byte[] data3 &#x3D; new byte[1024*1024];   private byte[] data4 &#x3D; new byte[1024*1024];   private Hungry()&#123;   &#125;   private final static Hungry HUNGRY &#x3D; new Hungry();   public static Hungry getInstance()&#123;       return HUNGRY;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>懒汉式实现：<pre class="line-numbers language-none"><code class="language-none">import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;public class LazyMan &#123;   private static boolean qinjiang &#x3D; false;   private LazyMan() &#123;       synchronized (LazyMan.class) &#123;           if (qinjiang &#x3D;&#x3D; false) &#123;               qinjiang &#x3D; true;           &#125; else &#123;               throw new RuntimeException(&quot;不要试图使用反射破坏异常&quot;);           &#125;       &#125;   &#125;   private volatile static LazyMan lazyMan;   &#x2F;**    * 双重检测锁模式的懒汉式单例，简称为DCL懒汉式    *    * @return    *&#x2F;   public static LazyMan getInstance() &#123;       if (lazyMan &#x3D;&#x3D; null) &#123;           synchronized (LazyMan.class) &#123;               if (lazyMan &#x3D;&#x3D; null) &#123;                   &#x2F;&#x2F;不是一个原子性操作                   lazyMan &#x3D; new LazyMan();                   &#x2F;**                    * 1. 分配内存空间                    * 2. 执行构造方法，初始化对象                    * 3. 把这个对象指向这个空间                    *&#x2F;               &#125;           &#125;       &#125;       return lazyMan;   &#125;&#x2F;&#x2F;    &#x2F;**&#x2F;&#x2F;     * 多线程并发&#x2F;&#x2F;     *&#x2F;&#x2F;&#x2F;    public static void main(String[] args) &#123;&#x2F;&#x2F;        for (int i &#x3D; 0; i &lt; 10; i++) &#123;&#x2F;&#x2F;            new Thread(()-&gt;&#123;&#x2F;&#x2F;                LazyMan.getInstance();&#x2F;&#x2F;            &#125;).start();&#x2F;&#x2F;        &#125;&#x2F;&#x2F;    &#125;   &#x2F;**    * 反射    *&#x2F;   public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;       &#x2F;&#x2F;LazyMan instance &#x3D; LazyMan.getInstance();       Constructor&lt;LazyMan&gt; declaredConstructor &#x3D; LazyMan.class.getDeclaredConstructor(null);       declaredConstructor.setAccessible(true);       LazyMan instance &#x3D; declaredConstructor.newInstance();       LazyMan instance2 &#x3D; declaredConstructor.newInstance();       System.out.println(instance);       System.out.println(instance2);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>在普通的懒汉式单例模式中，线程是不安全的，所以我们需要使用双重检测锁模式的懒汉式单例来解决问题，由于实例不能保持原子性，所以会导致指令重排的现象，于是我们会添加volatile关键字来保证原子性，这样既保证原子性又不会造成线程不安全的现象。<br>枚举式单例模式：<pre class="line-numbers language-none"><code class="language-none">import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;&#x2F;*** enum 是一个什么？ 本身也是一个Class类*&#x2F;public enum  EnumSingle &#123;   &#x2F;**    *    *&#x2F;   INSTANCE;   public EnumSingle getInstance()&#123;       return INSTANCE;   &#125;&#125;class Test&#123;   public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;       EnumSingle instance1 &#x3D; EnumSingle.INSTANCE;       Constructor&lt;EnumSingle&gt; declaredConstructor &#x3D; EnumSingle.class.getDeclaredConstructor(String.class,int.class);       declaredConstructor.setAccessible(true);       EnumSingle instance2 &#x3D; declaredConstructor.newInstance();       &#x2F;&#x2F;java.lang.NoSuchMethodException: com.czu.single.EnumSingle.&lt;init&gt;()       System.out.println(instance1);       System.out.println(instance2);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。<br>单例模式理解起来简单，但是具体实现起来还是有一定的难度。<br>synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。</li></ol></blockquote><h4 id="构建者模式-Builder"><a href="#构建者模式-Builder" class="headerlink" title="构建者模式 Builder"></a>构建者模式 Builder</h4><blockquote><p>定义：将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示。构建者模式隐藏了复杂对象的创建过程，它把复杂对象的创建过程加以抽象，通过子类继承或者重载的方式，动态的创建具有复合属性的对象。<br>适用场景：当一个类的构造函数参数个数超过4个，而且这些参数有些是可选的参数，考虑使用构造者模式。<br>当一个类的构造函数参数超过4个，而且这些参数有些是可选的时，我们通常有两种办法来构建它的对象。 例如我们现在有如下一个类计算机类Computer，其中cpu与ram是必填参数，而其他3个是可选参数，那么我们如何构造这个类的实例呢,通常有两种常用的方式：</p><pre class="line-numbers language-none"><code class="language-none">public class Computer &#123;   private String cpu;&#x2F;&#x2F;必须   private String ram;&#x2F;&#x2F;必须   private int usbCount;&#x2F;&#x2F;可选   private String keyboard;&#x2F;&#x2F;可选   private String display;&#x2F;&#x2F;可选&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一：折叠构造函数模式:</p><pre class="line-numbers language-none"><code class="language-none">public class Computer &#123;    ...   public Computer(String cpu, String ram) &#123;       this(cpu, ram, 0);   &#125;   public Computer(String cpu, String ram, int usbCount) &#123;       this(cpu, ram, usbCount, &quot;罗技键盘&quot;);   &#125;   public Computer(String cpu, String ram, int usbCount, String keyboard) &#123;       this(cpu, ram, usbCount, keyboard, &quot;三星显示器&quot;);   &#125;   public Computer(String cpu, String ram, int usbCount, String keyboard, String display) &#123;       this.cpu &#x3D; cpu;       this.ram &#x3D; ram;       this.usbCount &#x3D; usbCount;       this.keyboard &#x3D; keyboard;       this.display &#x3D; display;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种：Javabean 模式:</p><pre class="line-numbers language-none"><code class="language-none">public class Computer &#123;       ...   public String getCpu() &#123;       return cpu;   &#125;   public void setCpu(String cpu) &#123;       this.cpu &#x3D; cpu;   &#125;   public String getRam() &#123;       return ram;   &#125;   public void setRam(String ram) &#123;       this.ram &#x3D; ram;   &#125;   public int getUsbCount() &#123;       return usbCount;   &#125;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两种方式弊端：<br>第一种使用及阅读不方便，当你要调用一个类的构造函数时，你首先要决定使用哪一个，然后里面又是一堆参数，如果这些参数的类型很多又都一样，你还要搞清楚这些参数的含义，很容易就传混了。<br>第二种方式在构建过程中对象的状态容易发生变化，造成错误。因为那个类中的属性是分步设置的，所以就容易出错。<br>builder模式实现：</p><ol><li>在Computer 中创建一个静态内部类 Builder，然后将Computer 中的参数都复制到Builder类中。</li><li>在Computer中创建一个private的构造函数，参数为Builder类型</li><li>在Builder中创建一个public的构造函数，参数为Computer中必填的那些参数，cpu 和ram。</li><li>在Builder中创建设置函数，对Computer中那些可选参数进行赋值，返回值为Builder类型的实例</li><li>在Builder中创建一个build()方法，在其中构建Computer的实例并返回<pre class="line-numbers language-none"><code class="language-none">public class Computer &#123;   private final String cpu;&#x2F;&#x2F;必须   private final String ram;&#x2F;&#x2F;必须   private final int usbCount;&#x2F;&#x2F;可选   private final String keyboard;&#x2F;&#x2F;可选   private final String display;&#x2F;&#x2F;可选   private Computer(Builder builder)&#123;       this.cpu&#x3D;builder.cpu;       this.ram&#x3D;builder.ram;       this.usbCount&#x3D;builder.usbCount;       this.keyboard&#x3D;builder.keyboard;       this.display&#x3D;builder.display;   &#125;   public static class Builder&#123;       private String cpu;&#x2F;&#x2F;必须       private String ram;&#x2F;&#x2F;必须       private int usbCount;&#x2F;&#x2F;可选       private String keyboard;&#x2F;&#x2F;可选       private String display;&#x2F;&#x2F;可选       public Builder(String cup,String ram)&#123;           this.cpu&#x3D;cup;           this.ram&#x3D;ram;       &#125;       public Builder setUsbCount(int usbCount) &#123;           this.usbCount &#x3D; usbCount;           return this;       &#125;       public Builder setKeyboard(String keyboard) &#123;           this.keyboard &#x3D; keyboard;           return this;       &#125;       public Builder setDisplay(String display) &#123;           this.display &#x3D; display;           return this;       &#125;               public Computer build()&#123;           return new Computer(this);       &#125;   &#125; &#x2F;&#x2F;省略getter方法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>使用：链式调用，一步一步的把对象构建出来：<pre class="line-numbers language-none"><code class="language-none">Computer computer&#x3D;new Computer.Builder(&quot;因特尔&quot;,&quot;三星&quot;)               .setDisplay(&quot;三星24寸&quot;)               .setKeyboard(&quot;罗技&quot;)               .setUsbCount(2)               .build();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h4 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 Prototype"></a>原型模式 Prototype</h4><blockquote><p>原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：</p><pre class="line-numbers language-none"><code class="language-none">public class Prototype implements Cloneable &#123;      public Object clone() throws CloneNotSupportedException &#123;         Prototype proto &#x3D; (Prototype) super.clone();         return proto;     &#125;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原型模式优势和适用场景：<br>使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。<br>简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。<br>在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。<br>注意：</p><ul><li>使用原型模式复制对象不会调用类的构造方法。因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据，因此不会调用到类的构造方法。不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。还记得单例模式吗？单例模式中，只要将构造方法的访问权限设置为private型，就可以实现单例。但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，在使用时要特别注意。</li><li>深拷贝与浅拷贝。Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝。例如：<pre class="line-numbers language-none"><code class="language-none">public class Prototype implements Cloneable &#123;private ArrayList list &#x3D; new ArrayList();public Prototype clone()&#123;Prototype prototype &#x3D; null;try&#123;prototype &#x3D; (Prototype)super.clone();prototype.list &#x3D; (ArrayList) this.list.clone();&#125;catch(CloneNotSupportedException e)&#123;e.printStackTrace();&#125;return prototype; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>ArrayList不是基本类型，所以成员变量list，不会被拷贝，需要我们自己实现深拷贝。<br>PS：深拷贝与浅拷贝问题中，会发生深拷贝的有java中的8中基本类型以及他们的封装类型，另外还有String类型。其余的都是浅拷贝。<br>&emsp;<br>参考：<a href="https://blog.csdn.net/zhengzhb/article/details/7393528">https://blog.csdn.net/zhengzhb/article/details/7393528</a><br>参考：<a href="https://blog.csdn.net/zhangerqing/article/details/8194653">https://blog.csdn.net/zhangerqing/article/details/8194653</a><br>参考：<a href="https://blog.csdn.net/hzyzzz/article/details/107496152">https://blog.csdn.net/hzyzzz/article/details/107496152</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL-2</title>
      <link href="/2021/10/31/sql-2/"/>
      <url>/2021/10/31/sql-2/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><h2 id="并发事务与锁机制"><a href="#并发事务与锁机制" class="headerlink" title="并发事务与锁机制"></a>并发事务与锁机制</h2><blockquote><p>一个事务往往是需要多条语句共同组成，来完成较为复杂的数据操作。<br>在MySQL数据库中，事务是进行数据管理的基本操作单元，锁机制是用于实现并发控制的主要方法。<br>事务本身必须具有以下4个特性。</p><ol><li>原子性：每个事务都必须被看作一个不可分割的单元。假设一个事务由两个或多个任务组成，其中的语句必须同时成功才能认为整个事务是成功的。</li><li>一致性：事务执行完成后，都将数据库从一个一致状态转变到另一个状态，不能违背数据库的任何完整性检查。</li><li>隔离性：每个事务在自己的会话空间发生，和其他发生在系统中的事务隔离。事务的结果只有在完全执行后才能看到。</li><li>持久性：事务一旦提交，对数据库的修改将是持久的。</li></ol></blockquote><h2 id="事务分类"><a href="#事务分类" class="headerlink" title="事务分类"></a>事务分类</h2><blockquote><ol><li>自动提交事务：默认情况下，MySQL采用autocommit模式运行。当执行一个用于修改表数据语句后，MySQL会将结果存储到磁盘中。如果没有定义事务，MySQL会自己定义事务。每个语句在完成时，都被提交或回滚。如果一个语句成功地完成，则提交该语句。如果遇到错误，则回滚。</li><li>用户定义事务：显式事务是指显式定义了启动和结束的事务。</li><li>分布式事务：一个比较复杂的环境，可能有多台服务器，要保证在多服务器环境中事务的完整性和一致性，就需要分布式事务。在分布式事务中，所有的操作都可以设计对多个服务器的操作，当这些操作都成功时，这些操作都会提交到相应的服务器的数据库中，如果存在一条失败，那么全部取消。</li></ol></blockquote><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><blockquote><p>MySQL中，当会话开始时，自动提交功能是打开的，@@autocommit=1，用户执行SQL语句后，就会被立即提交。<br>关闭自动提交：<br>set @@autocommit=0;</p><ol><li>启动事务：<br>第一条SQL语句或者在commit或rollback语句后的第一条SQL执行后，新的事务就开始了。也可以显示地启动一个事务。<br>start transaction | begin work</li><li>结束事务：<br>commit提交语句，使事务开始后所执行的所有数据修改成为数据库的永久部分，也标志一个事务的结束。<br>注意：MySQL是平面事务模型，所有嵌套的事务不允许。在第一个事务使用start transaction后，第二个事务开始时，自动提交第一个事务。</li><li>回滚事务<br>rollback回滚语句，回滚事务所做的修改，并结束当前事务。<br>rollback work;</li><li>设置事务检查点<br>rollback to语句使事务回滚到某个点，实现事务部分回滚。需要使用savepoint来设置一个保存点。<br>savepoint identifier<br>identifier为保存点的名称<br>rollback to savepoint会向保存点回滚一个事务。<br>rollback to savepoing identifier<br>当回滚到某个保存点后，该保存点后设置的保存点将被删除。<br>释放保存点：<br>release savepoint identifier</li><li>隐式关闭自动提交<br>start transaction可以隐式关闭自动提交,不会修改@@autocommit，<br>例：<pre class="line-numbers language-none"><code class="language-none">delimiter &#x2F;&#x2F;create procedure update_cno()begin start transaction;update course set cname&#x3D;&#39;高等数学&#39; where courseno&#x3D;&#39;c3333&#39;;commit;select * from course where courseno&#x3D;&#39;c3333&#39;;end&#x2F;&#x2F;delimiter ;call update_cno();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>运用事务保存点<br>向course添加一条记录，设置保存点，删除该记录，然后回滚，提交，可以发现没有删除:<pre class="line-numbers language-none"><code class="language-none">delimiter &#x2F;&#x2F;create procedure po_in()begin start transaction; insert into course values(&#39;c1111&#39;,&#39;111&#39;,&#39;111&#39;,&#39;111&#39;);savepoint spcno1;delete from course where courseno&#x3D;&#39;c1111&#39;;rollback work to savepoint spcno1;select * from course where courseno&#x3D;&#39;c1111&#39;;commit;end&#x2F;&#x2F;delimiter ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h2 id="事务并发处理"><a href="#事务并发处理" class="headerlink" title="事务并发处理"></a>事务并发处理</h2><blockquote><p>MySQL中，并发控制通过锁来实现。保证同一时刻执行多个事务时，一个事务的执行不能被其它事务干扰。</p></blockquote><h3 id="并发问题影响"><a href="#并发问题影响" class="headerlink" title="并发问题影响"></a>并发问题影响</h3><blockquote><p>多个用户访问同一个数据库时，如果数据存储系统没有并发控制，就有并发问题。如果不加以控制，就有可能产生数据不一致问题。<br>数据库并发操作导致数据库不一致主要有4种：更新丢失，不可重复性，脏读，幻读数据。而且也有可能死锁。</p><ol><li>更新丢失：多个事务选择同一行更新，每个事务不知道其他事务的存在，最后的更新将覆盖其他事务，可能导致数据丢失。</li><li>脏读：即读出的不正确的临时数据。</li><li>不可重复读：同一个事务内两条相同的查询语句，查询结果不一致。</li><li>幻读：当对某行执行插入或删除操作，而该行属于某事务正在读取的行的范围时，就会出现幻读。</li><li>死锁：如果两个用户并发访问数据库，互相等待对方的数据，就会产生死锁。</li></ol></blockquote><h3 id="设置事务隔离级别"><a href="#设置事务隔离级别" class="headerlink" title="设置事务隔离级别"></a>设置事务隔离级别</h3><blockquote><p>SQL标准定义了4种隔离级别：<br>read uncommitted(读取未提交的数据) 隔离级别低：<br>所有事务都可以看到其他未提交事务的执行结果，该隔离级别很少用于实际应用。<br>read committed(读取提交的数据)：<br>大多数数据库系统默认隔离级别（不是MySQL的），满足隔离简单定义，一个事务只能看见已提交事务所做的改变。<br>repeatable read(可重复读)：<br>MySQL默认事务隔离级别，确保同一事务内相同的查询语句执行结果一致。<br>serializable(串行化) 隔离级别高：<br>通过强制事务排序，使之不可能相互冲突。换言之，在每条select语句后加上lock in share mode，为每个查询操作加一个共享锁。<br>这个级别，可能导致大量的锁等待现象。该隔离级别主要用于InnoDB存储引擎的分布式事务。<br>&emsp;<br>低级别的事务隔离可以提高事务的并发访问性能，可能导致较多的并发问题。<br>高级别的事务隔离可以有效避免并发问题，但会降低事务的并发访问性能，可能导致出现大量锁等待，甚至死锁现象。<br>查询当前隔离级别：<br>select @@tx_isolation<br>设置：set session transaction isolation level read uncommitted;</p></blockquote><h2 id="管理锁"><a href="#管理锁" class="headerlink" title="管理锁"></a>管理锁</h2><blockquote><p>MySQL通过锁来防止数据并发操作过程中引起的问题。它是实现并发控制的主要方法，是多个用户能够同时操作同一个数据库中额数据而不发生数据不一致性现象的重要保障。<br>MySQL通过不同类型的锁来管理多用户并发访问，实现数据访问的一致性。</p></blockquote><h3 id="锁机制基本概念"><a href="#锁机制基本概念" class="headerlink" title="锁机制基本概念"></a>锁机制基本概念</h3><blockquote><ol><li>锁的粒度：指锁的作用范围。锁的粒度可以分为服务器级锁和存储引擎级锁。MyISAM支持表锁，InnoDB支持表锁以及行级锁。</li><li>隐式锁和显式锁：自动加锁叫隐式锁，手动加锁称为显式锁。</li><li>锁的类型：读锁(共享锁)和写锁(独占锁)。读锁允许其他用户对数据同时读，不允许写。写锁不允许读也不允许写。</li><li>锁的钥匙：多个用户并发访问同一数据时，如果用户A对该数据成功加锁，那么只有A拥有钥匙，只有A能够对锁进行解锁。</li><li>锁的生命周期：指在同一个MySQL服务器连接内，对数据加锁到解锁之间的时间间隔。</li></ol></blockquote><h3 id="锁定和解锁"><a href="#锁定和解锁" class="headerlink" title="锁定和解锁"></a>锁定和解锁</h3><blockquote><ol><li>锁定表：<br>表锁定支持以下类型：read锁，write锁：<br>lock tables score read;<br>lock tables course write;</li><li>解锁：<br>unlock tables;<br>&emsp;<br>在对事务表使用表锁定需要注意：在锁定表时会隐式地提交所有事务，在开始一个事务时，start transaction会隐式解开所有表锁定。系统变量@@autocommit必须为0，否则，MySQL会在调用lock tables之后会立即释放表锁定，很容易形成死锁。</li></ol></blockquote><h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><blockquote><p>MySQL中3种锁定机制</p><ol><li>表锁：一个特殊类型的访问，整个表被客户锁定。根据锁定的类型其他用户不能写数据，甚至不能读数据。表锁有两种：读锁和写锁。</li><li>行锁：行级锁比表级锁或页级锁对锁定过程提供了更精细的控制。在这种情况下，只有线程使用的行是被锁定的。表中的其他行对于其他线程都是可用的。行级锁并不是由MySQL提供的锁定机制，而是由存储引擎自己实现。InnoDB的锁定机制就是行级锁定。行级锁定的类型包括3种：排他锁，共享锁，意向锁。</li></ol><ul><li>排他锁(X锁)：如果事务T获得了数据行D上的排他锁，则T对数据行既可读又可写。事务T对数据行D加上排他锁，则其他事务对数据行D的任务封锁请求都不会成功，直至事务T释放数据行D上的排他锁。</li><li>共享锁(S锁)：如果事务T获得了数据行D上的共享锁，则T对数据行可以读，不能写。事务T对数据行D加上共享锁，则其他事务对数据行D的排他锁请求不会成功，对数据行D的共享锁请求可以成功。</li><li>意向锁：是一种表锁，锁定粒度是整张表，分为意向共享锁，意向排他锁。意向锁表示一个事务有意对数据上共享锁或排他锁。<ul><li>意向共享锁：事务打算给数据行加共享锁，事务在取得一个数据行的共享锁之前必须先取得该表的意向共享锁。</li><li>意向排他锁：事务打算给数据行加排他锁，事务在取得一个数据行的排他锁之前必须先取得该表的意向排他锁。</li></ul></li></ul><p>InnoDB表的行锁是通过对索引施加锁的方式实现的，这就是说，只有通过索引字段检索数据的查询语句或者更新语句，才可能施加行级锁。否则InnoDB将使用表级锁，会降低表的并发访问性能。<br>3. 页锁：页级锁开锁和加锁时间介于表级锁和行级锁之间，会出现死锁，锁定粒度介于表级锁和行级锁之间。<br>上述三种锁的特性可大致归纳如下：<br>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p></blockquote><h2 id="分表分库"><a href="#分表分库" class="headerlink" title="分表分库"></a>分表分库</h2><h3 id="什么是分表分库？"><a href="#什么是分表分库？" class="headerlink" title="什么是分表分库？"></a>什么是分表分库？</h3><blockquote><p>就是把原本存储于一个库的数据分块存储到多个库上，把原本存储于一个表的数据分块存储到多个表上。</p></blockquote><h3 id="为什么要分库分表？"><a href="#为什么要分库分表？" class="headerlink" title="为什么要分库分表？"></a>为什么要分库分表？</h3><blockquote><p>数据库中的数据量不一定是可控的，在未进行分库分表的情况下，随着时间和业务的发展，库中的表会越来越多，表中的数据量也会越来越大。<br>数据操作的开销也会越来越大。而且一台服务器的资源（CPU、磁盘、内存、IO等）是有限的，最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。</p></blockquote><h3 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h3><blockquote><p>就是把一个表的数据放到多个表中，然后查询的时候你就查一个表。比如按照用户 id 来分表，将一个用户的数据就放在一个表中。然后操作的时候你对一个用户就操作那个表就好了。这样可以控制每个表的数据量在可控的范围内。</p></blockquote><h3 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h3><blockquote><p>一般数据库最多支撑到并发 2000，一定要扩容了，而且一个健康的单库并发值你最好保持在每秒 1000 左右。所以需要将一个库的数据拆分到多个库中，访问的时候就访问一个库好了。</p></blockquote><h3 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h3><blockquote><p>把一个有很多字段的表给拆分成多个表，或者是多个库上去。每个库表的结构都不一样，每个库表都包含部分字段。一般来说，会将较少的访问频率很高的字段放到一个表里去，然后将较多的访问频率很低的字段放到另外一个表里去。因为数据库是有缓存的，你访问频率高的行字段越少，就可以在缓存里缓存更多的行，性能就越好。这个一般在表层面做的较多一些。<br>将表按照功能模块、关系密切程度划分出来，部署到不同的库上。例如，我们会建立定义数据库workDB、商品数据库payDB、用户数据库userDB、日志数据库logDB等，分别用于存储项目数据定义表、商品定义表、用户数据表、日志数据表等。</p></blockquote><h3 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h3><blockquote><p>把一个表的数据给弄到多个库的多个表里去，但是每个库的表结构都一样，只不过每个库表放的数据是不同的，所有库表的数据加起来就是全部数据。水平拆分的意义，就是将数据均匀放更多的库里，然后用多个库来扛更高的并发，还有就是用多个库的存储容量来进行扩容。</p></blockquote><h3 id="分库分表中间件"><a href="#分库分表中间件" class="headerlink" title="分库分表中间件"></a>分库分表中间件</h3><blockquote><ul><li>sharding-jdbc：属于 client 层方案。 SQL 语法支持也比较多，没有太多限制。持分库分表、读写分离、分布式 id 生成、柔性事务（最大努力送达型事务、TCC 事务）。</li><li>mycat：属于 proxy 层方案，支持的功能非常完善，相比于 sharding jdbc 来说，年轻一些，经历的锤炼少一些。</li><li>区别：<ul><li>sharding-jdbc 这种 client 层方案的优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能很高，但是如果遇到升级啥的需要各个系统都重新升级版本再发布，各个系统都需要耦合 sharding-jdbc 的依赖。适合中小型公司。</li><li>mycat 这种 proxy 层方案的缺点在于需要部署，自己运维一套中间件，运维成本高，但是好处在于对于各个项目是透明的，如果遇到升级之类的都是自己中间件那里搞就行了。适合大型公司</li></ul></li></ul></blockquote><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><blockquote><p>如果数据库是因为表太多而造成海量数据，并且项目的各项业务逻辑划分清晰、低耦合，那么规则简单明了、容易实施的垂直切分必是首选。<br>如果数据库中的表并不多，但单表的数据量很大、或数据热度很高，这种情况之下就应该选择水平切分。</p></blockquote><h3 id="分库分表的问题"><a href="#分库分表的问题" class="headerlink" title="分库分表的问题"></a>分库分表的问题</h3><blockquote><ul><li>事务问题：数据存储到了不同的库上，事务管理出现困难。</li><li>跨库跨表的join问题：执行了分库分表之后，难以避免会将原本逻辑关联性很强的数据划分到不同的表、不同的库上。无法join位于不同分库的表，可能需要多次查询才能完成。</li><li>额外的数据管理负担和数据运算压力：比如查看前100条数据，分表前只需一个order by，分表后需要查出每个分表的前100，然后再合并整理。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL-1</title>
      <link href="/2021/10/28/sql-1/"/>
      <url>/2021/10/28/sql-1/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-基础"><a href="#SQL-基础" class="headerlink" title="SQL 基础"></a>SQL 基础</h1><h2 id="主要关键字的执行顺序："><a href="#主要关键字的执行顺序：" class="headerlink" title="主要关键字的执行顺序："></a>主要关键字的执行顺序：</h2><blockquote><p>from<br>on<br>join<br>where<br>group by<br>having<br>select<br>distinct<br>union<br>order by  </p></blockquote><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><blockquote><pre class="line-numbers language-none"><code class="language-none">create table if not exists student(studentno char(11) not null auto_increment,primary key (studentno));show create table student;alter table student add address varchar(30) not null after studentno;alter table student rename to student2;alter table student modify studentname varchar;alter table student drop address;alter table student add constraint fname foreign key(studentno) references student(studentno);delete * from student where 1&#x3D;1;truncate table;drop table if exists student;select studentno,sum(daily*0.3+final*0.7) as &#39;总分&#39; from score where final&gt;-75 group by studentno having cont(*)&gt;&#x3D;3;select studentno,sum(final) 总分,avg(final) 平均分 from score group by studentno having sum(final)&gt;270;select courseno,avg(final) from score group by courseno with rollup;#查询所有课的平均值，和所有成绩的平均值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><blockquote><p>Inner Join:结果只包含满足条件的列。<br>Left Outer Join:结果包含满足条件，左侧表全部行。<br>Right Outer Join:结果包含满足条件，右侧全部行。<br>Cross Join:结果包含两个表所有行。<br>select s.Name,C.Cname from student_course as sc left join student as s on s.Sno=sc.Sno left join course as c on c.Cno=sc.Cno<br>其中outer join 的执行过程分为4步<br>1、先对两个表执行交叉连接(笛卡尔积)<br>2、应用on筛选器<br>3、添加外部行<br>4、应用where筛选器</p></blockquote><h2 id="union"><a href="#union" class="headerlink" title="union"></a>union</h2><blockquote><p>合并多个结果集，将多个select语句的返回结果组合到一个结果集中。<br>所有查询中的列数和列的顺序必须相同且数据类型必须兼容。<br>select studentno,sname,phone from student01 where phone like ‘%131%’ union select studentno,sname,phone from teaching.student where phone like ‘%132%’;</p></blockquote><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><blockquote><p>子查询就是一个嵌套在select,insert,update,delete语句或其他子查询中的查询。</p><ol><li><p>利用子查询做表达式：<br>此时子查询必须返回一个值或单个列值列表，此时的子查询可以替换where子句中包含in关键字的表达式。<br>select studentno,sname,entrance,(select avg(entrance) from student) 平均成绩,entrance -(select avg(entrance) from student) 分差 from student where studentno=’18121212’;</p></li><li><p>利用子查询生成派生表<br>用于替代from子句中的数据源表<br>select studentno,courseno from (select * from score where final&gt;85) where final&gt;90;</p></li><li><p>where子句中的子查询<br>select studentno,courseno,final from score as a where final &lt; (select avg(final) from score where courseno=courseno group by courseno);</p></li><li><p>带in关键字的子查询<br>select studentno,sname from student where studetno in (select studentno from score where final&gt;99);</p></li></ol></blockquote><h2 id="正则表达式模糊查询"><a href="#正则表达式模糊查询" class="headerlink" title="正则表达式模糊查询"></a>正则表达式模糊查询</h2><blockquote><p>^匹配文本开始字符 ^b<br>$匹配文本结束字符 b$<br>.匹配单个字符 b.b<br>*匹配零个或多个在它面前的字符 *n<br>+匹配前面的字符1次或多次 如ba+ b开头后面紧跟至少一个a：bay,baa,bare,battle<br>&lt;字符串&gt;匹配包含指定的字符串的文本 fa:字符串要包含fa,如fafff<br>[字符集合]匹配字符集合中任何一个字符</p></blockquote><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>索引是为了加速对数据进行检索而创建的一种分散的，物理的数据结构。利用索引可以快速查询数据库表中的特定记录信息。表的存储由两部分组成，一部分是表的数据页面，另一部分是索引页面。索引放在索引页面上。<br>索引一旦创建，由数据库自动管理和维护，比如插入更新记录时，数据库会自动在索引中做出相应修改。<br>使用索引优点：</p><ol><li>加速数据检索：索引能以一列或多列值为基础实现快速查找</li><li>优化查询；索引能加速连接，排序和分组等。</li><li>强制实施的唯一性：创建唯一索引，可以保证表中的数据不重复。</li></ol><p>联合索引：<br>从左到右使用索引中的字段，一个查询可以只使用索引中的一部分，只能最左侧部分。<br>比如电话簿，知道姓，很有用。知道姓和名，很有用。只知道名，不起作用。</p><pre class="line-numbers language-none"><code class="language-none">create index phone_index on student(phone asc)create index sc_index on score(studentno,courseno);drop index mark on teacher;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote><p>视图作用：</p><ol><li>简化数据查询和处理。视图可以集中多个表数据，简化对数据查询和处理。</li><li>屏蔽数据库的复杂性。不必了解复杂的数据库中的表结构。</li><li>安全性。只让用户访问视图权限，不授予访问表权限，提高数据库安全性。</li></ol><pre class="line-numbers language-none"><code class="language-none">create view stu_score1 as select student.no,sname from score left join student on student.no &#x3D; score.no where ...create view teach_view(教师号,教师名) as select * from teacher;alter view teach_view as select teacherno,tname from teach where ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用视图修改表数据，基表的数据也进行了修改。</p></blockquote><h2 id="MYSQL编程"><a href="#MYSQL编程" class="headerlink" title="MYSQL编程"></a>MYSQL编程</h2><blockquote><p>变量：<br>局部变量，用户会话变量：@开头，系统会话变量两个@开头。</p><ol><li>会话变量：<br>MySQL服务器在内存中为每一个会话开辟独立的会话连接空间，不同的会话空间互不干扰，会话结束，会话空间释放。<br>set @name = ‘sss’<br>select @name := ‘sss’<br>select ‘sss’ into @name<br>:=能够产生结果集，into赋值方式仅仅用于定义与赋值，不会产生结果集。<br>例：<pre class="line-numbers language-none"><code class="language-none">set @sname &#x3D; (select sname from student where studentno &#x3D; &#39;111&#39;);select studetnno,sname,birthdate from student where sname &#x3D; @sname;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>局部变量：<br>局部变量必须先定义，然后使用set或者select语句赋值。局部变量定义在begin…and语句块之间。并且必须指定局部变量的数据类型。<br>局部变量作为存储过程或者函数的参数使用。<br>declare myvar int default 100;<br>set myvar = 77;</li><li>局部变量与会话变量区别:<br>会话变量定义时不需要指定类型，局部变量需要。会话变量不能使用declare定义。<br>会话变量作用范围和生存周期大于局部变量。会话变量在本次会话期间一直有效，知道关闭服务器连接。局部变量若作为存储过程或者函数的参数，此时在整个存储过程或函数内有效。</li></ol></blockquote><h2 id="定界符delimiter"><a href="#定界符delimiter" class="headerlink" title="定界符delimiter"></a>定界符delimiter</h2><blockquote><p>delimiter //</p></blockquote><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><blockquote><p>使用步骤：</p><ol><li>创建预处理语句</li><li>执行预处理语句</li><li>释放预处理语句<pre class="line-numbers language-none"><code class="language-none">set @a&#x3D;2;prepare STMT from &quot;select studetnno,sname from student limit?&quot;;execute STMT using @a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>use teaching; –打开数据库<br>‘#’打开数据库<br>use teaching;<br>/<em>打开数据库</em>/</p></blockquote><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><blockquote><pre class="line-numbers language-none"><code class="language-none">delimiter &#x2F;&#x2F;create function my_area(long1 int,wide1 int) returns intbegin return long1 * wide1; end &#x2F;&#x2F;delimiter ;select my_area(5,4);--查看当前数据库中所有的自定义函数信息show function status;            --较少show function status like 模式;  --较多--查看指定数据库中所有自定义函数名select name from MySQL.proc where db &#x3D; &#39;teaching&#39; and type &#x3D; &#39;function&#39;;--详细信息show create function func_name;drop function func_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="控制流语句"><a href="#控制流语句" class="headerlink" title="控制流语句"></a>控制流语句</h2><blockquote><ol><li>if<pre class="line-numbers language-none"><code class="language-none">if x &#x3D; 10 then set x &#x3D; 1;elseif x &#x3D; 20 then set x &#x3D; 2;else set x &#x3D; 3;end if;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>case<pre class="line-numbers language-none"><code class="language-none">case xwhen 10 then set x &#x3D; 1;when 20 then set x &#x3D; 2;else set x &#x3D; 3;end case;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>while<pre class="line-numbers language-none"><code class="language-none">while m &lt; n doset sum &#x3D; sum + n;end while;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>loop<pre class="line-numbers language-none"><code class="language-none">loop_label:loopset sum &#x3D; sum + kif k &gt; n thenleave loop_label;end if;end loop;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>repeat<pre class="line-numbers language-none"><code class="language-none">repeatset sum &#x3D; sum + k;until p &gt; nend repeat;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><blockquote><p>利用存储过程可以保证数据的完整性，提高执行重复任务的性能和数据的一致性。<br>优势：</p><ol><li>提高处理复杂任务的能力。</li><li>增强代码复用性和共享性。</li><li>减少网络中数据的流量。</li><li>存储过程在服务器注册。</li><li>加强了系统的安全性。<pre class="line-numbers language-none"><code class="language-none">delimiter &#x2F;&#x2F;create procedure proc_stu()reads sql data  --整个过程中所有的SQL语句仅需要读记录，不对记录进行写的操作。beginselect studentno,sname from student where phone like &#39;%131%&#39;;end&#x2F;&#x2F;delimiter ;call proc_stu();show procedure status like &#39;proc_%&#39;;show create procedure proc_stu;--将读写权限改为modifies sql data,并指明调用者可以执行:alter procedure do_insertmodifies sql data sql security invoker;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>在mysql存储过程出现的同时，用户权限也增加了5种，其中和存储过程有关的权限有三种：<br>ALTER ROUTINE 编辑或删除存储过程<br>CREATE ROUTINE 建立存储过程<br>EXECUTE 运行存储过程</li></ol><p>SQL SECURITY INVOKER 只是让其他用户能运行 没有select、 update、delete权限只有CREATE ROUTINE权限的用户 所创建的存储过程<br>drop procedure if exists do_insert;</p></blockquote><h2 id="存储过程与函数比较"><a href="#存储过程与函数比较" class="headerlink" title="存储过程与函数比较"></a>存储过程与函数比较</h2><blockquote><p>相同：</p><ol><li>存储过程和函数都可以重复使用，减少开发人员工作量。</li><li>存储过程和函数可以增强数据的安全访问控制，可以设定只有某些数据库用户才具有某些存储过程和函数的执行权。</li></ol><p>不同：</p><ol><li>函数有且只有一个返回值，且必须指定返回值为字符串，数值两种。<br>存储过程返回值任意个，也可以没有。返回值需要使用out,inout参数定义。</li><li>函数可以使用select…into语句为某个变量赋值，但不能使用select语句返回结果集。<br>存储过程甚至可以返回多个结果集。</li><li>函数可以直接嵌入到SQL语句或MySQL表达式，还可以扩充标准的SQL语句。<br>存储过程一般需要单独调用，使用call。</li></ol></blockquote><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><blockquote><p>有时需要访问select结果集中的具体数据行，对结果集中每条记录进行处理。游标就是用于解决此类问题。<br>游标在MySQL中是一种对select语句结果集进行访问的机制。</p><pre class="line-numbers language-none"><code class="language-none">--声明游标后select没有执行，内存中不存在结果集declare teach_cursor cursorfor select teacherno,tname from teacher;--打开游标，select执行，内存存放结果集open teach_cursor--提取数据，需要fetch，只能顺序从前往后读。fetch_loop:LOOPfetch teach_cursor into v_no,v_name;if @dovar &#x3D; 1 then leave fetch_loop;else select v_no,v_name;end if;end LOOP fetch_loop;close teach_cursor;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><blockquote><p>触发器是一种特殊的存储过程，只要满足一定条件，对数据insert,update,delete，数据库会自动执行触发器中定义的程序语句。<br>优点：</p><ol><li>触发器自动执行，在表的数据做了任何修改之后立即激活。</li><li>可以强制限制，这些限制比用check约束所定义的更复杂，与check不同的是触发器可以引用其他表中的列。<pre class="line-numbers language-none"><code class="language-none">--更改course中某门课的课程号时，同时将score表课程号全部更新。create trigger cno_update after updateon course for each rowbegin update score set courseno &#x3D; new.coursenowhere courseno &#x3D; old.courseno;end查看:show triggers;select * from information_schema.triggers;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意事项：</p><ol><li>触发程序如果包含select语句，select语句不能返回结果集。</li><li>同一个表不能创建两个相同触发时间，事件的触发程序。</li><li>批量更新操作是，触发器会导致操作性能降低。</li><li>InnoDB支持事务，触发程序和更新操作是在同一个事务中完成。</li><li>MySQL触发程序不能对本表使用更新语句例如update，可以使用set代替，否则可能出现错误信息。</li><li>添加触发器后一定要测试。<br>drop trigger stu_score;</li></ol></blockquote><h2 id="事件及其应用"><a href="#事件及其应用" class="headerlink" title="事件及其应用"></a>事件及其应用</h2><blockquote><p>MySQL中的事件又称事件调度器，是一种定时任务机制，可以用于定时执行任务。可以精确到每秒执行一个任务。<br>开启事件调度器：</p><ol><li>set @@global.event_scheduler = true;</li><li>配置文件my.ini:加上一行：event_scheduler = 1,重启</li></ol><p>查看事件调度器：</p><pre class="line-numbers language-none"><code class="language-none">show variables like &#39;event_scheduler&#39;;--5秒后创建一个表test：create event directon schedule at current_timestamp + interval 5 seconddocreate table test(timeline timestamp);--每秒插入一条记录到数据库test中：create event test_inserton schedule every 1 seconddo insert into test values(current_timestamp);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看事件：<br>show events;<br>show events\G</p><p>修改：<br>alter event test_insert disable;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-1</title>
      <link href="/2021/10/25/java-base-1/"/>
      <url>/2021/10/25/java-base-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>在我理解，面向对象是一种万物皆对象的编程思想。在现实生活中的任何物体都可以归化为一类事物，而每一个个体都是一类事物的实例。面向对象就是以对象为中心，以消息为驱动，所以程序=对象+消息<br>面向对象三大特征：</p><ol><li>封装<br>就是将一类事物的属性和行为抽象成一个类，使其属性私有化，行为公开化，就是隐藏了类的实现细节，只能通过特定方法去访问一些内部信息。</li><li>继承<br>从已有的类中派生出新的类，实现代码复用，就是子类继承一个父类，然后子类就具有父类的一些属性和方法。同时也可以具有自己的独有的属性和方法，这样就扩展了已存在的代码，提高了代码复用性。</li><li>多态<br>编译时多态<br>运行时多态</li></ol><h2 id="Oracle-JDK-和-OpenJDK-的区别是什么？"><a href="#Oracle-JDK-和-OpenJDK-的区别是什么？" class="headerlink" title="Oracle JDK 和 OpenJDK 的区别是什么？"></a>Oracle JDK 和 OpenJDK 的区别是什么？</h2><blockquote><ul><li>Oracle JDK 版本将每三年发布一次，而 OpenJDK 版本每三个月发布一次；</li><li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是OpenJDK 的一个实现，并不是完全开源的；</li><li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，建议选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；</li><li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；</li><li>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li><li>Oracle JDK 根据二进制代码许可协议获得许可，而 OpenJDK 根据 GPLv2 许可获得许可。</li></ul></blockquote><h2 id="Java基本数据类型"><a href="#Java基本数据类型" class="headerlink" title="Java基本数据类型"></a>Java基本数据类型</h2><blockquote><p><img src="/2021/10/25/java-base-1/java1.png" alt="Java基本数据类型"></p></blockquote><h2 id="switch-是否能作用在-byte-long-String-上？"><a href="#switch-是否能作用在-byte-long-String-上？" class="headerlink" title="switch 是否能作用在 byte, long,String 上？"></a>switch 是否能作用在 byte, long,String 上？</h2><blockquote><ul><li>Java5 以前 switch(expr)中，expr 只能是 byte、short、char、int。</li><li>从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。</li><li>从 Java 7 开始，expr还可以是字符串(String)，但是长整型(long)在目前所有的版本中都是不可以的。</li></ul></blockquote><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><blockquote><p><img src="/2021/10/25/java-base-1/java2.png" alt="Java访问修饰符"><br>不同包下，子类可通过关键词super访问父类中的protected修饰的方法和属性。<br>super.opendoor();<br>直接通过父类引用访问，不同包下，jvm解析不到是否是子类访问的情况，虽然你是在子类中定义了父类引用。<br>通过super，jvm就知道是子类要访问父类的protected方法。</p></blockquote><h2 id="final-finally-finalize"><a href="#final-finally-finalize" class="headerlink" title="final,finally,finalize"></a>final,finally,finalize</h2><blockquote><ul><li>final 变量：被修饰的变量不可变，不可变分为 引用不可变 和 对象不可变 ，final 指的是 引用不可变 ，final 修饰的变量必须初始化，通常称被修饰的变量为常量 。</li><li>final 方法：被修饰的方法不允许任何子类重写，子类可以使用该方法。</li><li>final 类：被修饰的类不能被继承，所有方法不能被重写</li><li>finally 作为异常处理的一部分，它只能在 try/catch 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常,函数中try里面return后也会执行），System.exit (0) 可以阻断finally 执行。</li><li>finalize 是在 java.lang.Object 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在gc 启动，该对象被回收的时候被调用。</li><li>一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。</li></ul></blockquote><h2 id="java静态变量、代码块、和静态方法的执行顺序"><a href="#java静态变量、代码块、和静态方法的执行顺序" class="headerlink" title="java静态变量、代码块、和静态方法的执行顺序"></a>java静态变量、代码块、和静态方法的执行顺序</h2><blockquote><p>代码块执行顺序：静态代码块——&gt; 构造代码块 ——&gt; 构造函数——&gt; 普通代码块<br>继承中代码块执行顺序：父类静态块——&gt;子类静态块——&gt;父类代码块——&gt;父类构造器——&gt;子类代码块——&gt;子类构造器</p></blockquote><h2 id="面向对象，面向过程"><a href="#面向对象，面向过程" class="headerlink" title="面向对象，面向过程"></a>面向对象，面向过程</h2><blockquote><p>面向过程：</p><ul><li>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发，性能是最重要的因素。</li><li>缺点：没有面向对象易维护、易复用、易扩展。</li></ul><p>面向对象：</p><ul><li>优点：易维护、易复用、易扩展，有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护。</li><li>缺点：性能比面向过程低。</li></ul></blockquote><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><ol><li>编译时多态：例如重载</li><li>运行时多态：编译时不确定究竟调用哪个具体方法，一直到运行时才能确定。<br>多态规则：</li><li>如果是访问成员变量，编译的话就是看父类，运行同样是看父类 </li><li>如果访问的方法，编译就看父类，运行则看子类 </li><li>如果是静态方法，编译和运行都是看父类<br>总的来说就记住这么一句，多态中只有非静态的成员方法才是编译看父类，而运<br>行时看子类，也即是实际调用的是子类方法 </li></ol></blockquote><h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><blockquote><p>语法上的区别：</p><ul><li>抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法；</li><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；</li><li>接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ul><p>设计层面上的区别：</p><ul><li>抽象类是对事物的抽象，接口则是对行为的抽象。抽象类是对整个类进行抽象，包括属性、行为，接口却是对类局部（行为）进行抽象。</li><li>设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。</li></ul></blockquote><h2 id="Java创建对象方式"><a href="#Java创建对象方式" class="headerlink" title="Java创建对象方式"></a>Java创建对象方式</h2><blockquote><ul><li>new创建新对象</li><li>通过反射机制</li><li>采用clone机制</li><li>通过序列化机制</li></ul></blockquote><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><blockquote><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode()函数。<br>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p></blockquote><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>反射是在运行状态中，对于任意一个类，都能知道这个类的所有属性和方法。对于任意一个对象都能调用它的属性和方法。这种动态获取的信息和动态调用对象的属性和方法叫反射机制。<br>也就是说反射可以操作class字节码。<br>优点：能够运行时动态获取类的实例，提高灵活性；可与动态编译结合。<br>缺点：使用反射性能较低，需要解析字节码，将内存中的对象进行解析。</p><p>Java反射API：</p><ul><li>Class 类：反射的核心类，可以获取类的属性，方法等信息。</li><li>Field 类：Java.lang.reflec 包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值</li><li>Method 类：Java.lang.reflec 包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法</li><li>Constructor 类：Java.lang.reflec 包中的类，表示类的构造方法。</li></ul><p>获取使用反射的Class对象：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;获取类的 Class 对象实例Class clz &#x3D; Class.forName(&quot;java.lang.String&quot;);&#x2F;&#x2F;获取类的方法Method setPriceMethod &#x3D; clz.getMethod(&quot;方法名&quot;, int.class);&#x2F;&#x2F;根据 Class 对象实例获取 Constructor 对象Constructor appleConstructor &#x3D; clz.getConstructor();&#x2F;&#x2F;使用 Constructor 对象的 newInstance 方法获取反射类对象Object appleObj &#x3D; appleConstructor.newInstance();&#x2F;&#x2F;调用方法setPriceMethod.invoke(appleObj,12);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反射机制的应用有哪些:</p><ul><li>反射让开发人员可以通过外部类的全路径名创建对象，并使用这些类，实现一些扩展的功能。</li><li>反射让开发人员可以枚举出类的全部成员，包括构造函数、属性、方法。以帮助开发者写出正确的代码。</li><li>测试时可以利用反射 API 访问类的私有成员，以保证测试代码覆盖率。</li></ul></blockquote><h2 id="Java序列化与反序列化"><a href="#Java序列化与反序列化" class="headerlink" title="Java序列化与反序列化"></a>Java序列化与反序列化</h2><ul><li>序列化：序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。作用：对象状态的保存与重建。Java对象存在JVM内存中，JVM不在了，对象就消失了。把Java对象序列化成可存储或传输的形式（如二进制流）就可以保存在文件中。</li><li>反序列化：把序列化后的对象字节流反序列化成对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud-微服务-Config</title>
      <link href="/2021/10/23/springcloud-6/"/>
      <url>/2021/10/23/springcloud-6/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h1><h2 id="本地读取配置文件"><a href="#本地读取配置文件" class="headerlink" title="本地读取配置文件"></a>本地读取配置文件</h2><ol><li>新建maven工程，前面几次文章有提到。pom.xml:<pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;groupId&gt;org.zwq&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;cloud-config&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;    &lt;packaging&gt;pom&lt;&#x2F;packaging&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.5.2.RELEASE&lt;&#x2F;version&gt;        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;    &lt;&#x2F;parent&gt;    &lt;properties&gt;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;        &lt;spring-cloud.version&gt;Dalston.RELEASE&lt;&#x2F;spring-cloud.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;            &lt;scope&gt;test&lt;&#x2F;scope&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;    &lt;dependencyManagement&gt;        &lt;dependencies&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;                &lt;type&gt;pom&lt;&#x2F;type&gt;                &lt;scope&gt;import&lt;&#x2F;scope&gt;            &lt;&#x2F;dependency&gt;        &lt;&#x2F;dependencies&gt;    &lt;&#x2F;dependencyManagement&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&emsp;</li><li>在主工程里面创建config-server module工程。<br>配置pom.xml文件：<pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.zwq&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;cloud-config&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;    &lt;&#x2F;parent&gt;    &lt;groupId&gt;com.zwq&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;config-server&lt;&#x2F;artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;    &lt;name&gt;config-server&lt;&#x2F;name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-config-server&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;            &lt;scope&gt;test&lt;&#x2F;scope&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;            &lt;&#x2F;plugin&gt;        &lt;&#x2F;plugins&gt;    &lt;&#x2F;build&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&emsp;<br>在启动类上加上@EnableConfigServer注解，开启ConfigServer功能。<br>&emsp;<br>配置application.yml文件：<pre class="line-numbers language-none"><code class="language-none">spring:  cloud:    config:      server:        native:          search-locations: classpath:&#x2F;shared   #配置 Config Server 本地读取配置,路径  profiles:    active: native  application:    name: config-serverserver:  port: 8769<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&emsp;<br>然后在工程的 Resources 目录下建 shared 文件夹，用于存放本地配置文件。<br>在该文件夹下新建config-client-dev.yml文件，用作 dev （开发环境〉的配置文件:<pre class="line-numbers language-none"><code class="language-none">#client dev （开发环境〉的配置文件server:  port: 8762foo: foo version 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>&emsp;</li><li>在主工程里面创建config-client module工程。<br>配置pom.xml：<pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.zwq&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;cloud-config&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;    &lt;&#x2F;parent&gt;    &lt;groupId&gt;com.zwq&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;config-client&lt;&#x2F;artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;    &lt;name&gt;config-client&lt;&#x2F;name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-config&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;            &lt;&#x2F;plugin&gt;        &lt;&#x2F;plugins&gt;    &lt;&#x2F;build&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&emsp;<br>修改配置文件，bootstrap.yml：<pre class="line-numbers language-none"><code class="language-none">#向 Uri 地址为 http:&#x2F;&#x2F;localhost:8769的 Config Server 读取配置文件spring:  application:    name: config-client  cloud:    config:      uri: http:&#x2F;&#x2F;localhost:8769      fail-fast: true  profiles:    active: dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&emsp;</li><li>启动config-server,然后启动config-client服务，可以看见client读取了server的配置文件。并且开的端口是8762<br>&emsp;</li><li>进一步验证：在config-client新建包controller,新建TestController，写一个接口读取配置文件的foo变量:<pre class="line-numbers language-none"><code class="language-none">import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;&#x2F;** * description: 测试 * * @author zwq * @date 2021&#x2F;10&#x2F;23 22:42 *&#x2F;@RestControllerpublic class TestController &#123;    @Value(&quot;$&#123;foo&#125;&quot;)    String foo;    @RequestMapping(value &#x3D; &quot;&#x2F;foo&quot;)    public String foo() &#123;        return foo;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>访问 <a href="http://localhost:8762/foo">http://localhost:8762/foo</a> :<br><img src="/2021/10/23/springcloud-6/config1.png"></li></ol><h2 id="从远程Git读取配置文件"><a href="#从远程Git读取配置文件" class="headerlink" title="从远程Git读取配置文件"></a>从远程Git读取配置文件</h2><p>Spring Cloud Config 可以从远程 Git 仓库读取配置文件，这样就能将配置统一管理。并且也能通过Spring Cloud Bus 在不人工启动程序的情况下对 Config Client 的配置进行刷新。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>首先修改Config Server配置文件application.yml:</p><pre class="line-numbers language-none"><code class="language-none">server:  port: 8769# remote gitspring:  cloud:    config:      server:        git:          uri: https:&#x2F;&#x2F;github.com&#x2F;zwqmore&#x2F;SpringcloudConfig.git          searchPaths: respo          force-pull: true          timeout: 20          strict-host-key-checking: false            #username:          #password:          default-label: main      label: main  application:    name: config-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是私人Git仓库，需要登录用户名和密码。<br>然后将eureka client-dev.yml上传到github仓库。同时修改一下配置文件的变量：</p><pre class="line-numbers language-none"><code class="language-none">foo: foo version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>启动config-server,config-client服务，访问<a href="http://localhost:8762/foo">http://localhost:8762/foo</a> ：<br><img src="/2021/10/23/springcloud-6/config2.png"><br>config-server从远程Git仓库读取配置文件成功。</p><h2 id="构建高可用的Config-Server"><a href="#构建高可用的Config-Server" class="headerlink" title="构建高可用的Config Server"></a>构建高可用的Config Server</h2><p>当服务实例很多时，所有的服务实例需要同时从配置中心Config Server 读取配置文件，这时可以考虑将配置中心 Config Server 做成一个微服务，并且将其集群化，从而达到高可用。<br>Config Server架构图：<br><img src="/2021/10/23/springcloud-6/config3.png"></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>新建module工程eureka-server,配置pom.xml：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.zwq&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;cloud-config&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;    &lt;&#x2F;parent&gt;    &lt;groupId&gt;com.zwq&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;eureka-server&lt;&#x2F;artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;    &lt;name&gt;eureka-server&lt;&#x2F;name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;            &lt;&#x2F;plugin&gt;        &lt;&#x2F;plugins&gt;    &lt;&#x2F;build&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>配置application.yml:</p><pre class="line-numbers language-none"><code class="language-none">server:  port: 8761eureka:  client:    register-with-eureka: false    fetch-registry: false    serviceUrl:      defaultZone: http:&#x2F;&#x2F;localhost:$&#123;server.port&#125;&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在启动类加上@EnableEurekaServer注解，开启EnableServer功能<br>&emsp;<br>修改Config-Server工程：<br>pom.xml加上依赖:</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;      &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>作为eureka-client，同时在启动类加上@EnableEurekaClient注解。<br>配置application.yml:</p><pre class="line-numbers language-none"><code class="language-none">server:  port: 8769# remote gitspring:  cloud:    config:      server:        git:          uri: https:&#x2F;&#x2F;github.com&#x2F;zwqmore&#x2F;SpringcloudConfig.git          searchPaths: respo          force-pull: true          timeout: 20          strict-host-key-checking: false          #username:          #password:          default-label: main      label: main  application:    name: config-servereureka:  client:    serviceUrl:      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>修改Config-Client<br>pom.xml加上依赖：</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>作为eureka-client，同时在启动类加上@EnableEurekaClient注解。<br>配置application.yml:</p><pre class="line-numbers language-none"><code class="language-none">spring:  application:    name: config-client  cloud:    config:      #uri: http:&#x2F;&#x2F;localhost:8769      fail-fast: true      discovery:        enabled: true        service-id: config-server  profiles:    active: devserver:  port: 8762eureka:  client:    serviceUrl:      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h3><p>启动eureka-server,两个config-server实例（不同端口启动）<br>然后多次启动config-client服务，控制台可以发现config-client从不同端口读取配置文件，并且做了负载均衡。<br><img src="/2021/10/23/springcloud-6/config4.png"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springcloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud-微服务-zuul</title>
      <link href="/2021/10/21/springcloud-5/"/>
      <url>/2021/10/21/springcloud-5/</url>
      
        <content type="html"><![CDATA[<h1 id="路由网关-Spring-Cloud-Zuul"><a href="#路由网关-Spring-Cloud-Zuul" class="headerlink" title="路由网关 Spring Cloud Zuul"></a>路由网关 Spring Cloud Zuul</h1><p>智能路由网关组件Zuul，作为微服务系统的网关组件，用于构建边界服务。致力于动态路由，过滤，监控，弹性伸缩和安全。</p><h2 id="为什么需要Zuul？"><a href="#为什么需要Zuul？" class="headerlink" title="为什么需要Zuul？"></a>为什么需要Zuul？</h2><ul><li>Zuul Ribbon 以及 Eureka 相结合，可以实现智能路由和负载均衡的功能， Zuul 能够将请求流量按某种策略分发到集群状态的多个服务实例。</li><li>网关将所有服务的 API 接口统一聚合，并统一对外暴露。外界系统调用 API 接口时，都是由网关对外暴露的 API 接口，外界系统不需要知道微服务系统中各服务相互调用的复杂性。微服务系统也保护了其内部微服务单元的 API 接口,防止其被外界直接调用，导致服务的敏感信息对外暴露。</li><li>网关服务可以做用户身份认证和权限认证，防止非法请求操作 API 接口，对服务器起到保护作用。</li><li>网关可以实现监控功能，实时日志输出，对请求进行记录。</li><li>网关可以用来实现流量监控,在高流量的情况下，对服务进行降级。</li><li>API 接口从内部服务分离出来 ,方便做测试。</li></ul><h2 id="Zuul工作原理"><a href="#Zuul工作原理" class="headerlink" title="Zuul工作原理"></a>Zuul工作原理</h2><ul><li>PRE 过滤器 它是在请求路由到具体的服务之前执行的，这种类型的过滤器可以做安全验证，例如身份验证、 参数验证等。</li><li>ROUTING 过滤器，它用于将请求路由到具体的微服务 。在默认情况下，它使用Http Client 进行网络请求。</li><li>POST 过滤器：它是在请求己被路由到微服务后执行的。一般情况下，用作收集统计信息、指标，以及将响传输到客户端。</li><li>ERROR 过滤器：它是在其他过滤器发生错误时执行的。<br>Zuul 采取了动态读取、编译和运行这些过滤器，过滤器，间不能直接通信，而是通过RequestContext 对象来共享数据 。每个请求都会创建 RequestContext 对象。</li></ul><h2 id="Zuul-请求的生命周期"><a href="#Zuul-请求的生命周期" class="headerlink" title="Zuul 请求的生命周期"></a>Zuul 请求的生命周期</h2><p>当一个客户端 Request 请求进入 Zuul 服务时，网关先进入“pre filter”进行一系列的验证、操作或者判断。然后交给”routing filter”进行路由转发，转发到具体的服务实例进行逻辑处理、返回数据。当具体的服务处理完后，最后由”post filter”，进行处理，该类型的处理器处理完之后，将 Response 信息返回给客户端。</p><p><img src="/2021/10/21/springcloud-5/zuul1.png" alt="Zuul请求生命周期"></p><h2 id="搭建-Zuul-服务"><a href="#搭建-Zuul-服务" class="headerlink" title="搭建 Zuul 服务"></a>搭建 Zuul 服务</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在上一个案例基础上，新建module，eureka-zuul-client,然后添加依赖：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.zwq&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;    &lt;&#x2F;parent&gt;    &lt;groupId&gt;com.zwq&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;eureka-zuul-client&lt;&#x2F;artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;    &lt;name&gt;eureka-zuul-client&lt;&#x2F;name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-zuul&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;            &lt;scope&gt;test&lt;&#x2F;scope&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;            &lt;&#x2F;plugin&gt;        &lt;&#x2F;plugins&gt;    &lt;&#x2F;build&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改application.yml配置文件：</p><pre class="line-numbers language-none"><code class="language-none">spring:  application:    name: service-zuulserver:  port: 5000eureka:  client:    serviceUrl:      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;zuul:  routes:    hiapi:      path: &#x2F;hiapi&#x2F;**      serviceId: eureka-client    ribbonapi:      path: &#x2F;ribbonapi&#x2F;**      serviceId: eureka-ribbon-client  prefix: &#x2F;zwq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看zuul配置：<br>zuul.routes.hiapi.path和serviceId可以将以”/hiapi”开头的url路由到eureka-client服务，hiapi是自定义的，需要指定path,serciceId,下面的ribbonapi同理<br>最后的zuul.prefix是给每个服务 API 接口加上前缀。</p><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>启动eureka-server、2个eureka-client实例、eureka-ribbon-client、eureka-zuul-client服务。<br>多次访问浏览器：<a href="http://localhost:5000/hiapi/hi?name=zwq">http://localhost:5000/hiapi/hi?name=zwq</a> ,浏览器会轮流显示：<br><img src="/2021/10/21/springcloud-5/zuul2.png"><br><img src="/2021/10/21/springcloud-5/zuul3.png"><br>可见Zuul在路由转发做了负载均衡。</p><h2 id="zuul使用熔断器"><a href="#zuul使用熔断器" class="headerlink" title="zuul使用熔断器"></a>zuul使用熔断器</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在Zuul 实现熔断功能需要实现 ZuulFallbackProvider 接口。实现该接口有两个方法，一个是getRoute方法，用于指定熔断功能应用于哪些路由的服务，另一个方法 fallbackResponse为进入熔断功能时执行的逻辑<br>在eureka-zuul-client工程创建config包，新建MyFallBackProvider类实现ZuulFallbackProvider：</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.client.ClientHttpResponse;import org.springframework.stereotype.Component;import java.io.ByteArrayInputStream;import java.io.InputStream;&#x2F;** * description: 熔断 * * @author zwq * @date 2021&#x2F;10&#x2F;22 15:19 *&#x2F;@Componentpublic class MyFallBackProvider implements ZuulFallbackProvider &#123;    @Override    public String getRoute() &#123;        return &quot;eureka-client&quot;;    &#125;    @Override    public ClientHttpResponse fallbackResponse() &#123;        return new ClientHttpResponse() &#123;            @Override            public HttpStatus getStatusCode() &#123;                return HttpStatus.OK;            &#125;            @Override            public int getRawStatusCode() &#123;                return 200;            &#125;            @Override            public String getStatusText() &#123;                return &quot;OK&quot;;            &#125;            @Override            public void close() &#123;            &#125;            @Override            public InputStream getBody() &#123;                return new ByteArrayInputStream(&quot;ops,error,i&#39;m fallback&quot;.getBytes());            &#125;            @Override            public HttpHeaders getHeaders() &#123;                HttpHeaders httpHeaders &#x3D; new HttpHeaders();                httpHeaders.setContentType(MediaType.APPLICATION_JSON);                return httpHeaders;            &#125;        &#125;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>启动 eureka-zuul-client 工程，并且关闭 eureka-client 的所有实例，在浏览器上访问<br><a href="http://localhost:5000/hiapi/hi?name=zwq">http://localhost:5000/hiapi/hi?name=zwq</a> ，浏览器显示:<br><img src="/2021/10/21/springcloud-5/zuul4.png"><br>以上代码是对eureka-client服务的熔断器，其中把getRoute()方法返回值改成”*”,则是给所有路由功能加熔断功能。</p><h2 id="zuul使用过滤器"><a href="#zuul使用过滤器" class="headerlink" title="zuul使用过滤器"></a>zuul使用过滤器</h2><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>zuul使用过滤器需要继承 ZuulFilter ，并实现 ZuulFilter 中的抽象方法，包括 filterType,filterOrder，以及IZuulFilter的shouldFilter和 Object run()的两个方法。其中:</p><ul><li>filterType()即过滤器的类型,它有 4种类型:pre,post,routing,error。</li><li>filterOrder()是过滤顺序，它为 Int 类型的值，值越小，越早执行该过滤器。</li><li>shouldFilter()表示该过滤器是否过滤逻辑，如果为 true ，则执行 run（）方法：如果为 false ，则不执行 run()方法。run()方法写具体的过滤的逻辑</li></ul><p>下面来模拟一个用户身份验证功能，使用过滤器检查请求参数中是否传了token这个参数，如果没有，直接返回响应，不被路由。<br>在eureka-zuul-client工程的config包中新建MyFilter类：</p><pre class="line-numbers language-none"><code class="language-none">import com.netflix.zuul.ZuulFilter;import com.netflix.zuul.context.RequestContext;import org.springframework.stereotype.Component;import javax.servlet.http.HttpServletRequest;&#x2F;** * description: 过滤器 * * @author zwq * @date 2021&#x2F;10&#x2F;22 15:55 *&#x2F;@Componentpublic class MyFilter extends ZuulFilter &#123;    @Override    public String filterType() &#123;        return &quot;pre&quot;;    &#125;    @Override    public int filterOrder() &#123;        return 0;    &#125;    @Override    public boolean shouldFilter() &#123;        return true;    &#125;    @Override    public Object run() &#123;        RequestContext ctx &#x3D; RequestContext.getCurrentContext();        HttpServletRequest request &#x3D; ctx.getRequest();        Object accessToken &#x3D; request.getParameter(&quot;token&quot;);        if(accessToken &#x3D;&#x3D; null)&#123;            System.out.println(&quot;token is null&quot;);            ctx.setSendZuulResponse(false);            ctx.setResponseStatusCode(401);            try &#123;                ctx.getResponse().getWriter().write(&quot;token is null&quot;);            &#125; catch (Exception e) &#123;                return null;            &#125;        &#125;        System.out.println(&quot;ok&quot;);        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问测试-1"><a href="#访问测试-1" class="headerlink" title="访问测试"></a>访问测试</h3><p>开启服务eureka-server、eureka-client、eureka-ribbon-client、eureka-zuul-client：<br>访问：<a href="http://localhost:5000/zwq/ribbonapi/hi?name=zwqzwq">http://localhost:5000/zwq/ribbonapi/hi?name=zwqzwq</a> ,提示没有token：<br><img src="/2021/10/21/springcloud-5/zuul5.png"><br>接下来携带token: <a href="http://localhost:5000/zwq/ribbonapi/hi?name=zwqzwq&amp;token=121212">http://localhost:5000/zwq/ribbonapi/hi?name=zwqzwq&amp;token=121212</a> ，成功：<br><img src="/2021/10/21/springcloud-5/zuul6.png"><br>可见， MyFilter对请求进行了过滤，并在请求路由转发之前进行了逻辑判断。在实际开发中，可以用此过滤器进行安全验证。<br>本例架构图：<br><img src="/2021/10/21/springcloud-5/zuul7.png"><br>zuul常见使用方式架构图：<br><img src="/2021/10/21/springcloud-5/zuul8.png"><br><img src="/2021/10/21/springcloud-5/zuul9.png"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springcloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud-微服务-Hystrix</title>
      <link href="/2021/10/21/springcloud-4/"/>
      <url>/2021/10/21/springcloud-4/</url>
      
        <content type="html"><![CDATA[<h1 id="熔断器-Hystrix"><a href="#熔断器-Hystrix" class="headerlink" title="熔断器 Hystrix"></a>熔断器 Hystrix</h1><h2 id="什么是Hystrix"><a href="#什么是Hystrix" class="headerlink" title="什么是Hystrix"></a>什么是Hystrix</h2><p>在分布式系统中，服务与服务之间的依赖错综复杂，一种不可避免的情况就是某些服务<br>出现故障，导致依赖于它们的其他服务出现远程调度的线程阻塞。 Hystrix Netflix 公司开<br>源的一个项目，它提供了熔断器功能，能够阻止分布式系统中出现联动故障 Hystrix 是通过<br>隔离服务的访问点阻止联动故障的，并提供了故障的解决方案，从而提高了整个分布式系统<br>的弹性。</p><h2 id="为什么要有Hystrix"><a href="#为什么要有Hystrix" class="headerlink" title="为什么要有Hystrix"></a>为什么要有Hystrix</h2><p>在微服务系统中，一个用户请求可能需要调用几个服务才能完成。当某一个服务，出现网络延迟或者故障时，<br>整个用户请求会处于阻塞状态，其他服务需要等待。在高并发的情况下，单个服务的延迟会导致整个请求都处于延迟状态，可能在几秒钟就使<br>整个服务处于线程负载饱和的状态。某个服务的单个点的请求故障会导致用户的请求处于阻塞状态，最终的结果就是整个服务<br>的线程资源消耗殆尽。导致整个微服务系统都不可用，即雪崩效应。为了防止雪崩效应，因而产生了熔断器模型。 Hystrix 是在业界表现非常好的一个熔断器<br>模型实现的开源组件，它是 Spring Cloud 组件不可缺少的一部分。</p><h2 id="Hystrix的设计原则"><a href="#Hystrix的设计原则" class="headerlink" title="Hystrix的设计原则"></a>Hystrix的设计原则</h2><ol><li>防止单个服务的故障耗尽整个服务的 Servlet 容器（例如 Tomcat ）的线程资源。</li><li>快速失败机制，如果某个服务出现了故障，则调用该服务的请求快速失败，而不是线程等待。</li><li>提供回退（ fallback ）方案，在请求发生故障时，提供设定好的回退方案。</li><li>使用熔断机制，防止故障扩散到其他服务。</li><li>提供熔断器的监控组件 Hystrix Dashboard ，可以实时监控熔断器的状态。</li></ol><h2 id="RestTemplate-和-Ribbon上使用熔断器"><a href="#RestTemplate-和-Ribbon上使用熔断器" class="headerlink" title="RestTemplate 和 Ribbon上使用熔断器"></a>RestTemplate 和 Ribbon上使用熔断器</h2><h3 id="Hystrix配置"><a href="#Hystrix配置" class="headerlink" title="Hystrix配置"></a>Hystrix配置</h3><p>在上个项目基础上，修改eureka-ribbon-client配置文件：引入依赖：</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;       &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;       &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;&#x2F;artifactId&gt;   &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在启动类上添加@EnableHystrix注解开启Hystrix熔断功能。<br>修改RibbonService：</p><pre class="line-numbers language-none"><code class="language-none">import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;&#x2F;** * description: RibbonService * @author zwq * @date 2021&#x2F;10&#x2F;20 22:07 *&#x2F;@Servicepublic class RibbonService &#123;    @Autowired    RestTemplate restTemplate;    @HystrixCommand(fallbackMethod &#x3D; &quot;hiError&quot;)    public String hi(String name) &#123;        return restTemplate.getForObject(&quot;http:&#x2F;&#x2F;eureka-client&#x2F;hi?name&#x3D;&quot;+name,String.class);    &#125;    public String hiError(String name)&#123;        return &quot;hi,&quot;+name+&quot;,error&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加上@HystrixCommand 注解，hi方法就能启动Hystrix熔断器功能。<br>其中，fallbackMethod 为处理回退（ fallback ）逻辑的方法。</p><h3 id="启动服务，测试"><a href="#启动服务，测试" class="headerlink" title="启动服务，测试"></a>启动服务，测试</h3><p>依次启动eureka-server、eureka-client、eureka-ribbon-client。<br>访问<a href="http://localhost:8764/hi">http://localhost:8764/hi</a><br><img src="/2021/10/21/springcloud-4/hystrix1.png"><br>关闭eureka-client，可以看到：<br><img src="/2021/10/21/springcloud-4/hystrix2.png"><br>由此可见，当eureka-client不可用时，开启了熔断器，最后进入fallbackMethod。<br>这样的好处就是通过快速失败，请求能够得到及时处理，线程不在阻塞。</p><h2 id="Hystrix-Dashboard监控熔断状态"><a href="#Hystrix-Dashboard监控熔断状态" class="headerlink" title="Hystrix Dashboard监控熔断状态"></a>Hystrix Dashboard监控熔断状态</h2><p>Hystrix Dashboard 是监控 Hystrix 的熔断器状况的一个组件，提供了数据监控和友好的图形化展示界面</p><h3 id="新增依赖"><a href="#新增依赖" class="headerlink" title="新增依赖"></a>新增依赖</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--hy图形界面--&gt;      &lt;dependency&gt;          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;&#x2F;artifactId&gt;      &lt;&#x2F;dependency&gt;      &lt;!--hy图形界面--&gt;      &lt;dependency&gt;          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;spring-boot-starter-actuator&lt;&#x2F;artifactId&gt;      &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在启动类加上@EnableHystrixDashboard注解<br>依次启动eureka-server,eureka-client,eureka-ribbon-client服务。<br>访问：<a href="http://localhost:8764/hi">http://localhost:8764/hi</a><br>访问：<a href="http://localhost:8764/hystrix.stream">http://localhost:8764/hystrix.stream</a> ,查看熔断器数据指标。<br><img src="/2021/10/21/springcloud-4/hystrix3.png"><br>访问：<a href="http://localhost:8764/hystrix">http://localhost:8764/hystrix</a> ,然后在界面上填写<a href="http://localhost:8764/hystrix.stream">http://localhost:8764/hystrix.stream</a> 、2000、zwq(这个随意填)<br><img src="/2021/10/21/springcloud-4/hystrix4.png"><br>点击monitor，进入页面：<br><img src="/2021/10/21/springcloud-4/hystrix5.png"><br>该页面显示了熔断器的各种数据指标</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springcloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud-微服务-Ribbon</title>
      <link href="/2021/10/20/springcloud-3/"/>
      <url>/2021/10/20/springcloud-3/</url>
      
        <content type="html"><![CDATA[<h1 id="springcloud-微服务-Ribbon"><a href="#springcloud-微服务-Ribbon" class="headerlink" title="springcloud-微服务-Ribbon"></a>springcloud-微服务-Ribbon</h1><h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><p>RestTemplate是Spring Resources 的一个访问 RESTful API 接口的网络请求框架<br>RestTemplate 是用来消费 REST 服务的，所以 RestTemplate 主要方法都与 REST 的http协议的一些方法紧密相连<br>使用方法:</p><pre class="line-numbers language-none"><code class="language-none">@RestController public class RestTestController &#123; @GetMapping (&quot;&#x2F;testRest&quot;) public String testRest() &#123; RestTemplate restTemplate&#x3D;new RestTemplate() ; return restTemplate.getForObject(&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;,String.class);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RestTemplate 支持常见的 Http 协议的请求方法，例如 Post Put Delete ，所以RestTemplate 很容易构建 RESTful API<br>返回对象：</p><pre class="line-numbers language-none"><code class="language-none">User user &#x3D; restTemplate.getForObject(&quot;url&quot;,User.class);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Ribbon-简介"><a href="#Ribbon-简介" class="headerlink" title="Ribbon 简介"></a>Ribbon 简介</h2><p>负载均衡是指将负载分摊到多个执行单元上，常见的负载均衡有两种方式。一种是独立进<br>程单元，通过负载均衡策略，将请求转发到不同的执行单元上，例如 Nginx 。<br>另一种是将负载均衡逻辑以代码的形式封装到服务消费者的客户端上，服务消费者客户端维护了一份服务提供者的信息列表，有了信息列表，通过负载均衡策略将请求分摊给多个服务提供者，从而达到负载均衡的目的。比如ribbon。<br>Ribbon 是 Netflix 公司开源的一个负载均衡的组件。将负载均衡逻辑封装在客户端中，并且运行在客户端的进程里。Ribbon 是一个经过了云端测试的 IPC库，司以很好地控制 HTTP 和 TCP 客户端的负载均衡行为。<br>在Spring Cloud 构建的微服务系统中， Ribbon 作为服务消费者的负载均衡器，有两种使用方式，一种是和 RestTemplate 相结合，另一种是和 Feign 相结合。</p><p>Netflix 公司用于生产环境的 Ribbon子模块如下:</p><ul><li>ribbon-loadbalancer ：可以独立使用或与其他模块一起使用的负载均衡器 API</li><li>ribbon-eureka ：ribbon 结合 eureka 客户端的 API ，为负载均衡器提供动态服务注册列表信息。</li><li>ribbon-core: Ribbon 的核心 API</li></ul><h2 id="使用RestTemplate和Ribbon来消费服务"><a href="#使用RestTemplate和Ribbon来消费服务" class="headerlink" title="使用RestTemplate和Ribbon来消费服务"></a>使用RestTemplate和Ribbon来消费服务</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>使用上次springcloud-微服务-Eureka的项目，在eureka-client写一个API接口。</li><li>然后新建一个module：eureka-ribbon-client,将其作为服务消费者，通过RestTemplate调用eureka-client的接口。即消费服务。</li><li>修改eureka-client配置文件，启动两个eureka-client实例。</li><li>测试访问</li></ol><h3 id="编写eureka-client-API接口"><a href="#编写eureka-client-API接口" class="headerlink" title="编写eureka-client API接口"></a>编写eureka-client API接口</h3><p>创建controller包<br>编写测试接口:</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;&#x2F;** * description: 测试接口 * * @author zwq * @date 2021&#x2F;10&#x2F;20 15:42 *&#x2F;@RestControllerpublic class TestController &#123;    @Value(&quot;$&#123;server.port&#125;&quot;)    String port;    @GetMapping(&quot;&#x2F;hi&quot;)    public String home(@RequestParam String name) &#123;        return &quot;hi &quot;+name+&quot;,i am from port:&quot; +port;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建eureka-ribbon-client工程"><a href="#创建eureka-ribbon-client工程" class="headerlink" title="创建eureka-ribbon-client工程"></a>创建eureka-ribbon-client工程</h3><p>修改pom.xml:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.zwq&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;    &lt;&#x2F;parent&gt;    &lt;groupId&gt;com.zwq&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;eureka-ribbon-client&lt;&#x2F;artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;    &lt;name&gt;eureka-ribbon-client&lt;&#x2F;name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;            &lt;scope&gt;test&lt;&#x2F;scope&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;            &lt;&#x2F;plugin&gt;        &lt;&#x2F;plugins&gt;    &lt;&#x2F;build&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>修改application.yml:</p><pre class="line-numbers language-none"><code class="language-none">spring:  application:    name: eureka-ribbon-clientserver:  port: 8764eureka:  client:    serviceUrl:      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在启动类上加上@EnableEurekaClient,开启 EurekaClient 功能<br>&emsp;<br>接下来写一个API接口，调用eureka-client的接口，做到服务消费。不过eureka-client有两个实例，这里要做到负载均衡，轮流访问两个实例的API接口。<br>编写eureka-ribbon-client工程<br>首先创建config包，编写RibbonConfig：</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.client.RestTemplate;&#x2F;** * description: 配置类 * * @author zwq * @date 2021&#x2F;10&#x2F;20 22:04 *&#x2F;@Configurationpublic class RibbonConfig &#123;    @Bean    @LoadBalanced    RestTemplate resttemplate() &#123;        return new RestTemplate();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能将RestTemplate和ribbon相结合。<br>然后创建service包，编写RibbonService类：</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;&#x2F;** * description: RibbonService * @author zwq * @date 2021&#x2F;10&#x2F;20 22:07 *&#x2F;@Servicepublic class RibbonService &#123;    @Autowired    RestTemplate restTemplate;    public String hi(String name) &#123;        return restTemplate.getForObject(&quot;http:&#x2F;&#x2F;eureka-client&#x2F;hi?name&#x3D;&quot;+name,String.class);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>然后创建controller包,编写RibbonController接口：</p><pre class="line-numbers language-none"><code class="language-none">import com.zwq.eurekaribbonclient.service.RibbonService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cloud.client.ServiceInstance;import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;&#x2F;** * description: RibbonController * @author zwq * @date 2021&#x2F;10&#x2F;20 22:09 *&#x2F;@RestControllerpublic class RibbonController &#123;    @Autowired    RibbonService ribbonService;    @GetMapping(&quot;&#x2F;hi&quot;)    public String hi(@RequestParam(required &#x3D; false,defaultValue &#x3D; &quot;zwq&quot;) String name)&#123;        return ribbonService.hi(name);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><ol><li>启动两个eureka-client实例：</li></ol><ul><li>复制配置文件并重命名为bootstrap-2.yml，并且端口改为8763</li><li>点击edit configuration,右上角Allow parallel run打钩，VM options:-Dspring.config.location=classpath:/bootstrap.yml</li><li>启动第一个实例，然后更改VM options:-Dspring.config.location=classpath:/bootstrap-2.yml，启动第二个实例</li></ul><ol start="2"><li>启动eureka-server服务，查看主界面：<a href="http://localhost:8761/">http://localhost:8761</a> ,可以看到两个服务被注册。<br><img src="/2021/10/20/springcloud-3/ribbon1.png"></li><li>启动eureka-ribbon-client服务,刷新，可以看到三个服务被注册。<br><img src="/2021/10/20/springcloud-3/ribbon2.png"></li><li>多次访问<a href="http://localhost:8764/hi?name=zwq">http://localhost:8764/hi?name=zwq</a> ，可以发现负载均衡起了作用，会轮流访问两个eureka-client实例的接口：<br><img src="/2021/10/20/springcloud-3/ribbon3.png"></li></ol><h2 id="LoadBalancerClient"><a href="#LoadBalancerClient" class="headerlink" title="LoadBalancerClient"></a>LoadBalancerClient</h2><p>负载均衡器的核心类为 LoadBalancerClient, LoadBalancerCiient 可以获取负载均衡的服务提供者的实例信息。<br>演示：<br>在eureka-ribbon-client项目RibbonController类里面，添加接口：</p><pre class="line-numbers language-none"><code class="language-none">@Autowired   private LoadBalancerClient loadBalancer;   @GetMapping(&quot;&#x2F;testRibbon&quot;)   public String  testRibbon() &#123;       ServiceInstance instance &#x3D; loadBalancer.choose(&quot;eureka-client&quot;);       return instance.getHost()+&quot;:&quot;+instance.getPort();   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新启动项目，多次访问：<a href="http://localhost:8764/testRibbon,%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BD%AE%E6%B5%81%E6%98%BE%E7%A4%BAlocalhost:8762,localhost:8763">http://localhost:8764/testRibbon,浏览器轮流显示localhost:8762,localhost:8763</a><br>可见， LoadBalancerClient.choose(“eureka-client”)方法可以轮流得到 eureka-client 的两个服务实例的信息。</p><h2 id="负载均衡器怎么获取客户端的信息"><a href="#负载均衡器怎么获取客户端的信息" class="headerlink" title="负载均衡器怎么获取客户端的信息?"></a>负载均衡器怎么获取客户端的信息?</h2><p>负载均衡器LoadBalancerClient是从 Eureka Client 获取服务注册列表信息的，并将服务注册列表信息缓存了一份，<br>在LoadBalancerClient 调用 choose（）方法时，根据负载均衡策略选择一个服务实例的信息，从而进行了负载均衡，<br>LoadBalancerClient 也可以不从 Eureka Client 获取注册列表信息，这时需要自己维护一份服务注册列表信息。</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springcloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud-微服务-Eureka</title>
      <link href="/2021/10/19/springcloud-2/"/>
      <url>/2021/10/19/springcloud-2/</url>
      
        <content type="html"><![CDATA[<h1 id="springcloud-微服务-Eureka"><a href="#springcloud-微服务-Eureka" class="headerlink" title="springcloud-微服务-Eureka"></a>springcloud-微服务-Eureka</h1><h2 id="什么是-Eureka"><a href="#什么是-Eureka" class="headerlink" title="什么是 Eureka?"></a>什么是 Eureka?</h2><p>和Consul Zookeeper 类似，Eureka 是一个用于服务注册和发现的组件.</p><h2 id="Eureka-的一些概念"><a href="#Eureka-的一些概念" class="headerlink" title="Eureka 的一些概念"></a>Eureka 的一些概念</h2><ul><li>Register 一一服务注册<ul><li>当eureka Client 向Eureka Server 注册时 Eureka Client 提供自身的元数据，比如 IP 地址、端口、运行状况指标的 Uri 主页地址等信息。</li></ul></li><li>Renew一一服务续约<ul><li>Eureka client 在默认的情况下会每隔 30 秒发送一次心跳来进行服务续约。通过服务续约来告知 eureka Server该eureka Client 仍然可用，没有出现故障。</li></ul></li><li>Fetch Registries一一获取服务注册列表信息<ul><li>Eureka Client 从Eureka Server 获取服务注册表信息，井将其缓存在本地。 Eureka Client会使用服务注册列表信息查找其他服务的信息，从而进行远程调用。</li></ul></li><li>Cancel－一服务下线<ul><li>Eureka Client 在程序关闭时可以向 Eureka Server 发送下线请求,发送请求后，该客户端的实例信息将从 Eureka Server 的服务注册列表中删除。该下线请求不会自动完成，需要在程序关闭时调用以下代码：DiscoveryManager . getinstance() .shutdownComponent();</li></ul></li><li>Eviction一一服务剔除<ul><li>在默认情况下，当 Eureka Client 90 秒没有向 Eureka Server 发送服务续约（即心跳〉时， Eureka Server 会将该服务实例从服务注册列表删除，即服务剔除。</li></ul></li></ul><h2 id="为什么-Eureka-Client-获取服务实例这么慢"><a href="#为什么-Eureka-Client-获取服务实例这么慢" class="headerlink" title="为什么 Eureka Client 获取服务实例这么慢"></a>为什么 Eureka Client 获取服务实例这么慢</h2><ol><li>Eureka Client 注册延迟<br> Eureka Client 启动之后，不是立即向 Eureka Server 注册的，而是有一个延迟向服务端注册的时间。</li><li>Eureka Server 的响应缓存<br> Eureka Server 维护每 30 秒更新一次响应缓存，可通过更改配置 eureka.server.responseCacheUpdatelntervalMs 来修改。所以即使是刚刚注册的实例，也不会立即出现在服务注册列表中。</li><li>Eureka Client 缓存<br> Eureka Client 保留注册表信息的缓存。该缓存每 30 秒更新一次（如前所述）。因此， Eureka Client 刷新本地缓存并发现其他新注册的实例可能需要 30 秒。</li><li>LoadBalancer 缓存<br> Ribbon 的负载平衡器从本地的 Eureka Client 获取服务注册列表信息。 Ribbon 本身还维护了缓存，以避免每个请求都需要从 Eureka Client 获取服务注册列表</li></ol><p>综上因素，一个新注册的实例，默认延迟 40 秒向服务注册中心注册，所以不能马上被Eureka Server 发现。<br>另外，刚注册的 Eureka Client 不能立即被其他服务调用，原因是调用方由于各种缓存没有及时获取到最新的服务注册列表信息。</p><h2 id="springcloud为什么选择-Eureka"><a href="#springcloud为什么选择-Eureka" class="headerlink" title="springcloud为什么选择 Eureka?"></a>springcloud为什么选择 Eureka?</h2><p>首先 Eureka 完全开源，是 Netflix 公司的开源产品 ，经历了 Netflix 公司的生产环境的检验，以及3年时间的不断迭代，在功能和性能上都非常稳定<br>其次 Eureka Spring Cloud 首选推荐的服务注册与发现组件 Spring Cloud 其他组件可以无缝对接。<br>最后 Eureka 和其他组件，比如负载均衡组件 Ribbon 熔断器组件 Hystrix、熔断器聚合监控 Turbine 组件，以及网关 Zuul 组件相互配合,能够很容易实现服务注册、负载均衡、熔断和智能路由等功能</p><h2 id="Eureka-的基本架构"><a href="#Eureka-的基本架构" class="headerlink" title="Eureka 的基本架构"></a>Eureka 的基本架构</h2><p>Eureka 的基本架构主要包括以下3种角色:<br>Register Service ：服务注册中心，它是一个 Eureka Server ，提供服务注册和发现的功能。<br>Provider Service ：服务提供者，它是一个 Eureka Client ，提供服务。<br>Consumer Service ：服务消费者，它是一个 Eureka Cient ，消费服务。</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>采用 Maven Module 的结构，所以需要创建 Maven 主工程<br>项目结构：<br><img src="/2021/10/19/springcloud-2/eureka1.png"></p><h3 id="创建maven主工程"><a href="#创建maven主工程" class="headerlink" title="创建maven主工程"></a>创建maven主工程</h3><p>创建maven项目，删除src。修改pom.xml:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;groupId&gt;org.zwq&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.5.2.RELEASE&lt;&#x2F;version&gt;        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;    &lt;&#x2F;parent&gt;    &lt;properties&gt;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;        &lt;spring-cloud.version&gt;Dalston.SR1&lt;&#x2F;spring-cloud.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencyManagement&gt;        &lt;dependencies&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;                &lt;type&gt;pom&lt;&#x2F;type&gt;                &lt;scope&gt;import&lt;&#x2F;scope&gt;            &lt;&#x2F;dependency&gt;        &lt;&#x2F;dependencies&gt;    &lt;&#x2F;dependencyManagement&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建Eureka-srver"><a href="#创建Eureka-srver" class="headerlink" title="创建Eureka srver"></a>创建Eureka srver</h3><ol><li>在maven主工程里面创建一个 Module 工程，命名为eureka-server 。采用 Spring Initializr 方式构建,作为服务注册中心 Eureka srver 的工程。</li><li>修改pom.xml：<pre class="line-numbers language-none"><code class="language-none"> &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.zwq&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;        &lt;relativePath&#x2F;&gt;    &lt;&#x2F;parent&gt;    &lt;groupId&gt;com.zwq&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;eureka-server&lt;&#x2F;artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;    &lt;name&gt;eureka-server&lt;&#x2F;name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;            &lt;scope&gt;test&lt;&#x2F;scope&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;            &lt;&#x2F;plugin&gt;        &lt;&#x2F;plugins&gt;    &lt;&#x2F;build&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>配置application.yml:<pre class="line-numbers language-none"><code class="language-none">server:  port: 8761eureka:  instance:    hostname: localhost  client:    registerWithEureka: false    #防止注册自己    fetchRegistry: false    #防止注册自己    serviceUrl:      defaultZone: http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在启动类加上注解＠EnableEurekaServer,开启 Eureka Server 的功能.</li><li>启动项目访问<a href="http://localhost:8761/">http://localhost:8761</a>, 进入Eureka Server 主界面</li></ol><h3 id="创建Eureka-Client"><a href="#创建Eureka-Client" class="headerlink" title="创建Eureka Client"></a>创建Eureka Client</h3><ol><li>在maven主工程里面创建一个 Module 工程，命名为eureka-client 。采用 Spring Initializr 方式构建,作为Eureka Client</li><li>修改pom.xml:<pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.zwq&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;eureka&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;    &lt;&#x2F;parent&gt;    &lt;groupId&gt;com.zwq&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;eureka-client&lt;&#x2F;artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;    &lt;name&gt;eureka-client&lt;&#x2F;name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;    &lt;&#x2F;properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-eureka&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;            &lt;scope&gt;test&lt;&#x2F;scope&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;            &lt;&#x2F;plugin&gt;        &lt;&#x2F;plugins&gt;    &lt;&#x2F;build&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>修改配置文件为：bootstrap.yml：<pre class="line-numbers language-none"><code class="language-none">server:  port: 8762spring:  application:    name: eureka-clienteureka:  client:    serviceUrl:      defaultZone: http:&#x2F;&#x2F;localhost:8761&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在程序的启动类加上注解＠EnableEurekaClient,开启 Eureka Client 功能</li><li>启动两个项目，进入Eureka Server 主页，即：<a href="http://localhost:8761/">http://localhost:8761</a>:<br><img src="/2021/10/19/springcloud-2/eureka2.png"><br>说明 Eureka Client 己成功向 Eureka Server注册。</li></ol>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springcloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloud-微服务-1</title>
      <link href="/2021/10/18/springcloud-1/"/>
      <url>/2021/10/18/springcloud-1/</url>
      
        <content type="html"><![CDATA[<h1 id="springcloud-微服务-1"><a href="#springcloud-微服务-1" class="headerlink" title="springcloud-微服务-1"></a>springcloud-微服务-1</h1><h2 id="什么是微服务？"><a href="#什么是微服务？" class="headerlink" title="什么是微服务？"></a>什么是微服务？</h2><blockquote><p>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个服务提供单个业务功能的服务，一个服务做一件事，从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p></blockquote><h2 id="springcloud、springboot、微服务关系"><a href="#springcloud、springboot、微服务关系" class="headerlink" title="springcloud、springboot、微服务关系"></a>springcloud、springboot、微服务关系</h2><blockquote><p>与传统的spring mvc相比，通过springboot开发能够简化搭建框架的配置文件数量，从而提升系统的可维护性。在springboot里面，我们还能够更方便的引入springcloud的诸如安全和负载均衡方面的组件。<br>也可以说springboot是微服务的基础，在这个架构里，我们可以引入springcloud的诸多组件，从而搭建基于微服务的系统。</p></blockquote><h2 id="为什么需要微服务？"><a href="#为什么需要微服务？" class="headerlink" title="为什么需要微服务？"></a>为什么需要微服务？</h2><h3 id="单体架构存在的不足"><a href="#单体架构存在的不足" class="headerlink" title="单体架构存在的不足"></a>单体架构存在的不足</h3><blockquote><ol><li>业务越来越复杂，单体应用的代码量越来越大，代码的可读性，可维护性和可扩展性下降，新人接手代码所需的时间越来越大，业务扩展的难度也越来越大。</li><li>随着用户越来越多，程序所要承受的并发也越来越高，单体应用的并发能力有限。</li><li>测试难度很大，单体应用的业务都在同一个程序里面，随着业务扩张，复杂度增加，单体应用的修改业务可能会影响其他业务，导致测试难度增加。</li></ol></blockquote><h3 id="单体架构使用服务器集群的存在以及不足"><a href="#单体架构使用服务器集群的存在以及不足" class="headerlink" title="单体架构使用服务器集群的存在以及不足"></a>单体架构使用服务器集群的存在以及不足</h3><blockquote><p>使用集群的架构有一定的处理高并发的能力，也能应对一定复杂的业务需求，改善了系统的性能，但是依然没有改变系统为单体架构的事实，它存在的不足：</p><ol><li>系统仍为单体应用，大量的业务必然会有大量的代码，代码的可读性和可维护性依然很差。</li><li>持续交付能力差，业务越复杂，代码越多，修改代码时间长，新人熟悉代码时间长，成本高。</li></ol></blockquote><h3 id="微服务的优势"><a href="#微服务的优势" class="headerlink" title="微服务的优势"></a>微服务的优势</h3><blockquote><ol><li>将一个复杂的业务分解成若干小的业务，每个业务拆分成一个服务，服务的边界明确，将复杂的问题简单化。服务按照业务拆分，编码也按照业务拆分，代码可读性，可扩展性增加。新人加入团队，不需要了解所有业务代码，只需要了解他所接管的服务的代码。</li><li>由于微服务是分布式系统，服务与服务之间没有任何耦合。随着业务的增加，可以根据业务在拆分服务，具有极强的横向扩展能力。</li><li>服务于服务之间通过http网络通信协议来通信，单个微服务内部高度耦合，服务与服务之间完全独立，无耦合。所以开发者可以自由选择合适的业务场景或合适的适合自己的开发语言和技术，提高开发效率，降低开发成本。</li><li>微服务的每个服务单元都是独立部署，即微服务的修改和部署对其他服务没有影响。</li><li>微服务在CAP理论中采用AP架构，具有高可用和分区容错的特点，高可用主要体现在系统7*24小时不间断的服务，它要求系统有大量的服务器集群，从而提高了系统的负载能力，另外，分区容错也使得系统更加健壮。</li></ol></blockquote><h3 id="微服务的不足"><a href="#微服务的不足" class="headerlink" title="微服务的不足"></a>微服务的不足</h3><blockquote><ul><li>微服务的复杂度<ul><li>构建一个微服务系统是一件复杂的事，微服务系统是分布式系统，构建的复杂度远远超过单体系统，开发人员需要花时间掌握架构知识。</li></ul></li><li>分布式事务<ul><li>微服务架构所设计的系统是分布式系统，分布式系统有一个著名的CAP理论，即同时满足”一致性””可用性”和”分区容错”是一件不可能的事。<br><img src="/2021/10/18/springcloud-1/1.png" alt="CAP理论"></li><li>一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值，即写操作之后的读操作，必须返回该值。（分为弱一致性、强一致性和最终一致性）</li><li>可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</li><li>分区容忍性（P）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。<br>&emsp;</li><li>CAP三个特性只能满足其中两个，那么取舍的策略就共有三种：</li><li>CA without P：如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但放弃P的同时也就意味着放弃了系统的扩展性，也就是分布式节点受限，没办法部署子节点，这是违背分布式系统设计的初衷的。传统的关系型数据库RDBMS：Oracle、MySQL就是CA。</li><li>CP without A：如果不要求A（可用），相当于每个请求都需要在服务器之间保持强一致，而P（分区）会导致同步时间无限延长(也就是等待数据同步完才能正常访问服务)，一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统。设计成CP的系统其实不少，最典型的就是分布式数据库，如Redis、HBase等。对于这些分布式数据库来说，数据的一致性是最基本的要求，因为如果连这个标准都达不到，那么直接采用关系型数据库就好，没必要再浪费资源来部署分布式数据库。</li><li>AP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。典型的应用就如某米的抢购手机场景，可能前几秒你浏览商品的时候页面提示是有库存的，当你选择完商品准备下单的时候，系统提示你下单失败，商品已售完。这其实就是先在 A（可用性）方面保证系统可以正常的服务，然后在数据的一致性方面做了些牺牲，虽然多少会影响一些用户体验，但也不至于造成用户购物流程的严重阻塞。</li></ul></li><li>服务的划分<ul><li>将一个完整的系统拆分成多个服务，是一个非常困难的事，因为这涉及了具体的业务场景。</li></ul></li><li>服务的部署<ul><li>一个简单的单体系统可能只需要将程序集群部署并配置负载均衡即可，而部署一个复杂的微服务架构的系统就复杂的多。因为每一个微服务可能还涉及比较底层的组件，例如数据库，消息中间件等。</li></ul></li></ul></blockquote><h2 id="微服务与SOA的关系"><a href="#微服务与SOA的关系" class="headerlink" title="微服务与SOA的关系"></a>微服务与SOA的关系</h2><blockquote><p>SOA即面向服务的架构，这种架构在20年前就已经被提出。SOA实施思路是根据ESB模式来整合集成大量单一庞大的系统，这是SOA主要落地方式。然而，SOA并没有取得成功。<br>微服务相对于和ESB联系在一起的SOA显然轻便敏捷许多，微服务将复杂的业务组件化，实际也是一种面向服务思想的体现。对于微服务来说，它是SOA的一种实现，但是它比ESB实现的SOA更加轻便、敏捷、简单。</p></blockquote><h2 id="微服务应该具备的功能"><a href="#微服务应该具备的功能" class="headerlink" title="微服务应该具备的功能"></a>微服务应该具备的功能</h2><blockquote><ol><li>服务的注册和发现。</li><li>服务的负载均衡</li><li>服务的容错。</li><li>服务网关。</li><li>服务配置的统 管理。</li><li>链路追踪。</li><li>实时日志。</li></ol></blockquote><h2 id="springcloud简介"><a href="#springcloud简介" class="headerlink" title="springcloud简介"></a>springcloud简介</h2><blockquote><p>Spring Cloud 是基于 Spring Boot Spring Boot 是由 Pivotal 团队提供的全新 Web 架，<br>它主要的特点就是简化了开发和部署的过程，简化了 Spring 复杂的配置和依赖管理，通过起<br>步依赖和内置 Servi et 容器能够使开发者迅速搭 Web 工程。<br>Spring Cloud 提供了开发分布式微服务系统的一些常用组件，例如服务注册和<br>发现、配置中心、熔断器、 智能路由 、微代理、控制总线、全局锁、分布式会话等。</p></blockquote><h2 id="springcloud常用组件"><a href="#springcloud常用组件" class="headerlink" title="springcloud常用组件"></a>springcloud常用组件</h2><blockquote><ul><li><strong>服务注册和发现组件 Eureka</strong><ul><li>利用 Eureka 组件可以很轻松地实现服务的注册和发现的功能。 Eureka 组件提供了服务的健康监测，以及界面友好的 UI 。通过 Eureka 组件提供的 UI, Eureka 组件可以让开发人员随时了解服务单元的运行情况。</li></ul></li><li><strong>熔断组件 Hystrix</strong><ul><li>Hystrix 熔断组件，它除了一些基本的熔断器功能外，还能够实现服务降级、服务限流的功能。另外 Hystrix 提供了熔断器的健康监测，以及熔断器健康数据的 API接口。Hystrix Dashboard 组件提供了单个服务熔断器的健康状态数据的界面展示功能 HystrixTurbine 组件提供了多个服务的熔断器的健康状态数据的界面展示功能</li></ul></li><li><strong>负载均衡组件 Ribbon</strong><ul><li>Ribbon 个负载均衡组件，它通常和 Eureka Zuul RestTemplate Feign 配合使用。Ribbon Zuul配合，很容易做到负载均衡，将请求根据负载均衡策略分配到不同的服务实例中</li></ul></li><li><strong>路由网关 Zuul</strong><ul><li>路由网关 Zuul 有智能路由和过滤的功能。内部服务的 API 接口通过 Zuul 网关统 对外暴露，内部服务的 API 接口不直接暴露，防止了内部服务敏感信息对外暴露。Zuul和Ribbon 相结合，能够做到负载均衡 智能路由。 Zuul 过滤功能是通过拦截请求来实现的 可以些用户的角色和权限进行判断，起到安全验证的作用 同时也可以用于输出实时的请求曰志。</li></ul></li><li><strong>Spring Cloud Config</strong><ul><li>Spring Cloud Config 组件提供了配置文件统一管理的功能。 Spring Cloud Config Server端和 Client Server 端读取本地仓库或者远程仓库的配置文件，所有的 Client向Server读取配置信息，从而达到配置文件统一管理的目的。通常情况下， Spring Cloud Config 和SpringCloud Bus 互配合刷新指定 Client 或所有Client 配置文件。</li></ul></li><li><strong>Spring Cloud Security</strong><ul><li>Spring Cloud Security是对 Spring Security 组件的封装，Spring Cloud Security 向服务单元提供了用户验证和权限认证。一般它会配合 Spring Security OAuth2 组件一起使用，通过搭建授权服务，验证 Token或者 JWT 这种形式对整个微服务系统进行安全验证。</li></ul></li><li><strong>Spring Cloud Sleuth</strong><ul><li>Spring Cloud Sleuth 是一个分布式链路追踪组件，它封装了 Dapper Zipkin Kibana 等组件，通过它可以知道服务之间的相互依赖关系，并实时观察链路的调用情况</li></ul></li><li><strong>Spring Cloud Stream</strong><ul><li>Spring Cloud Stream 是Spring Cloud 框架的数据流操作包，，可以封装 RabbitMq ActiveMqKafka Redis 等消息组件，可以实现消息的接收和发送。</li></ul></li></ul><p>简单的由springcloud构建的微服务系统：<br><img src="/2021/10/18/springcloud-1/2.png" alt="简单的微服务系统"></p></blockquote><p>参考：深入理解spring cloud与微服务架构</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> springcloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java工具类</title>
      <link href="/2021/10/17/java-utils/"/>
      <url>/2021/10/17/java-utils/</url>
      
        <content type="html"><![CDATA[<h1 id="java工具类"><a href="#java工具类" class="headerlink" title="java工具类"></a>java工具类</h1><h3 id="生成不重复随机数列表"><a href="#生成不重复随机数列表" class="headerlink" title="生成不重复随机数列表"></a>生成不重复随机数列表</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;*取1-max（max可取到）amount:需要生成的个数，max:随机生成为1-max*&#x2F;   public static List&lt;Object&gt; random(int amount, int max) &#123;       if (amount &gt; max) &#123; &#x2F;&#x2F; 需要数字总数必须小于数的最大值，以免死循环！           throw new ArrayStoreException(                   &quot;The amount of array element must smallar than the maximum value !&quot;);       &#125;       int[] array &#x3D; new int[amount];       for (int i &#x3D; 0; i &lt; array.length; i++) &#123;           array[i] &#x3D; -1; &#x2F;&#x2F; 初始化数组，避免后面比对时数组内不能含有0。       &#125;       Random random &#x3D; new Random();       int num;       amount -&#x3D; 1; &#x2F;&#x2F; 数组下标比数组长度小1       while (amount &gt;&#x3D; 0) &#123;           num &#x3D; random.nextInt(max)+1;           if (exist(num, array, amount - 1)) &#123;               continue;           &#125;           array[amount] &#x3D; num;           amount--;       &#125;       List&lt;Object&gt; collect &#x3D; Arrays.stream(array).boxed().collect(Collectors.toList());       return collect;   &#125;   private static boolean exist(int num, int[] array, int need) &#123;       for (int i &#x3D; array.length - 1; i &gt; need; i--) &#123;&#x2F;&#x2F; 大于need用于减少循环次数，提高效率。           if (num &#x3D;&#x3D; array[i]) &#123;               return true;           &#125;       &#125;       return false;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;**    * 使用md5的算法进行加密    *&#x2F;   public static String md5(String plainText) &#123;       byte[] secretBytes &#x3D; null;       try &#123;           secretBytes &#x3D; MessageDigest.getInstance(&quot;md5&quot;).digest(                   plainText.getBytes());       &#125; catch (NoSuchAlgorithmException e) &#123;           throw new RuntimeException(&quot;没有md5这个算法！&quot;);       &#125;       String md5code &#x3D; new BigInteger(1, secretBytes).toString(16);&#x2F;&#x2F; &#x2F;&#x2F; 16进制数字       &#x2F;&#x2F; 如果生成数字未满32位，需要前面补0       for (int i &#x3D; 0; i &lt; 32 - md5code.length(); i++) &#123;           md5code &#x3D; &quot;0&quot; + md5code;       &#125;       return md5code;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="检查json对象里面是否包含一些属性"><a href="#检查json对象里面是否包含一些属性" class="headerlink" title="检查json对象里面是否包含一些属性"></a>检查json对象里面是否包含一些属性</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;**    * description: 检查json对象里面是否包含一些属性，并且不为null    * @author zwq    * @date 2021&#x2F;9&#x2F;26 16:27    * @param jsonObject 检查json对象    * @param strings 检查的属性    * @return boolean    *&#x2F;   public static boolean jsonObjectContains(JSONObject jsonObject,String... strings)&#123;       for(int i&#x3D;0;i&lt;strings.length;i++)&#123;           if(!jsonObject.containsKey(strings[i]))&#123;               return false;           &#125;           if(jsonObject.get(strings[i]) &#x3D;&#x3D; null)&#123;               return false;           &#125;       &#125;       return true;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="过滤对象属性"><a href="#过滤对象属性" class="headerlink" title="过滤对象属性"></a>过滤对象属性</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;**    * description: 过滤对象属性    * @author zwq    * @date 2021&#x2F;7&#x2F;11 9:25    * @param object 过滤对象    * @param excludeProperties 过滤的属性（字符串数组形式）    * @return java.lang.String 返回的是jsontext    *&#x2F;   public static String excludeProperty(Object object,String[] excludeProperties)&#123;       &#x2F;**        * 指定排除属性过滤器和包含属性过滤器        * 指定排除属性过滤器：转换成JSON字符串时，排除哪些属性        * 指定包含属性过滤器：转换成JSON字符串时，包含哪些属性        *&#x2F;       for (String s:excludeProperties)&#123;           System.out.println(s);       &#125;       PropertyPreFilters filters &#x3D; new PropertyPreFilters();       PropertyPreFilters.MySimplePropertyPreFilter excludefilter &#x3D; filters.addFilter();       excludefilter.addExcludes(excludeProperties);       return JSONObject.toJSONString(object,excludefilter);   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="判断字符串是否为数字"><a href="#判断字符串是否为数字" class="headerlink" title="判断字符串是否为数字"></a>判断字符串是否为数字</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;**    * description: 判断字符串是否为数字    * @author zwq    * @date 2021&#x2F;9&#x2F;8 22:02    * @param str    * @return boolean    *&#x2F;   public static boolean isNumeric(String str) &#123;       Pattern pattern &#x3D; Pattern.compile(&quot;[0-9]*&quot;);       Matcher isNum &#x3D; pattern.matcher(str);       if (isNum.matches()) &#123;           return true;       &#125; else &#123;           return false;       &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="判断字符串是否为日期格式"><a href="#判断字符串是否为日期格式" class="headerlink" title="判断字符串是否为日期格式"></a>判断字符串是否为日期格式</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;**    * description: 判断字符串是否为日期格式    * @author zwq    * @date 2021&#x2F;9&#x2F;8 22:02    * @param strDate    * @return boolean    *&#x2F;   public static boolean isDate(String strDate) &#123;       Pattern pattern &#x3D; Pattern               .compile(&quot;^((\\d&#123;2&#125;(([02468][048])|([13579][26]))[\\-\\&#x2F;\\s]?((((0?[13578])|(1[02]))[\\-\\&#x2F;\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\&#x2F;\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\&#x2F;\\s]?((0?[1-9])|([1-2][0-9])))))|(\\d&#123;2&#125;(([02468][1235679])|([13579][01345789]))[\\-\\&#x2F;\\s]?((((0?[13578])|(1[02]))[\\-\\&#x2F;\\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\\-\\&#x2F;\\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\\-\\&#x2F;\\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\\s(((0?[0-9])|([1-2][0-3]))\\:([0-5]?[0-9])((\\s)|(\\:([0-5]?[0-9])))))?$&quot;);       Matcher m &#x3D; pattern.matcher(strDate);       if (m.matches()) &#123;           return true;       &#125; else &#123;           return false;       &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="验证手机号-大陆号码"><a href="#验证手机号-大陆号码" class="headerlink" title="验证手机号(大陆号码)"></a>验证手机号(大陆号码)</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;**    * 大陆手机号码11位数，匹配格式：前三位固定格式+后8位任意数    * 此方法中前三位格式有：    * 13+任意数    * 145,147,149    * 15+除4的任意数(不要写^4，这样的话字母也会被认为是正确的)    * 166    * 17+3,5,6,7,8    * 18+任意数    * 198,199    * description: 验证大陆手机号    * @author zwq    * @date 2021&#x2F;9&#x2F;8 22:04    * @param str    * @return boolean    *&#x2F;   public static boolean isChinaPhoneLegal(String str) throws PatternSyntaxException &#123;       &#x2F;&#x2F; ^ 匹配输入字符串开始的位置       &#x2F;&#x2F; \d 匹配一个或多个数字，其中 \ 要转义，所以是 \\d       &#x2F;&#x2F; $ 匹配输入字符串结尾的位置       String regExp &#x3D; &quot;^((13[0-9])|(14[5,7,9])|(15[0-3,5-9])|(166)|(17[3,5,6,7,8])&quot; +               &quot;|(18[0-9])|(19[8,9]))\\d&#123;8&#125;$&quot;;       Pattern p &#x3D; Pattern.compile(regExp);       Matcher m &#x3D; p.matcher(str);       return m.matches();   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="验证手机号-香港"><a href="#验证手机号-香港" class="headerlink" title="验证手机号(香港)"></a>验证手机号(香港)</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;**    * 香港手机号码8位数，5|6|8|9开头+7位任意数    * description: 验证香港手机号    * @author zwq    * @date 2021&#x2F;9&#x2F;8 22:05    * @param str    * @return boolean    *&#x2F;   public static boolean isHKPhoneLegal(String str) throws PatternSyntaxException &#123;       &#x2F;&#x2F; ^ 匹配输入字符串开始的位置       &#x2F;&#x2F; \d 匹配一个或多个数字，其中 \ 要转义，所以是 \\d       &#x2F;&#x2F; $ 匹配输入字符串结尾的位置       String regExp &#x3D; &quot;^(5|6|8|9)\\d&#123;7&#125;$&quot;;       Pattern p &#x3D; Pattern.compile(regExp);       Matcher m &#x3D; p.matcher(str);       return m.matches();   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="验证身份证"><a href="#验证身份证" class="headerlink" title="验证身份证"></a>验证身份证</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;**    * description: 身份证有效验证    * @author zwq    * @date 2021&#x2F;9&#x2F;8 21:59    * @param IDStr 身份证号    * @return boolean    *&#x2F;   public static boolean IDCardValidate(String IDStr) throws ParseException &#123;       String[] ValCodeArr &#x3D; &#123; &quot;1&quot;, &quot;0&quot;, &quot;X&quot;, &quot;9&quot;, &quot;8&quot;, &quot;7&quot;, &quot;6&quot;, &quot;5&quot;, &quot;4&quot;, &quot;3&quot;, &quot;2&quot; &#125;;       String[] Wi &#x3D; &#123; &quot;7&quot;, &quot;9&quot;, &quot;10&quot;, &quot;5&quot;, &quot;8&quot;, &quot;4&quot;, &quot;2&quot;, &quot;1&quot;, &quot;6&quot;, &quot;3&quot;, &quot;7&quot;, &quot;9&quot;, &quot;10&quot;, &quot;5&quot;, &quot;8&quot;, &quot;4&quot;, &quot;2&quot; &#125;;       String Ai &#x3D; &quot;&quot;;       &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 号码的长度18位 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;       if (IDStr.length() !&#x3D; 18) &#123;           return false;       &#125;       &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 数字 除最后以为都为数字 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;       if (IDStr.length() &#x3D;&#x3D; 18) &#123;           Ai &#x3D; IDStr.substring(0, 17);       &#125;       if (isNumeric(Ai) &#x3D;&#x3D; false) &#123;           &#x2F;&#x2F;errorInfo &#x3D; &quot;身份证15位号码都应为数字 ; 18位号码除最后一位外，都应为数字。&quot;;           return false;       &#125;       &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 出生年月是否有效 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;       String strYear &#x3D; Ai.substring(6, 10);&#x2F;&#x2F; 年份       String strMonth &#x3D; Ai.substring(10, 12);&#x2F;&#x2F; 月份       String strDay &#x3D; Ai.substring(12, 14);&#x2F;&#x2F; 日       if (isDate(strYear + &quot;-&quot; + strMonth + &quot;-&quot; + strDay) &#x3D;&#x3D; false) &#123;&#x2F;&#x2F;errorInfo &#x3D; &quot;身份证生日无效。&quot;;           return false;       &#125;       GregorianCalendar gc &#x3D; new GregorianCalendar();       SimpleDateFormat s &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);       try &#123;           if ((gc.get(Calendar.YEAR) - Integer.parseInt(strYear)) &gt; 150 || (gc.getTime().getTime() - s.parse(strYear + &quot;-&quot; + strMonth + &quot;-&quot; + strDay).getTime()) &lt; 0) &#123;               &#x2F;&#x2F;errorInfo &#x3D; &quot;身份证生日不在有效范围。&quot;;               return false;           &#125;       &#125; catch (NumberFormatException e) &#123;           e.printStackTrace();       &#125; catch (java.text.ParseException e) &#123;           e.printStackTrace();       &#125;       if (Integer.parseInt(strMonth) &gt; 12 || Integer.parseInt(strMonth) &#x3D;&#x3D; 0) &#123;           &#x2F;&#x2F;errorInfo &#x3D; &quot;身份证月份无效&quot;;           return false;       &#125;       if (Integer.parseInt(strDay) &gt; 31 || Integer.parseInt(strDay) &#x3D;&#x3D; 0) &#123;           &#x2F;&#x2F;errorInfo &#x3D; &quot;身份证日期无效&quot;;           return false;       &#125;       &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 地区码时候有效 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;       Hashtable h &#x3D; GetAreaCode();       if (h.get(Ai.substring(0, 2)) &#x3D;&#x3D; null) &#123;           &#x2F;&#x2F;errorInfo &#x3D; &quot;身份证地区编码错误。&quot;;           return false;       &#125;       &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 判断最后一位的值 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;       int TotalmulAiWi &#x3D; 0;       for (int i &#x3D; 0; i &lt; 17; i++) &#123;           TotalmulAiWi &#x3D; TotalmulAiWi + Integer.parseInt(String.valueOf(Ai.charAt(i))) * Integer.parseInt(Wi[i]);       &#125;       int modValue &#x3D; TotalmulAiWi % 11;       String strVerifyCode &#x3D; ValCodeArr[modValue];       Ai &#x3D; Ai + strVerifyCode;       if (IDStr.length() &#x3D;&#x3D; 18) &#123;           if (Ai.equals(IDStr) &#x3D;&#x3D; false) &#123;               &#x2F;&#x2F;errorInfo &#x3D; &quot;身份证无效，不是合法的身份证号码&quot;;               return false;           &#125;       &#125; else &#123;           return true;       &#125;       return true;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * 验证邮箱 * * @param email * @return *&#x2F;public static boolean checkEmail(String email) &#123;String regex &#x3D; &quot;^\\w+[-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$ &quot;;return check(email, regex);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="list去重"><a href="#list去重" class="headerlink" title="list去重"></a>list去重</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;**     * description: list去重     * @author zwq     * @date 2021&#x2F;10&#x2F;1 23:51     * @param list     * @return java.util.List     *&#x2F;    public static List removeDuplicationByHashSet(List&lt;Integer&gt; list) &#123;        HashSet set &#x3D; new HashSet(list);        &#x2F;&#x2F;把List集合所有元素清空        list.clear();        &#x2F;&#x2F;把HashSet对象添加至List集合        list.addAll(set);        return list;        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="json转换工具"><a href="#json转换工具" class="headerlink" title="json转换工具"></a>json转换工具</h3><pre class="line-numbers language-none"><code class="language-none">import java.util.List; import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.JavaType;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper; &#x2F;** * json转换工具类 *&#x2F;public class JsonUtils &#123;     &#x2F;&#x2F; 定义jackson对象    private static final ObjectMapper MAPPER &#x3D; new ObjectMapper();     &#x2F;**     * 将对象转换成json字符串。     * &lt;p&gt;Title: pojoToJson&lt;&#x2F;p&gt;     * &lt;p&gt;Description: &lt;&#x2F;p&gt;     * @param data     * @return     *&#x2F;    public static String objectToJson(Object data) &#123;    try &#123;String string &#x3D; MAPPER.writeValueAsString(data);return string;&#125; catch (JsonProcessingException e) &#123;e.printStackTrace();&#125;    return null;    &#125;        &#x2F;**     * 将json结果集转化为对象     *      * @param jsonData json数据     * @param clazz 对象中的object类型     * @return     *&#x2F;    public static &lt;T&gt; T jsonToPojo(String jsonData, Class&lt;T&gt; beanType) &#123;        try &#123;            T t &#x3D; MAPPER.readValue(jsonData, beanType);            return t;        &#125; catch (Exception e) &#123;        e.printStackTrace();        &#125;        return null;    &#125;        &#x2F;**     * 将json数据转换成pojo对象list     * &lt;p&gt;Title: jsonToList&lt;&#x2F;p&gt;     * &lt;p&gt;Description: &lt;&#x2F;p&gt;     * @param jsonData     * @param beanType     * @return     *&#x2F;    public static &lt;T&gt;List&lt;T&gt; jsonToList(String jsonData, Class&lt;T&gt; beanType) &#123;    JavaType javaType &#x3D; MAPPER.getTypeFactory().constructParametricType(List.class, beanType);    try &#123;    List&lt;T&gt; list &#x3D; MAPPER.readValue(jsonData, javaType);    return list;&#125; catch (Exception e) &#123;e.printStackTrace();&#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="cookie的读写"><a href="#cookie的读写" class="headerlink" title="cookie的读写"></a>cookie的读写</h3><pre class="line-numbers language-none"><code class="language-none">import java.io.UnsupportedEncodingException;import java.net.URLDecoder;import java.net.URLEncoder; import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;  &#x2F;** *  * Cookie 工具类 * *&#x2F;public final class CookieUtils &#123;     &#x2F;**     * 得到Cookie的值, 不编码     *      * @param request     * @param cookieName     * @return     *&#x2F;    public static String getCookieValue(HttpServletRequest request, String cookieName) &#123;        return getCookieValue(request, cookieName, false);    &#125;     &#x2F;**     * 得到Cookie的值,     *      * @param request     * @param cookieName     * @return     *&#x2F;    public static String getCookieValue(HttpServletRequest request, String cookieName, boolean isDecoder) &#123;        Cookie[] cookieList &#x3D; request.getCookies();        if (cookieList &#x3D;&#x3D; null || cookieName &#x3D;&#x3D; null) &#123;            return null;        &#125;        String retValue &#x3D; null;        try &#123;            for (int i &#x3D; 0; i &lt; cookieList.length; i++) &#123;                if (cookieList[i].getName().equals(cookieName)) &#123;                    if (isDecoder) &#123;                        retValue &#x3D; URLDecoder.decode(cookieList[i].getValue(), &quot;UTF-8&quot;);                    &#125; else &#123;                        retValue &#x3D; cookieList[i].getValue();                    &#125;                    break;                &#125;            &#125;        &#125; catch (UnsupportedEncodingException e) &#123;            e.printStackTrace();        &#125;        return retValue;    &#125;     &#x2F;**     * 得到Cookie的值,     *      * @param request     * @param cookieName     * @return     *&#x2F;    public static String getCookieValue(HttpServletRequest request, String cookieName, String encodeString) &#123;        Cookie[] cookieList &#x3D; request.getCookies();        if (cookieList &#x3D;&#x3D; null || cookieName &#x3D;&#x3D; null) &#123;            return null;        &#125;        String retValue &#x3D; null;        try &#123;            for (int i &#x3D; 0; i &lt; cookieList.length; i++) &#123;                if (cookieList[i].getName().equals(cookieName)) &#123;                    retValue &#x3D; URLDecoder.decode(cookieList[i].getValue(), encodeString);                    break;                &#125;            &#125;        &#125; catch (UnsupportedEncodingException e) &#123;         e.printStackTrace();        &#125;        return retValue;    &#125;     &#x2F;**     * 设置Cookie的值 不设置生效时间默认浏览器关闭即失效,也不编码     *&#x2F;    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,            String cookieValue) &#123;        setCookie(request, response, cookieName, cookieValue, -1);    &#125;     &#x2F;**     * 设置Cookie的值 在指定时间内生效,但不编码     *&#x2F;    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,            String cookieValue, int cookieMaxage) &#123;        setCookie(request, response, cookieName, cookieValue, cookieMaxage, false);    &#125;     &#x2F;**     * 设置Cookie的值 不设置生效时间,但编码     *&#x2F;    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,            String cookieValue, boolean isEncode) &#123;        setCookie(request, response, cookieName, cookieValue, -1, isEncode);    &#125;     &#x2F;**     * 设置Cookie的值 在指定时间内生效, 编码参数     *&#x2F;    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,            String cookieValue, int cookieMaxage, boolean isEncode) &#123;        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, isEncode);    &#125;     &#x2F;**     * 设置Cookie的值 在指定时间内生效, 编码参数(指定编码)     *&#x2F;    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,            String cookieValue, int cookieMaxage, String encodeString) &#123;        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, encodeString);    &#125;     &#x2F;**     * 删除Cookie带cookie域名     *&#x2F;    public static void deleteCookie(HttpServletRequest request, HttpServletResponse response,            String cookieName) &#123;        doSetCookie(request, response, cookieName, &quot;&quot;, -1, false);    &#125;     &#x2F;**     * 设置Cookie的值，并使其在指定时间内生效     *      * @param cookieMaxage cookie生效的最大秒数     *&#x2F;    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,            String cookieName, String cookieValue, int cookieMaxage, boolean isEncode) &#123;        try &#123;            if (cookieValue &#x3D;&#x3D; null) &#123;                cookieValue &#x3D; &quot;&quot;;            &#125; else if (isEncode) &#123;                cookieValue &#x3D; URLEncoder.encode(cookieValue, &quot;utf-8&quot;);            &#125;            Cookie cookie &#x3D; new Cookie(cookieName, cookieValue);            if (cookieMaxage &gt; 0)                cookie.setMaxAge(cookieMaxage);            if (null !&#x3D; request) &#123;&#x2F;&#x2F; 设置域名的cookie            String domainName &#x3D; getDomainName(request);            System.out.println(domainName);                if (!&quot;localhost&quot;.equals(domainName)) &#123;                cookie.setDomain(domainName);                &#125;            &#125;            cookie.setPath(&quot;&#x2F;&quot;);            response.addCookie(cookie);        &#125; catch (Exception e) &#123;         e.printStackTrace();        &#125;    &#125;     &#x2F;**     * 设置Cookie的值，并使其在指定时间内生效     *      * @param cookieMaxage cookie生效的最大秒数     *&#x2F;    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,            String cookieName, String cookieValue, int cookieMaxage, String encodeString) &#123;        try &#123;            if (cookieValue &#x3D;&#x3D; null) &#123;                cookieValue &#x3D; &quot;&quot;;            &#125; else &#123;                cookieValue &#x3D; URLEncoder.encode(cookieValue, encodeString);            &#125;            Cookie cookie &#x3D; new Cookie(cookieName, cookieValue);            if (cookieMaxage &gt; 0)                cookie.setMaxAge(cookieMaxage);            if (null !&#x3D; request) &#123;&#x2F;&#x2F; 设置域名的cookie            String domainName &#x3D; getDomainName(request);            System.out.println(domainName);                if (!&quot;localhost&quot;.equals(domainName)) &#123;                cookie.setDomain(domainName);                &#125;            &#125;            cookie.setPath(&quot;&#x2F;&quot;);            response.addCookie(cookie);        &#125; catch (Exception e) &#123;         e.printStackTrace();        &#125;    &#125;     &#x2F;**     * 得到cookie的域名     *&#x2F;    private static final String getDomainName(HttpServletRequest request) &#123;        String domainName &#x3D; null;         String serverName &#x3D; request.getRequestURL().toString();        if (serverName &#x3D;&#x3D; null || serverName.equals(&quot;&quot;)) &#123;            domainName &#x3D; &quot;&quot;;        &#125; else &#123;            serverName &#x3D; serverName.toLowerCase();            serverName &#x3D; serverName.substring(7);            final int end &#x3D; serverName.indexOf(&quot;&#x2F;&quot;);            serverName &#x3D; serverName.substring(0, end);            final String[] domains &#x3D; serverName.split(&quot;\\.&quot;);            int len &#x3D; domains.length;            if (len &gt; 3) &#123;                &#x2F;&#x2F; www.xxx.com.cn                domainName &#x3D; &quot;.&quot; + domains[len - 3] + &quot;.&quot; + domains[len - 2] + &quot;.&quot; + domains[len - 1];            &#125; else if (len &lt;&#x3D; 3 &amp;&amp; len &gt; 1) &#123;                &#x2F;&#x2F; xxx.com or xxx.cn                domainName &#x3D; &quot;.&quot; + domains[len - 2] + &quot;.&quot; + domains[len - 1];            &#125; else &#123;                domainName &#x3D; serverName;            &#125;        &#125;         if (domainName !&#x3D; null &amp;&amp; domainName.indexOf(&quot;:&quot;) &gt; 0) &#123;            String[] ary &#x3D; domainName.split(&quot;\\:&quot;);            domainName &#x3D; ary[0];        &#125;        return domainName;    &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="获取异常的堆栈信息"><a href="#获取异常的堆栈信息" class="headerlink" title="获取异常的堆栈信息"></a>获取异常的堆栈信息</h3><pre class="line-numbers language-none"><code class="language-none">import java.io.PrintWriter;import java.io.StringWriter; public class ExceptionUtil &#123; &#x2F;** * 获取异常的堆栈信息 *  * @param t * @return *&#x2F;public static String getStackTrace(Throwable t) &#123;StringWriter sw &#x3D; new StringWriter();PrintWriter pw &#x3D; new PrintWriter(sw); try &#123;t.printStackTrace(pw);return sw.toString();&#125; finally &#123;pw.close();&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;</p><h3 id="各种id生成策略"><a href="#各种id生成策略" class="headerlink" title="各种id生成策略"></a>各种id生成策略</h3><pre class="line-numbers language-none"><code class="language-none">import java.util.Random; &#x2F;** * 各种id生成策略 * &lt;p&gt;Title: IDUtils&lt;&#x2F;p&gt; * &lt;p&gt;Description: &lt;&#x2F;p&gt; * @date2015年7月22日下午2:32:10 * @version 1.0 *&#x2F;public class IDUtils &#123; &#x2F;** * 图片名生成 *&#x2F;public static String genImageName() &#123;&#x2F;&#x2F;取当前时间的长整形值包含毫秒long millis &#x3D; System.currentTimeMillis();&#x2F;&#x2F;long millis &#x3D; System.nanoTime();&#x2F;&#x2F;加上三位随机数Random random &#x3D; new Random();int end3 &#x3D; random.nextInt(999);&#x2F;&#x2F;如果不足三位前面补0String str &#x3D; millis + String.format(&quot;%03d&quot;, end3);return str;&#125;&#x2F;** * 商品id生成 *&#x2F;public static long genItemId() &#123;&#x2F;&#x2F;取当前时间的长整形值包含毫秒long millis &#x3D; System.currentTimeMillis();&#x2F;&#x2F;long millis &#x3D; System.nanoTime();&#x2F;&#x2F;加上两位随机数Random random &#x3D; new Random();int end2 &#x3D; random.nextInt(99);&#x2F;&#x2F;如果不足两位前面补0String str &#x3D; millis + String.format(&quot;%02d&quot;, end2);long id &#x3D; new Long(str);return id;&#125;public static void main(String[] args) &#123;for(int i&#x3D;0;i&lt; 100;i++)System.out.println(genItemId());&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8内存结构</title>
      <link href="/2021/10/16/java-jvm/"/>
      <url>/2021/10/16/java-jvm/</url>
      
        <content type="html"><![CDATA[<h1 id="java8内存结构"><a href="#java8内存结构" class="headerlink" title="java8内存结构"></a>java8内存结构</h1><h2 id="java8内存结构图"><a href="#java8内存结构图" class="headerlink" title="java8内存结构图"></a>java8内存结构图</h2><blockquote><p><img src="/2021/10/16/java-jvm/jvm1.png" alt="内存结构"></p></blockquote><h2 id="虚拟机内存与本地内存的区别"><a href="#虚拟机内存与本地内存的区别" class="headerlink" title="虚拟机内存与本地内存的区别?"></a>虚拟机内存与本地内存的区别?</h2><blockquote><p>Java虚拟机在执行的时候会把管理的内存分配成不同的区域，这些区域被称为虚拟机内存，<br>同时，对于虚拟机没有直接管理的物理内存，也有一定的利用，我们称它为本地内存。</p></blockquote><h3 id="jvm内存"><a href="#jvm内存" class="headerlink" title="jvm内存"></a>jvm内存</h3><blockquote><p>受虚拟机内存大小的参数控制，当大小超过参数设置的大小时就会报OOM</p></blockquote><h3 id="本地内存"><a href="#本地内存" class="headerlink" title="本地内存"></a>本地内存</h3><blockquote><p>本地内存不受虚拟机内存参数的限制，只受物理内存容量的限制<br>虽然不受参数的限制，但是如果内存的占用超出物理内存的大小，同样也会报OOM</p></blockquote><h2 id="java运行时数据区域"><a href="#java运行时数据区域" class="headerlink" title="java运行时数据区域"></a>java运行时数据区域</h2><h3 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h3><blockquote><p>程序计数器就是当前线程所执行的字节码的行号指示器，通过改变计数器的值，来选取下一行指令，通过他来实现跳转、循环、恢复线程等功能。<br>在任何时刻，一个处理器内核只能运行一个线程，多线程是通过线程轮流切换，分配时间来完成的，这就需要有一个标志来记住每个线程执行到了哪里，这里便需要到了程序计数器。<br>所以，程序计数器是线程私有的，每个线程都已自己的程序计数器。</p></blockquote><h3 id="虚拟机栈（JVM-Stacks）"><a href="#虚拟机栈（JVM-Stacks）" class="headerlink" title="虚拟机栈（JVM Stacks）"></a>虚拟机栈（JVM Stacks）</h3><blockquote><p><img src="/2021/10/16/java-jvm/jvm2.png"><br>虚拟机栈是线程私有的，随线程生灭。虚拟机栈描述的是线程中的方法的内存模型：<br>每个方法被执行的时候，都会在虚拟机栈中同步创建一个栈帧（stack frame）。<br>每个栈帧的包含如下的内容:</p><ul><li>局部变量表<ul><li>局部变量表中存储着方法里的java基本数据类型（byte/boolean/char/int/long/double/float/short）以及对象的引用（注：这里的基本数据类型指的是方法内的局部变量）</li></ul></li><li>操作数栈</li><li>动态连接</li><li>方法返回地址</li><li>方法被执行时入栈，执行完后出栈<br>虚拟机栈可能会抛出两种异常：</li><li>如果线程请求的栈深度大于虚拟机所规定的栈深度，则会抛出StackOverFlowError即栈溢出</li><li>如果虚拟机的栈容量可以动态扩展，那么当虚拟机栈申请不到内存时会抛出OutOfMemoryError即OOM内存溢出</li></ul></blockquote><h3 id="本地方法栈（Native-Method-Stacks）"><a href="#本地方法栈（Native-Method-Stacks）" class="headerlink" title="本地方法栈（Native Method Stacks）"></a>本地方法栈（Native Method Stacks）</h3><blockquote><p>本地方法栈与虚拟机栈的作用是相似的,都会抛出OutOfMemoryError和StackOverFlowError，都是线程私有的，主要的区别在于：</p><ul><li>虚拟机栈执行的是java方法</li><li>本地方法栈执行的是native方法(什么是Native方法？)</li></ul></blockquote><h3 id="Java堆（Java-Heap）"><a href="#Java堆（Java-Heap）" class="headerlink" title="Java堆（Java Heap）"></a>Java堆（Java Heap）</h3><blockquote><p>java堆是JVM内存中最大的一块，由所有线程共享,是由垃圾收集器管理的内存区域，主要存放对象实例，当然由于java虚拟机的发展，堆中也多了许多东西，现在主要有：</p><ul><li>对象实例<ul><li>类初始化生成的对象</li><li>基本数据类型的数组也是对象实例</li></ul></li><li>字符串常量池<ul><li>字符串常量池原本存放于方法区，jdk7开始放置于堆中。</li><li>字符串常量池存储的是string对象的直接引用，而不是直接存放的对象，是一张string table</li></ul></li><li>静态变量<ul><li>静态变量是有static修饰的变量，jdk7时从方法区迁移至堆中</li></ul></li><li>线程分配缓冲区（Thread Local Allocation Buffer）<ul><li>线程私有，但是不影响java堆的共性</li><li>增加线程分配缓冲区是为了提升对象分配时的效率<br>java堆既可以是固定大小的，也可以是可扩展的（通过参数-Xmx和-Xms设定），如果堆无法扩展或者无法分配内存时也会报OOM。</li></ul></li></ul></blockquote><h3 id="方法区-Method-Area"><a href="#方法区-Method-Area" class="headerlink" title="方法区(Method Area)"></a>方法区(Method Area)</h3><blockquote><p>方法区是所有线程共享的内存，在java8以前是放在JVM内存中的，由永久代实现，受JVM内存大小参数的限制，<br>在java8中移除了永久代的内容，方法区由元空间(Meta Space)实现，并直接放到了本地内存中，不受JVM参数的限制<br>（当然，如果物理内存被占满了，方法区也会报OOM），并且将原来放在方法区的字符串常量池和静态变量都转移到了Java堆中，<br>方法区与其他区域不同的地方在于，方法区在编译期间和类加载完成后的内容有少许不同，不过总的来说分为这两部分：</p><ul><li>类元信息（Klass）<ul><li>类元信息在类编译期间放入方法区，里面放置了类的基本信息，包括类的版本、字段、方法、接口以及常量池表（Constant Pool Table）</li><li>常量池表（Constant Pool Table）存储了类在编译期间生成的字面量、符号引用(什么是字面量？什么是符号引用？)，这些信息在类加载完后会被解析到运行时常量池中</li></ul></li><li>运行时常量池（Runtime Constant Pool）<ul><li>运行时常量池主要存放在类加载后被解析的字面量与符号引用，但不止这些</li><li>运行时常量池具备动态性，可以添加数据，比较多的使用就是String类的intern()方法</li></ul></li></ul></blockquote><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><blockquote><p>直接内存位于本地内存，不属于JVM内存，但是也会在物理内存耗尽的时候报OOM<br>在jdk1.4中加入了NIO（New Input/Putput）类，引入了一种基于通道（channel）与缓冲区（buffer）的新IO方式，它可以使用native函数直接分配堆外内存，然后通过存储在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，这样可以在一些场景下大大提高IO性能，避免了在java堆和native堆来回复制数据。</p></blockquote><h2 id="常见问题？"><a href="#常见问题？" class="headerlink" title="常见问题？"></a>常见问题？</h2><h3 id="什么是Native方法？"><a href="#什么是Native方法？" class="headerlink" title="什么是Native方法？"></a>什么是Native方法？</h3><blockquote><p>由于java是一门高级语言，离硬件底层比较远，有时候无法操作底层的资源，于是，java添加了native关键字，被native关键字修饰的方法可以用其他语言重写，这样，我们就可以写一个本地方法，然后用C语言重写，这样来操作底层资源。当然，使用了native方法会导致系统的可移植性不高，这是需要注意的。</p></blockquote><h3 id="成员变量、局部变量、类变量分别存储在内存的什么地方？"><a href="#成员变量、局部变量、类变量分别存储在内存的什么地方？" class="headerlink" title="成员变量、局部变量、类变量分别存储在内存的什么地方？"></a>成员变量、局部变量、类变量分别存储在内存的什么地方？</h3><blockquote><ul><li>类变量<ul><li>类变量是用static修饰符修饰，定义在方法外的变量，随着java进程产生和销毁</li><li>在java8之前把静态变量存放于方法区，在java8时存放在堆中</li></ul></li><li>成员变量<ul><li>成员变量是定义在类中，随着类的实例产生和销毁，是类实例的一部分</li><li>由于是实例的一部分，在类初始化的时候，从运行时常量池取出直接引用或者值，与初始化的对象一起放入堆中</li></ul></li><li>局部变量<ul><li>局部变量是定义在类的方法中的变量</li><li>在所在方法被调用时放入虚拟机栈的栈帧中，方法执行结束后从虚拟机栈中弹出，所以存放在虚拟机栈中</li></ul></li></ul></blockquote><h3 id="final修饰的常量存放在哪里？"><a href="#final修饰的常量存放在哪里？" class="headerlink" title="final修饰的常量存放在哪里？"></a>final修饰的常量存放在哪里？</h3><blockquote><p>final修饰与不修饰不影响内存所处位置。</p></blockquote><h3 id="类常量池、运行时常量池、字符串常量池有什么关系？有什么区别？"><a href="#类常量池、运行时常量池、字符串常量池有什么关系？有什么区别？" class="headerlink" title="类常量池、运行时常量池、字符串常量池有什么关系？有什么区别？"></a>类常量池、运行时常量池、字符串常量池有什么关系？有什么区别？</h3><blockquote><p>类常量池与运行时常量池都存储在方法区，而字符串常量池在jdk7时就已经从方法区迁移到了java堆中。<br>在类编译过程中，会把类元信息放到方法区，类元信息的其中一部分便是类常量池，主要存放字面量和符号引用，而字面量的一部分便是文本字符，在类加载时将字面量和符号引用解析为直接引用存储在运行时常量池；<br>对于文本字符来说，它们会在解析时查找字符串常量池，查出这个文本字符对应的字符串对象的直接引用，将直接引用存储在运行时常量池</p></blockquote><h3 id="什么是字面量？什么是符号引用？"><a href="#什么是字面量？什么是符号引用？" class="headerlink" title="什么是字面量？什么是符号引用？"></a>什么是字面量？什么是符号引用？</h3><blockquote><ul><li>字面量<ul><li>java代码在编译过程中是无法构建引用的，字面量就是在编译时对于数据的一种表示:<pre class="line-numbers language-none"><code class="language-none">int a&#x3D;1;&#x2F;&#x2F;这个1便是字面量String b&#x3D;&quot;iloveu&quot;;&#x2F;&#x2F;iloveu便是字面量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li>符号引用<ul><li>由于在编译过程中并不知道每个类的地址，因为可能这个类还没有加载，所以如果你在一个类中引用了另一个类，那么你完全无法知道他的内存地址，那怎么办，我们只能用他的类名作为符号引用，在类加载完后用这个符号引用去获取他的内存地址。</li><li>例子：我在com.demo.Solution类中引用了com.test.Quest，那么我会把com.test.Quest作为符号引用存到类常量池，等类加载完后，拿着这个引用去方法区找这个类的内存地址。</li></ul></li></ul></blockquote><h2 id="实例分析："><a href="#实例分析：" class="headerlink" title="实例分析："></a>实例分析：</h2><blockquote><pre class="line-numbers language-none"><code class="language-none">class BirthDate &#123;         private int day;         private int month;         private int year;             public BirthDate(int d, int m, int y) &#123;             day &#x3D; d;              month &#x3D; m;              year &#x3D; y;         &#125;         省略get,set方法………     &#125;          public class Test&#123;         public static void main(String args[])&#123;              int date &#x3D; 9;              Test test &#x3D; new Test();                    test.change(date);               BirthDate d1&#x3D; new BirthDate(7,7,1970);                &#125;                public void change(int i)&#123;             i &#x3D; 1234;         &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于以上这段代码，date为局部变量，i,d,m,y都是形参为局部变量，day，month，year为成员变量。下面分析一下代码执行时候的变化：</p><ol><li>main方法开始执行：int date = 9;date局部变量，基础类型，引用和值都存在栈中。</li><li>Test test = new Test();test为对象引用，存在栈中，对象(new Test())存在堆中。</li><li>test.change(date);调用change(int i)方法，i为局部变量，引用和值存在栈中。当方法change执行完成后，i就会从栈中消失。</li><li>BirthDate d1= new BirthDate(7,7,1970);调用BIrthDate类的构造函数生成对象。d1为对象引用，存在栈中；对象(new BirthDate())存在堆中；其中d,m,y为局部变量存储在栈中，且它们的类型为基础类型，因此它们的数据也存储在栈中；day,month,year为BirthDate对象的的成员变量，它们存储在堆中存储的new BirthDate()对象里面；当BirthDate构造方法执行完之后，d,m,y将从栈中消失。</li><li>main方法执行完之后。date变量，test，d1引用将从栈中消失；new Test(),new BirthDate()将等待垃圾回收器进行回收。<br><img src="/2021/10/16/java-jvm/jvm3.png"><br>例子参考：<a href="https://blog.csdn.net/ghost_Programmer/article/details/40891735">https://blog.csdn.net/ghost_Programmer/article/details/40891735</a></li></ol></blockquote><h3 id><a href="#" class="headerlink" title></a></h3><p>参考：Java技术迷微信公众号</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot注解篇</title>
      <link href="/2021/10/15/springboot-note/"/>
      <url>/2021/10/15/springboot-note/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot注解篇"><a href="#springboot注解篇" class="headerlink" title="springboot注解篇"></a>springboot注解篇</h1><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><blockquote><p>@Configuration、@EnableAutoConfiguration、@ComponentScan 注解的集合</p></blockquote><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><blockquote><p>启用 SpringBoot 的自动配置机制</p></blockquote><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><blockquote><p>扫描被@Component (@Service,@Controller)注解的 bean，注解默认会扫描该类所在的包下所有的类</p></blockquote><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><blockquote><p>允许在 Spring 上下文中注册额外的 bean 或导入其他配置类</p></blockquote><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><blockquote><p>通用的注解，可标注任意类为 Spring 组件。如果一个 Bean 不知道属于哪个层，可以使用@Component 注解标注。</p></blockquote><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><blockquote><p>对应持久层即 Dao 层，主要用于数据库相关操作。</p></blockquote><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><blockquote><p>对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。</p></blockquote><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><blockquote><p>对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面</p></blockquote><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><blockquote><p>@Controller和@ResponseBody的合集,表示这是个控制器 bean,并且是将函数的返回值直 接填入 HTTP 响应体中,是 REST 风格的控制器<br>单独使用 @Controller 的话一般使用在要返回一个视图的情况，这种情况属于比较传统的 Spring MVC 的应用，对应于前后端不分离的情况</p></blockquote><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><blockquote><p>声明 Spring Bean 的作用域，使用方法:</p><pre class="line-numbers language-none"><code class="language-none">@Bean@Scope(&quot;singleton&quot;)public Person personSingleton() &#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四种常见的 Spring Bean 的作用域：<br>singleton : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。<br>prototype : 每次请求都会创建一个新的 bean 实例。<br>request : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。<br>session : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。</p></blockquote><h2 id="PathVariable、-RequestParam"><a href="#PathVariable、-RequestParam" class="headerlink" title="@PathVariable、@RequestParam"></a>@PathVariable、@RequestParam</h2><blockquote><p>@PathVariable用于获取路径参数，@RequestParam用于获取查询参数,举例：</p><pre class="line-numbers language-none"><code class="language-none">public List&lt;Teacher&gt; getKlassRelatedTeachers(        @PathVariable(&quot;klassId&quot;) Long klassId,        @RequestParam(value &#x3D; &quot;type&quot;, required &#x3D; false) String type )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="SpringBoot开启事务的支持"><a href="#SpringBoot开启事务的支持" class="headerlink" title="SpringBoot开启事务的支持"></a>SpringBoot开启事务的支持</h2><blockquote><ol><li>在main方法加上@EnableTransactionManagement注解：<pre class="line-numbers language-none"><code class="language-none">@SpringBootApplication@EnableTransactionManagement&#x2F;&#x2F;开启事物的管理支持public class Application &#123;   public static void main(String[] args) &#123;       SpringApplication.run(Application.class, args);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在需要管理的方法上加上@Transactional注解：一般用在插入或者更新等方法上<pre class="line-numbers language-none"><code class="language-none">@Servicepublic class DriverServiceImpl implements DriverService &#123;   @Autowired   private DMMapper dmMapper;   @Override   @Transactional  &#x2F;&#x2F;事物管理的方法，如果这个方法抛出异常，事务就会回滚   public DM getDMById(Integer id) &#123;       return dmMapper.selectById(id);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><blockquote><p>body 部分并且Content-Type 为 application/json 格式的数据，接收到数据之后会自动将数据绑定到 Java 对象上<br>系统会使用HttpMessageConverter或者自定义的HttpMessageConverter将请求的 body 中的 json 字符串转换为 java 对象。</p></blockquote><h2 id="value、-ConfigurationProperties"><a href="#value、-ConfigurationProperties" class="headerlink" title="@value、@ConfigurationProperties"></a>@value、@ConfigurationProperties</h2><blockquote><ol><li>使用 @Value(“${property}”) 读取比较简单的配置信息：<pre class="line-numbers language-none"><code class="language-none">@Value(&quot;$&#123;wuhan2020&#125;&quot;)String wuhan2020;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>通过@ConfigurationProperties读取配置信息并与 bean 绑定:<pre class="line-numbers language-none"><code class="language-none">配置文件：library: location: 湖北武汉加油中国加油 books:   - name: 你的名字    description: 描述读取：@Component@ConfigurationProperties(prefix &#x3D; &quot;library&quot;)class LibraryProperties &#123;   @NotEmpty   private String location;   private List&lt;Book&gt; books;   @Setter   @Getter   @ToString   static class Book &#123;       String name;       String description;   &#125; 省略getter&#x2F;setter ......&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><h3 id="NotNull"><a href="#NotNull" class="headerlink" title="@NotNull"></a>@NotNull</h3><blockquote><pre class="line-numbers language-none"><code class="language-none">@NotNull(message &#x3D; &quot;classId 不能为空&quot;)   private String classId;   @Size(max &#x3D; 33)   @NotNull(message &#x3D; &quot;name 不能为空&quot;)private String name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="Valid"><a href="#Valid" class="headerlink" title="@Valid"></a>@Valid</h3><blockquote><pre class="line-numbers language-none"><code class="language-none">@PostMapping(&quot;&#x2F;person&quot;)   public ResponseEntity&lt;Person&gt; getPerson(@RequestBody @Valid Person person) &#123;       return ResponseEntity.ok().body(person);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在类上加上 Validated 注解，这个参数可以告诉 Spring 去校验方法参数</p></blockquote><h2 id="全局处理-Controller-层异常"><a href="#全局处理-Controller-层异常" class="headerlink" title="全局处理 Controller 层异常"></a>全局处理 Controller 层异常</h2><blockquote><p>@ControllerAdvice :注解定义全局异常处理类<br>@ExceptionHandler :注解声明异常处理方法<br>举例：</p><pre class="line-numbers language-none"><code class="language-none">@ControllerAdvice@ResponseBodypublic class GlobalExceptionHandler &#123;   &#x2F;**    * 请求参数异常处理    *&#x2F;   @ExceptionHandler(MethodArgumentNotValidException.class)public ResponseEntity&lt;?&gt; handleMethodArgumentNotValidException(MethodArgumentNotValidException ex, HttpServletRequest request) &#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><blockquote><p>@Entity 声明一个类对应一个数据库实体。<br>@Table 设置表明<br>@Id 声明一个字段为主键<br>@GeneratedValue 指定主键生成策略<br>四种常见的主键生成策略<br>1.TABLE, 使用一个特定的数据库表格来保存主键<br>2.SEQUENCE,某些数据库中,不支持主键自增长,比如Oracle、PostgreSQL其提供了一种叫做”序列(sequence)”的机制生成主键<br>3.IDENTITY,主键自增长<br>4.AUTO把主键生成策略交给持久化引擎(persistence engine)（默认auto）<br>&emsp;<br>@Column(name = “user_name”, nullable = false, length=32)<br>设置属性 userName 对应的数据库字段名为 user_name，长度为 32，非空<br>&emsp;<br>@Transient 声明不需要与数据库映射的字段，在保存的时候不需要保存进数据库</p></blockquote><h2 id="json数据处理"><a href="#json数据处理" class="headerlink" title="json数据处理"></a>json数据处理</h2><blockquote><p>@JsonIgnoreProperties 作用在类上用于过滤掉特定字段不返回或者不解析<br>举例：</p><pre class="line-numbers language-none"><code class="language-none">@JsonIgnoreProperties(&#123;&quot;userRoles&quot;&#125;public class User &#123;   private String userName;   private String fullName;   private String password;   @JsonIgnoreprivate List&lt;UserRole&gt; userRoles &#x3D; new ArrayList&lt;&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>@JsonFormat一般用来格式化 json 数据<br>举例：</p><pre class="line-numbers language-none"><code class="language-none">@JsonFormat(shape&#x3D;JsonFormat.Shape.STRING, pattern&#x3D;&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&quot;, timezone&#x3D;&quot;GMT&quot;)private Date date;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;<br>@JsonUnwrapped 扁平对象</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库范式设计</title>
      <link href="/2021/10/15/sql-nf/"/>
      <url>/2021/10/15/sql-nf/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库范式设计"><a href="#数据库范式设计" class="headerlink" title="数据库范式设计"></a>数据库范式设计</h1><h2 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h2><blockquote><p>确保每列保持原子性<br>举例：<br>地址这个属性可以分出为省份和城市，那么地址和省份就不能共同存在，需要分出来。</p></blockquote><h2 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h2><blockquote><p>确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关(主要针对联合主键而言)<br>举例:<br><img src="/2021/10/15/sql-nf/sql-nf1.png"><br>订单金额和订单时间仅与“订单号”相关，与“产品号”无关，不满足2nf<br>更改：（分出来）<br><img src="/2021/10/15/sql-nf/sql-nf2.png"></p></blockquote><h2 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h2><blockquote><p>确保数据表中的每一列数据都和主键直接相关，而不能间接相关<br>举例:<br><img src="/2021/10/15/sql-nf/sql-nf3.png"><br>班主任性别，年龄与 姓名 相关，不满足3nf<br>更改：（分出来）<br><img src="/2021/10/15/sql-nf/sql-nf4.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python使用socket编程</title>
      <link href="/2021/10/15/python-socket/"/>
      <url>/2021/10/15/python-socket/</url>
      
        <content type="html"><![CDATA[<h1 id="python使用socket编程"><a href="#python使用socket编程" class="headerlink" title="python使用socket编程"></a>python使用socket编程</h1><h2 id="什么是socket"><a href="#什么是socket" class="headerlink" title="什么是socket?"></a>什么是socket?</h2><blockquote><p>Socket接口是TCP/IP网络的API（Application Programming Interface,应用程序编程接口），Socket接口定义了许多函数或例程，程序员可以用它们来开发 TCP/IP网络上的应用程序。<br>socket不是具体的网络协议，属于存在于tcp、udp协议之上的一个抽象层。是对TCP/IP的封装。</p></blockquote><h2 id="具体使用socket"><a href="#具体使用socket" class="headerlink" title="具体使用socket"></a>具体使用socket</h2><p>首先需要导入socket库:import socket<br>打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可，以下是相关操作：</p><pre class="line-numbers language-none"><code class="language-none">s.bind()：绑定（主机名称、端口到一个套接字上）s.listen()：设置并启动TCP监听s.accept()：等待客户端连接s.connect()：连接指定服务器s.recv()：接受TCP消息s.send()：发送TCP消息s.recvfrom()：接受UDP消息s.sendto()：发送UDP消息s.close()：关闭套接字对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>创建一个socket:<pre class="line-numbers language-none"><code class="language-none">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)# 建立连接:s.connect((&#39;www.sina.com.cn&#39;, 80))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>AF_INET指定使用IPv4协议，如果要用更先进的IPv6，就指定为AF_INET6。SOCK_STREAM指定使用面向流的TCP协议建立TCP连接后，我们就可以向新浪服务器发送请求<pre class="line-numbers language-none"><code class="language-none"># 发送数据:s.send(b&#39;GET &#x2F; HTTP&#x2F;1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>TCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端<pre class="line-numbers language-none"><code class="language-none"># 接收数据:buffer &#x3D; []while True:    # 每次最多接收1k字节:    d &#x3D; s.recv(1024)    if d:        buffer.append(d)    else:        breakdata &#x3D; b&#39;&#39;.join(buffer)s.close()header, html &#x3D; data.split(b&#39;\r\n\r\n&#39;, 1)print(header.decode(&#39;utf-8&#39;))# 把接收的数据写入文件:with open(&#39;sina.html&#39;, &#39;wb&#39;) as f:    f.write(html)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>服务器的编程：<pre class="line-numbers language-none"><code class="language-none">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)# 监听端口:s.bind((&#39;127.0.0.1&#39;, 9999))#调用listen()方法开始监听端口，传入的参数指定等待连接的最大数量：s.listen(5)print(&#39;Waiting for connection...&#39;)while True:    # 接受一个新连接:    sock, addr &#x3D; s.accept()    # 创建新线程来处理TCP连接:    t &#x3D; threading.Thread(target&#x3D;tcplink, args&#x3D;(sock, addr))    t.start()#每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：def tcplink(sock, addr):    print(&#39;Accept new connection from %s:%s...&#39; % addr)    sock.send(b&#39;Welcome!&#39;)    while True:        data &#x3D; sock.recv(1024)        time.sleep(1)        if not data or data.decode(&#39;utf-8&#39;) &#x3D;&#x3D; &#39;exit&#39;:            break        sock.send((&#39;Hello, %s!&#39; % data.decode(&#39;utf-8&#39;)).encode(&#39;utf-8&#39;))    sock.close()    print(&#39;Connection from %s:%s closed.&#39; % addr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上Hello再发送给客户端。如果客户端发送了exit字符串，就直接关闭连接。要测试这个服务器程序，我们还需要编写一个客户端程序：<pre class="line-numbers language-none"><code class="language-none">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)# 建立连接:s.connect((&#39;127.0.0.1&#39;, 9999))# 接收欢迎消息:print(s.recv(1024).decode(&#39;utf-8&#39;))for data in [b&#39;Michael&#39;, b&#39;Tracy&#39;, b&#39;Sarah&#39;]:    # 发送数据:    s.send(data)    print(s.recv(1024).decode(&#39;utf-8&#39;))s.send(b&#39;exit&#39;)s.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了。(以上内容来自廖雪峰python教程)]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构排序</title>
      <link href="/2021/10/15/data-sort/"/>
      <url>/2021/10/15/data-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构排序"><a href="#数据结构排序" class="headerlink" title="数据结构排序"></a>数据结构排序</h1><p><img src="/2021/10/15/data-sort/data-sort.png" alt="排序"></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>把待排序的数据插入到已经排好序的数据中，直到所有的数据插入完成.<br>例子：<br><img src="/2021/10/15/data-sort/sort1.png" alt="直接插入排序"></p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序就是在前面直接插入排序的基础上进行改进的一种排序。直接插入排序的变量 i 其实就是一个间隔，而希尔排序的间隔不是 1，它的间隔逐渐缩小直到为 1 的一种排序，因此又叫缩小增量法。它是对直接插入排序算法的优化，当间隔不为 1 的时候，都是预排序。第一次的间隔是 数据长度的三分之一再加一。即 gap = size / 3 + 1（间隔几个进行比较，）<br>例子：<br><img src="/2021/10/15/data-sort/sort2.png" alt="希尔排序"></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><p>直接选择排序就是在待排序的数据中选择一个最大的或者最小的放在带待排序数据的末尾<br>例子：<br><img src="/2021/10/15/data-sort/sort3.png" alt="直接选择排序"></p><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>从第一个数开始，和第二个数比较，满足条件就进行交换，然后第二个数和第三个数进行比较满足进行交换，直到最后一个数，这是一个“泡”已经冒出。现在有从开始比较，这个时候总的比较的数减少一个，因为“泡”已经冒出了。冒泡排序一共会进行 size - 1次冒泡，每次的比较次数为size - i，i是比较的第几次。<br>例子：<br><img src="/2021/10/15/data-sort/sort4.png" alt="冒泡排序"><br>java代码实现：</p><pre class="line-numbers language-none"><code class="language-none">public class demo_sort &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;冒泡排序算法        int[] numbers&#x3D;new int[]&#123;1,5,8,2,3,9,4&#125;;        &#x2F;&#x2F;需进行length-1次冒泡        for(int i&#x3D;0;i&lt;numbers.length-1;i++)        &#123;            for(int j&#x3D;0;j&lt;numbers.length-1-i;j++)            &#123;                if(numbers[j]&gt;numbers[j+1])                &#123;                    int temp&#x3D;numbers[j];                    numbers[j]&#x3D;numbers[j+1];                    numbers[j+1]&#x3D;temp;                &#125;            &#125;        &#125;        System.out.println(&quot;从小到大排序后的结果是:&quot;);        for(int i&#x3D;0;i&lt;numbers.length;i++)            System.out.print(numbers[i]+&quot; &quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序：</p><ol><li>选择一个基准元素,通常选择第一个元素或者最后一个元素,</li><li>通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的 元素值比基准值大。</li><li>此时基准元素在其排好序后的正确位置</li><li>然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序<br>例子：<br><img src="/2021/10/15/data-sort/sort5.png" alt="快速排序"><br>以上完成第一次比较，左右两边还要进行比较<br>java代码实现：<pre class="line-numbers language-none"><code class="language-none">public static void quickSort(int[] arr)&#123;    qsort(arr, 0, arr.length-1);&#125;private static void qsort(int[] arr, int low, int high)&#123;    if (low &lt; high)&#123;        int pivot&#x3D;partition(arr, low, high);        &#x2F;&#x2F;将数组分为两部分        qsort(arr, low, pivot-1);                   &#x2F;&#x2F;递归排序左子数组        qsort(arr, pivot+1, high);                  &#x2F;&#x2F;递归排序右子数组    &#125;&#125;private static int partition(int[] arr, int low, int high)&#123;    int pivot &#x3D; arr[low];     &#x2F;&#x2F;枢轴记录    while (low&lt;high)&#123;        while (low&lt;high &amp;&amp; arr[high]&gt;&#x3D;pivot) --high;        arr[low]&#x3D;arr[high];             &#x2F;&#x2F;交换比枢轴小的记录到左端        while (low&lt;high &amp;&amp; arr[low]&lt;&#x3D;pivot) ++low;        arr[high] &#x3D; arr[low];           &#x2F;&#x2F;交换比枢轴小的记录到右端    &#125;    &#x2F;&#x2F;扫描完成，枢轴到位    arr[low] &#x3D; pivot;    &#x2F;&#x2F;返回的是枢轴的位置    return low;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构总汇</title>
      <link href="/2021/10/15/data-structure/"/>
      <url>/2021/10/15/data-structure/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构总汇"><a href="#数据结构总汇" class="headerlink" title="数据结构总汇"></a>数据结构总汇</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><blockquote><p>分为顺序表和链式表：<br>顺序表（按照顺序结构存储，就是逻辑相邻元素在内存也相邻）<br>链式表（按链式存储结构存储，就是元素在内存中随机存储，因此各节点存放值，还有下一个节点的地址）</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组是可以再内存中连续存储多个元素的结构，在内存中的分配也是连续的<br>优点：<br>1、按照索引查询元素速度快<br>2、按照索引遍历数组方便<br>缺点：<br>1、数组的大小固定后就无法扩容了<br>2、数组只能存储一种类型的数据<br>3、添加，删除的操作慢，因为要移动其他的元素。<br>适用场景：<br>频繁查询，对存储空间要求不大，很少增加和删除的情况。    </p></blockquote><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><blockquote><p>栈是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。<br>栈的特点是：先进后出。<br>栈常应用于实现递归功能方面的场景，例如斐波那契数列。</p></blockquote><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><blockquote><p>队列与栈一样，也是一种线性表。<br>不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。<br>使用场景：因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。    </p></blockquote><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote><p>链表是物理存储单元上非连续的、非顺序的存储结构。<br>数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。<br>根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等。<br>循环链表：最后一个节点的指针域指向头结点，形成循环<br>双链表：每个节点有下一个节点地址，也有上一个节点地址<br>链表的优点：<br>链表是不需要初始化容量，可以任意加减元素；<br>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快；<br>缺点：<br>因为含有大量的指针域，占用空间较大；<br>查找元素需要遍历链表来查找，非常耗时。<br>适用场景：数据量较小，需要频繁增加，删除操作的场景    </p></blockquote><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><blockquote><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。<br>把它叫做 “树” 是因为它看起来像一棵倒挂的树，。它具有以下的特点：    </p><ol><li>每个节点有零个或多个子节点；    </li><li>没有父节点的节点称为根节点；    </li><li>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树；    </li></ol><p>在日常的应用中，我们讨论和用的更多的是树的其中一种结构，就是二叉树。<br>二叉树是树的特殊一种，具有如下特点：<br>1、每个结点最多有两颗子树，结点的度最大为2。<br>2、左子树和右子树是有顺序的，次序不能颠倒。<br>3、即使某结点只有一个子树，也要区分左右子树。    </p><p>二叉树是一种比较有用的折中方案，它添加，删除元素都很快，并且在查找方面也有很多的算法优化。<br>所以，二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。    </p></blockquote><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><blockquote><p>散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，<br>通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。<br>记录的存储位置=f(key)<br>这里的对应关系 f 成为散列函数，又称为哈希 (hash函数)，而散列表就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，    然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里，这种存储空间可以充分利用数组的查找优势来查找元素，所以查找的速度很快。<br>哈希表在应用中也是比较常见的，就如Java中有些集合类就是借鉴了哈希原理构造的，例如HashMap，HashTable等，利用hash表的优势，对于集合的查找元素时非常方便的，然而，因为哈希表是基于数组衍生的数据结构，在添加删除元素方面是比较慢的，所以很多时候需要用到一种数组链表来做，也就是拉链法。拉链法是数组结合链表的一种结构，较早前的hashMap底层的存储就是采用这种结构，直到jdk1.8之后才换成了数组加红黑树的结构<br>哈希表的应用场景很多，当然也有很多问题要考虑，比如哈希冲突的问题，如果处理的不好会浪费大量的时间，导致应用崩溃。</p></blockquote><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><blockquote><p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有以下的性质：<br>堆中某个节点的值总是不大于或不小于其父节点的值；<br>堆总是一棵完全二叉树。<br>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。<br>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。<br>(ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：<br>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p></blockquote><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><blockquote><p>图是由结点的有穷集合V和边的集合E组成。<br>其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。<br>按照顶点指向的方向可分为无向图和有向图。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解mvvm</title>
      <link href="/2021/10/15/mvvm/"/>
      <url>/2021/10/15/mvvm/</url>
      
        <content type="html"><![CDATA[<h1 id="mvvm详解"><a href="#mvvm详解" class="headerlink" title="mvvm详解"></a>mvvm详解</h1><h2 id="什么是mvvm？"><a href="#什么是mvvm？" class="headerlink" title="什么是mvvm？"></a>什么是mvvm？</h2><blockquote><p>mvvm是Model-View-ViewModel的缩写。<br>-model：数据-后端传递的数据-data数据<br>-view：视图-代表 UI 组件，它负责将数据模型转化成 UI 展现出来-template<br>-ViewModel:视图模型-是一个同步View 和 Model的对象。MVVM模式的核心，它是连接Model和View的桥梁。<br>MVVM的设计思想：关注Model的变化，让MVVM框架去自动更新DOM的状态，从而把开发者从操作DOM的繁琐步骤中解脱出来！<br><img src="/2021/10/15/mvvm/mvvm-1.jpg" alt="mvvm"></p></blockquote><h2 id="为什么出现mvvm？"><a href="#为什么出现mvvm？" class="headerlink" title="为什么出现mvvm？"></a>为什么出现mvvm？</h2><blockquote><p>一直以来前端开发暴露的问题：<br>1.开发者在代码中大量调用相同的 DOM API，处理繁琐 ，操作冗余，使得代码难以维护。<br>2.用户大量交互，导致dom操作过于频繁，效率低下，影响用户体验<br>3.当 Model 频繁发生变化，开发者需要主动更新到 View ；当用户的操作导致 Model 发生变化，开发者同样需要将变化的数据同步到 Model 中，这样的工作不仅繁琐，而且很难维护复杂多变的数据状态。<br>早期 jquery 的出现就是为了前端能更简洁的操作 DOM 而设计的，但它只解决了第一个问题，另外两个问题始终伴随着前端一直存在。</p></blockquote><h2 id="mvvm优势？"><a href="#mvvm优势？" class="headerlink" title="mvvm优势？"></a>mvvm优势？</h2><blockquote><p>1.视图与数据分离，耦合性低，互不影响。<br>2.数据视图双向绑定，有mvvm框架自动绑定。<br>3.前端开发更灵活。</p></blockquote><h2 id="具体来看前端发展过程"><a href="#具体来看前端发展过程" class="headerlink" title="具体来看前端发展过程"></a>具体来看前端发展过程</h2><p>1.直接使用js操作dom节点，使用浏览器提供的原生API：</p><pre class="line-numbers language-none"><code class="language-none">var dom &#x3D; document.getElementById(&#39;xxx&#39;);dom.innerHTML &#x3D; &#39;xxx&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开发者需要调用dom api进行操作<br>&emsp;<br>2.使用jQuery，简洁的API使用起来很方便</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;#xxx&#39;).text(&#39;xxx&#39;).css(&#39;color&#39;, &#39;green&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;<br>3.使用mvvm框架（这里举个例子与jquery对比）<br>修改下面name和age：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- HTML --&gt;&lt;p&gt;Hello, &lt;span id&#x3D;&quot;name&quot;&gt;Bart&lt;&#x2F;span&gt;!&lt;&#x2F;p&gt;&lt;p&gt;You are &lt;span id&#x3D;&quot;age&quot;&gt;12&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>使用jquery修改两个dom节点：</p><pre class="line-numbers language-none"><code class="language-none">var name &#x3D; &#39;Homer&#39;;var age &#x3D; 51;$(&#39;#name&#39;).text(name);$(&#39;#age&#39;).text(age);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>使用mvvm实现：</p><pre class="line-numbers language-none"><code class="language-none">var person &#x3D; &#123;    name: &#39;Bart&#39;,    age: 12&#125;;person.name &#x3D; &#39;Homer&#39;;person.age &#x3D; 51;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（以上例子来自廖雪峰js教程)<br>&emsp;<br>可以发现我们只需要修改数据，不需要关心怎么操作dom节点,而是直接修改js的对象。<br>剩下的由mvvm框架帮我们实现了(数据绑定)</p>]]></content>
      
      
      <categories>
          
          <category> mvvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> mvvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq安装配置+springboot整合</title>
      <link href="/2021/10/14/rabbitmq-springboot/"/>
      <url>/2021/10/14/rabbitmq-springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="rabbitmq安装配置-springboot整合"><a href="#rabbitmq安装配置-springboot整合" class="headerlink" title="rabbitmq安装配置+springboot整合"></a>rabbitmq安装配置+springboot整合</h1><h2 id="什么是消息队列？"><a href="#什么是消息队列？" class="headerlink" title="什么是消息队列？"></a>什么是消息队列？</h2><blockquote><p>简单来说消息队列就是一个使用队列来通信的组件。<br>就现在而言我们日常所说的消息队列常常指代的是消息中间件，它的存在不仅仅<br>只是为了通信这个问题。</p></blockquote><h2 id="为什么需要消息队列"><a href="#为什么需要消息队列" class="headerlink" title="为什么需要消息队列?"></a>为什么需要消息队列?</h2><blockquote><p>从本质上来说是因为互联网的快速发展，业务不断扩张，促使技术架构需要不断的演进。<br>从以前的单体架构到现在的微服务架构，从互联网初期一个服务器上有 100 个在线用户已经很了不得，到现在坐拥10亿日活的微信。<br>我们需要有一个「东西」来解耦服务之间的关系、控制资源合理合时的使用以及缓冲流量洪峰等等。<br>消息队列就应运而生了。它常用来实现：异步处理、服务解耦、流量控制。</p></blockquote><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><blockquote><p>随着公司的发展你可能会发现你项目的请求链路越来越长，例如刚开始的电商项目，可以就是粗暴的扣<br>库存、下单。慢慢地又加上积分服务、短信服务等。这一路同步调用下来客户可能等急了，这时候就是<br>消息队列登场的好时机。<br>调用链路长、响应就慢了，并且相对于扣库存和下单，积分和短信没必要这么的 “及时”。因此只需要在<br>下单结束那个流程，扔个消息到消息队列中就可以直接返回响应了。而且积分服务和短信服务可以并行<br>的消费这条消息。<br>可以看出消息队列可以减少请求的等待，还能让服务异步并发处理，提升系统总体性能。<br><img src="/2021/10/14/rabbitmq-springboot/mq1.png"></p></blockquote><h2 id="服务解耦"><a href="#服务解耦" class="headerlink" title="服务解耦"></a>服务解耦</h2><blockquote><p><img src="/2021/10/14/rabbitmq-springboot/mq2.png"></p></blockquote><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><blockquote><p>后端服务相对而言都是比较「弱」的，因为业务较重，处理时间较长。<br>像一些例如秒杀活动爆发式流量打过来可能就顶不住了。因此需要引入一个中间件来做缓冲，消息队列再适合不过了。<br>网关的请求先放入消息队列中，后端服务尽自己最大能力去消息队列中消费请求。超时的请求可以直接返回错误。<br>当然还有一些服务特别是某些后台任务，不需要及时地响应，并且业务处理复杂且流程长，<br>那么过来的请求先放入消息队列中，后端服务按照自己的节奏处理。这也是很 nice 的。<br><img src="/2021/10/14/rabbitmq-springboot/mq3.png"></p></blockquote><h2 id="Windows下RabbitMQ安装及配置"><a href="#Windows下RabbitMQ安装及配置" class="headerlink" title="Windows下RabbitMQ安装及配置"></a>Windows下RabbitMQ安装及配置</h2><h3 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h3><blockquote><p>下载地址：<a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a><br>设置环境变量，新建ERLANG_HOME 指向安装目录<br>修改环境变量path，增加Erlang变量至path，%ERLANG_HOME%\bin;<br>cmd输入erl，查看是否更改成功</p></blockquote><h3 id="安装rabbitmq"><a href="#安装rabbitmq" class="headerlink" title="安装rabbitmq"></a>安装rabbitmq</h3><blockquote><p>下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a><br>启动rabbitmq<br>浏览器访问<a href="http://localhost:15672,查看是否启动成功">http://localhost:15672,查看是否启动成功</a><br><img src="/2021/10/14/rabbitmq-springboot/mq4.png"><br>输入账户密码进入后台管理界面，默认账户密码都是guest<br>后台管理界面可以手动创建虚拟host，创建用户，分配权限，创建交换机，创建队列等等，还有查看队列消息，消费效率，推送效率等等</p></blockquote><h2 id="springboot整合rabbitmq"><a href="#springboot整合rabbitmq" class="headerlink" title="springboot整合rabbitmq"></a>springboot整合rabbitmq</h2><h3 id="消息推送和接收流程"><a href="#消息推送和接收流程" class="headerlink" title="消息推送和接收流程"></a>消息推送和接收流程</h3><blockquote><p><img src="/2021/10/14/rabbitmq-springboot/mq5.png"></p></blockquote><h3 id="常用的交换机"><a href="#常用的交换机" class="headerlink" title="常用的交换机"></a>常用的交换机</h3><h4 id="直连型交换机"><a href="#直连型交换机" class="headerlink" title="直连型交换机"></a>直连型交换机</h4><blockquote><p>根据消息携带的路由键将消息投递给对应队列。<br>大致流程，有一个队列绑定到一个直连交换机上，同时赋予一个路由键 routing key 。<br>然后当一个消息携带着路由值为X，这个消息通过生产者发送给交换机时，交换机就会根据这个路由值X去寻找绑定值也是X的队列。</p></blockquote><h4 id="扇型交换机"><a href="#扇型交换机" class="headerlink" title="扇型交换机"></a>扇型交换机</h4><blockquote><p>这个交换机没有路由键概念，就算你绑了路由键也是无视的。<br>这个交换机在接收到消息后，会直接转发到绑定到它上面的所有队列。</p></blockquote><h4 id="主题交换机"><a href="#主题交换机" class="headerlink" title="主题交换机"></a>主题交换机</h4><blockquote><p>这个交换机其实跟直连交换机流程差不多，但是它的特点就是在它的路由键和绑定键之间是有规则的。<br>简单地介绍下规则：<br>“*”  (星号) 用来表示一个单词 (必须出现的)<br>“#” (井号) 用来表示任意数量（零个或多个）单词<br>当一个队列的绑定键为 “#”（井号） 的时候，这个队列将会无视消息的路由键，接收所有的消息。<br>当 * (星号) 和 # (井号) 这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。<br>所以主题交换机也就实现了扇形交换机的功能，和直连交换机的功能。</p></blockquote><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><blockquote><p>需要创建2个springboot项目，一个 rabbitmq-provider （生产者），一个rabbitmq-consumer（消费者）<br>首先创建 rabbitmq-provider<br>pom.xml里用到的jar依赖：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--rabbitmq--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-amqp&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置application.yml：</p><pre class="line-numbers language-none"><code class="language-none">server: port: 8021spring: application:   name: rabbitmq-provider #配置rabbitMq 服务器 rabbitmq:   host: 127.0.0.1   port: 5672   username: guest   password: guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先使用direct exchange(直连型交换机),创建DirectRabbitConfig.java（对于队列和交换机持久化以及连接使用设置)</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.amqp.core.Binding;import org.springframework.amqp.core.BindingBuilder;import org.springframework.amqp.core.DirectExchange;import org.springframework.amqp.core.Queue;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class DirectRabbitConfig &#123;   &#x2F;&#x2F;队列 起名：TestDirectQueue   @Bean   public Queue TestDirectQueue() &#123;       &#x2F;&#x2F; durable:是否持久化,默认是false,持久化队列：会被存储在磁盘上，当消息代理重启时仍然存在，暂存队列：当前连接有效       &#x2F;&#x2F; exclusive:默认也是false，只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable       &#x2F;&#x2F; autoDelete:是否自动删除，当没有生产者或者消费者使用此队列，该队列会自动删除。       &#x2F;&#x2F;   return new Queue(&quot;TestDirectQueue&quot;,true,true,false);       &#x2F;&#x2F;一般设置一下队列的持久化就好,其余两个就是默认false       return new Queue(&quot;TestDirectQueue&quot;,true);   &#125;   &#x2F;&#x2F;Direct交换机 起名：TestDirectExchange   @Bean   DirectExchange TestDirectExchange() &#123;     &#x2F;&#x2F;  return new DirectExchange(&quot;TestDirectExchange&quot;,true,true);       return new DirectExchange(&quot;TestDirectExchange&quot;,true,false);   &#125;   &#x2F;&#x2F;绑定  将队列和交换机绑定, 并设置用于匹配键：TestDirectRouting   @Bean   Binding bindingDirect() &#123;       return BindingBuilder.bind(TestDirectQueue()).to(TestDirectExchange()).with(&quot;TestDirectRouting&quot;);   &#125;   @Bean   DirectExchange lonelyDirectExchange() &#123;       return new DirectExchange(&quot;lonelyDirectExchange&quot;);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>消息推送接口：(根据需求也可以改为定时任务等等)</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.HashMap;import java.util.Map;import java.util.UUID;@RestControllerpublic class SendMessageController &#123;   @Autowired   RabbitTemplate rabbitTemplate;  &#x2F;&#x2F;使用RabbitTemplate,这提供了接收&#x2F;发送等等方法   @GetMapping(&quot;&#x2F;sendDirectMessage&quot;)   public String sendDirectMessage() &#123;       String messageId &#x3D; String.valueOf(UUID.randomUUID());       String messageData &#x3D; &quot;test message, hello!&quot;;       String createTime &#x3D; LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));       Map&lt;String,Object&gt; map&#x3D;new HashMap&lt;&gt;();       map.put(&quot;messageId&quot;,messageId);       map.put(&quot;messageData&quot;,messageData);       map.put(&quot;createTime&quot;,createTime);       &#x2F;&#x2F;将消息携带绑定键值：TestDirectRouting 发送到交换机TestDirectExchange       rabbitTemplate.convertAndSend(&quot;TestDirectExchange&quot;, &quot;TestDirectRouting&quot;, map);       return &quot;ok&quot;;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行项目，并且调用接口。观察后台管理界面变化<br>此时消息已经发布，但没有被消费。<br>&emsp;<br>下面创建rabbitmq-consumer项目：<br>操作同上，yml配置端口改成不同端口</p><pre class="line-numbers language-none"><code class="language-none">server: port: xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建消息接收监听类，DirectReceiver.java：</p><pre class="line-numbers language-none"><code class="language-none">@Component@RabbitListener(queues &#x3D; &quot;TestDirectQueue&quot;)&#x2F;&#x2F;监听的队列名称 TestDirectQueuepublic class DirectReceiver &#123;   @RabbitHandler   public void process(Map testMessage) &#123;       System.out.println(&quot;DirectReceiver消费者收到消息  : &quot; + testMessage.toString());   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行项目，可以发现消息已被消费。<br>&emsp;<br>现在使用Topic Exchange 主题交换机<br>在rabbitmq-provider项目里面创建TopicRabbitConfig.java：</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.amqp.core.Binding;import org.springframework.amqp.core.BindingBuilder;import org.springframework.amqp.core.Queue;import org.springframework.amqp.core.TopicExchange;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class TopicRabbitConfig &#123;   &#x2F;&#x2F;绑定键   public final static String man &#x3D; &quot;topic.man&quot;;   public final static String woman &#x3D; &quot;topic.woman&quot;;   @Bean   public Queue firstQueue() &#123;       return new Queue(TopicRabbitConfig.man);   &#125;   @Bean   public Queue secondQueue() &#123;       return new Queue(TopicRabbitConfig.woman);   &#125;   @Bean   TopicExchange exchange() &#123;       return new TopicExchange(&quot;topicExchange&quot;);   &#125;   &#x2F;&#x2F;将firstQueue和topicExchange绑定,而且绑定的键值为topic.man   &#x2F;&#x2F;这样只要是消息携带的路由键是topic.man,才会分发到该队列   @Bean   Binding bindingExchangeMessage() &#123;       return BindingBuilder.bind(firstQueue()).to(exchange()).with(man);   &#125;   &#x2F;&#x2F;将secondQueue和topicExchange绑定,而且绑定的键值为用上通配路由键规则topic.#   &#x2F;&#x2F; 这样只要是消息携带的路由键是以topic.开头,都会分发到该队列   @Bean   Binding bindingExchangeMessage2() &#123;       return BindingBuilder.bind(secondQueue()).to(exchange()).with(&quot;topic.#&quot;);   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后添加2个接口，用于推送消息到主题交换机：</p><pre class="line-numbers language-none"><code class="language-none">   @GetMapping(&quot;&#x2F;sendTopicMessage1&quot;)   public String sendTopicMessage1() &#123;       String messageId &#x3D; String.valueOf(UUID.randomUUID());       String messageData &#x3D; &quot;message: M A N &quot;;       String createTime &#x3D; LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));       Map&lt;String, Object&gt; manMap &#x3D; new HashMap&lt;&gt;();       manMap.put(&quot;messageId&quot;, messageId);       manMap.put(&quot;messageData&quot;, messageData);       manMap.put(&quot;createTime&quot;, createTime);       rabbitTemplate.convertAndSend(&quot;topicExchange&quot;, &quot;topic.man&quot;, manMap);       return &quot;ok&quot;;   &#125;   @GetMapping(&quot;&#x2F;sendTopicMessage2&quot;)   public String sendTopicMessage2() &#123;       String messageId &#x3D; String.valueOf(UUID.randomUUID());       String messageData &#x3D; &quot;message: woman is all &quot;;       String createTime &#x3D; LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));       Map&lt;String, Object&gt; womanMap &#x3D; new HashMap&lt;&gt;();       womanMap.put(&quot;messageId&quot;, messageId);       womanMap.put(&quot;messageData&quot;, messageData);       womanMap.put(&quot;createTime&quot;, createTime);       rabbitTemplate.convertAndSend(&quot;topicExchange&quot;, &quot;topic.woman&quot;, womanMap);       return &quot;ok&quot;;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产者项目完成，同理，对消费者项目编码：创建TopicManReceiver.java：</p><pre class="line-numbers language-none"><code class="language-none">import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;import java.util.Map;@Component@RabbitListener(queues &#x3D; &quot;topic.man&quot;)public class TopicManReceiver &#123;   @RabbitHandler   public void process(Map testMessage) &#123;       System.out.println(&quot;TopicManReceiver消费者收到消息  : &quot; + testMessage.toString());   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再创建一个TopicTotalReceiver.java：</p><pre class="line-numbers language-none"><code class="language-none">package com.elegant.rabbitmqconsumer.receiver;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;import java.util.Map;@Component@RabbitListener(queues &#x3D; &quot;topic.woman&quot;)public class TopicTotalReceiver &#123;   @RabbitHandler   public void process(Map testMessage) &#123;       System.out.println(&quot;TopicTotalReceiver消费者收到消息  : &quot; + testMessage.toString());   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行两个项目，先调用sendTopicMessage1接口。<br>可以发现两个监听消费者都接收到了消息。<br>然后调用sendTopicMessage2接口。<br>只有TopicTotalReceiver消费到了消息<br>参考：yes消息队列核心知识点<br>参考：<a href="https://blog.csdn.net/qq_35387940/article/details/100514134">https://blog.csdn.net/qq_35387940/article/details/100514134</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+mybatis自动生成器实现多表连接的example查询</title>
      <link href="/2021/09/29/mybatis-tableslink-example/"/>
      <url>/2021/09/29/mybatis-tableslink-example/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-mybatis自动生成器实现多表连接的example查询"><a href="#springboot-mybatis自动生成器实现多表连接的example查询" class="headerlink" title="springboot+mybatis自动生成器实现多表连接的example查询"></a>springboot+mybatis自动生成器实现多表连接的example查询</h1><h2 id="修改-mapper文件"><a href="#修改-mapper文件" class="headerlink" title="修改.mapper文件"></a>修改.mapper文件</h2><blockquote><p>新增resultMap:(根据多表组合需要的字段，type绑定组合后的类)</p><pre class="line-numbers language-none"><code class="language-none">&lt;resultMap id&#x3D;&quot;AdminActionAdminResultMap&quot; type&#x3D;&quot;com.zwq.websocket2.constants.AdminActionAdmin&quot; &gt;   &lt;id column&#x3D;&quot;action_id&quot; property&#x3D;&quot;actionId&quot; jdbcType&#x3D;&quot;INTEGER&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;admin_id&quot; property&#x3D;&quot;adminId&quot; jdbcType&#x3D;&quot;INTEGER&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;name&quot; property&#x3D;&quot;name&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;ac_type&quot; property&#x3D;&quot;acType&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;content_type&quot; property&#x3D;&quot;contentType&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;ac_content&quot; property&#x3D;&quot;acContent&quot; jdbcType&#x3D;&quot;VARCHAR&quot; &#x2F;&gt;   &lt;result column&#x3D;&quot;ac_date&quot; property&#x3D;&quot;acDate&quot; jdbcType&#x3D;&quot;TIMESTAMP&quot; &#x2F;&gt; &lt;&#x2F;resultMap&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>select查询：</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;selectAdminActionAdminByExample&quot; resultMap&#x3D;&quot;AdminActionAdminResultMap&quot; parameterType&#x3D;&quot;com.zwq.websocket2.pojo.AdminActionExample&quot; &gt;   select action_id,ad.admin_id,ad.name,ac_type,content_type,ac_content,ac_date   from admin_action ac   left join admin ad on ac.admin_id &#x3D; ad.admin_id   &lt;if test&#x3D;&quot;_parameter !&#x3D; null&quot; &gt;     &lt;include refid&#x3D;&quot;Example_Where_Clause&quot; &#x2F;&gt;   &lt;&#x2F;if&gt;   &lt;if test&#x3D;&quot;orderByClause !&#x3D; null&quot; &gt;     order by $&#123;orderByClause&#125;   &lt;&#x2F;if&gt; &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="修改对应example类"><a href="#修改对应example类" class="headerlink" title="修改对应example类"></a>修改对应example类</h2><blockquote><p>新增指定的模糊查询：<br>例：（根据主键查询，因为多表连接，所以得指定到哪个表的哪个字段）</p><pre class="line-numbers language-none"><code class="language-none">public Criteria andAdminIdEqualTo(Integer value) &#123;           addCriterion(&quot;ad.admin_id &#x3D;&quot;, value, &quot;adminId&quot;);           return (Criteria) this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例：（根据Name模糊查询）</p><pre class="line-numbers language-none"><code class="language-none">public Criteria andAdminNameLike(String value) &#123;           addCriterion(&quot;ad.name like&quot;, value, &quot;name&quot;);           return (Criteria) this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><pre class="line-numbers language-none"><code class="language-none">@RequestMapping(value &#x3D; &quot;&#x2F;admintest&quot;, method &#x3D; RequestMethod.GET)   public Object aaaa() &#123;       AdminActionExample adminActionExample &#x3D; new AdminActionExample();       AdminActionExample.Criteria criteria &#x3D; adminActionExample.createCriteria();       criteria.andAdminNameLike(&quot;%z%&quot;);       List list &#x3D; adminActionMapper.selectAdminActionAdminByExample(adminActionExample);       logger.info(&quot;测试：&#123;&#125;&quot;,list);       return list;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos+keepalived+nginx实现节点漂移</title>
      <link href="/2021/09/18/linux-keepalived-nginx/"/>
      <url>/2021/09/18/linux-keepalived-nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="centos-keepalived-nginx实现节点漂移"><a href="#centos-keepalived-nginx实现节点漂移" class="headerlink" title="centos+keepalived+nginx实现节点漂移"></a>centos+keepalived+nginx实现节点漂移</h1><h2 id="Keepalived-简要介绍"><a href="#Keepalived-简要介绍" class="headerlink" title="Keepalived 简要介绍"></a>Keepalived 简要介绍</h2><blockquote><p>Keepalived 是一种高性能的服务器高可用或热备解决方案， Keepalived 可以用来防止服务器单点故障的发生，通过配合 Nginx 可以实现 web 前端服务的高可用。</p></blockquote><h2 id="方案规划"><a href="#方案规划" class="headerlink" title="方案规划"></a>方案规划</h2><blockquote><p>两台虚拟机分别装好nginx、keepalived<br>一台主机，一台从机。主节点提供服务，之后断掉主节点，观察备用节点是否启用</p></blockquote><h2 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h2><blockquote><pre class="line-numbers language-none"><code class="language-none">#安装nginxyum install nginx#关闭防火墙和selinuxsystemctl stop firewalld.servicesetenfore 0#启动 Nginxsystemctl start nginx#设置 Nginx 开机启动systemctl enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别访问两个nginx查看是否启动</p></blockquote><h2 id="安装-Keepalived"><a href="#安装-Keepalived" class="headerlink" title="安装 Keepalived"></a>安装 Keepalived</h2><blockquote><pre class="line-numbers language-none"><code class="language-none">#解压安装yum install keepalived -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主节点配置:（注意网卡，vip，主从ip等配置）<br>vi /etc/keepalived/keepalived.conf<br>内容如下：</p><pre class="line-numbers language-none"><code class="language-none">! Configuration File for keepalivedglobal_defs &#123;   #一个没重复的名字即可   router_id keepalived_master&#125;# 检测nginx是否运行vrrp_script chk_nginx &#123;       script &quot;&#x2F;etc&#x2F;keepalived&#x2F;nginx_check.sh&quot;       interval 2       weight -20&#125;vrrp_instance VI_1 &#123;   # 此处不设置为MASTER，通过priority来竞争master   state BACKUP   # 网卡名字   interface ens33   # 同一个keepalived集群的virtual_router_id相同   virtual_router_id 51   # 权重，master要大于slave   priority 100   # 主备通讯时间间隔   advert_int 1   # 如果两节点的上联交换机禁用了组播，则采用vrrp单播通告的方式   # 本机即主节点ip   unicast_src_ip 192.168.0.200   unicast_peer &#123;               192.168.0.201   # 备节点ip   &#125;   # 设置nopreempt防止抢占资源   nopreempt   # 主备保持一致   authentication &#123;       auth_type PASS       auth_pass 1111   &#125;   # 与上方nginx运行状况检测呼应   track_script &#123;       chk_nginx   &#125;   virtual_ipaddress &#123;       # 虚拟ip地址（VIP，一个尚未占用的内网ip即可）       192.168.0.18   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>从节点配置:（注意网卡，vip，主从ip等配置）</p><pre class="line-numbers language-none"><code class="language-none">! Configuration File for keepalivedglobal_defs &#123;   #一个没重复的名字即可   router_id keepalived_slave&#125;# 检测nginx是否运行vrrp_script chk_nginx &#123;       script &quot;&#x2F;etc&#x2F;keepalived&#x2F;nginx_check.sh&quot;       interval 2       weight -20&#125;vrrp_instance VI_1 &#123;   # 此处不设置为MASTER，通过priority来竞争master   state BACKUP   # 网卡名字   interface ens33   # 同一个keepalived集群的virtual_router_id相同   virtual_router_id 51   # 权重，master要大于slave   priority 90   # 主备通讯时间间隔   advert_int 1   # 如果两节点的上联交换机禁用了组播，则采用vrrp单播通告的方式   # 本机即主节点ip   unicast_src_ip 192.168.0.201   unicast_peer &#123;               192.168.0.200   # 备节点ip   &#125;   # 设置nopreempt防止抢占资源   nopreempt   # 主备保持一致   authentication &#123;       auth_type PASS       auth_pass 1111   &#125;   # 与上方nginx运行状况检测呼应   track_script &#123;       chk_nginx   &#125;   virtual_ipaddress &#123;       # 虚拟ip地址（VIP，一个尚未占用的内网ip即可）       192.168.0.18   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动nginx,keepalive<br>systemctl start keepalived<br>配置好输入vip:注意加端口号，我的nginx端口是8089</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx+tomcat*2实现负载均衡</title>
      <link href="/2021/09/13/linux-nginx-tomcat2/"/>
      <url>/2021/09/13/linux-nginx-tomcat2/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-tomcat-2实现负载均衡"><a href="#nginx-tomcat-2实现负载均衡" class="headerlink" title="nginx+tomcat*2实现负载均衡"></a>nginx+tomcat*2实现负载均衡</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><blockquote><p>安装tomcat<br>安装gcc<br>安装make<br>yum -y install gcc automake autoconf libtool make<br>安装pcre和zlib这两个包：<br>yum install -y pcre-devel<br>yum install -y zlib-devel<br>安装nginx1.12.2<br>去官网下载nginx的tar.gz的包：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a><br>下载后解压安装</p><pre class="line-numbers language-none"><code class="language-none">tar -xvzf nginx-1.12.2.tar.gzcd nginx-1.12.2.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx   #执行配置的命令make &amp;&amp; make install   #当前位置代码编译<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><blockquote><p>vi /usr/local/nginx/conf/nginx.conf   #更改端口</p><pre class="line-numbers language-none"><code class="language-none">server&#123;   listen:  8089   server_name   localhost&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动nginx<br>方式一：/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>方式二：/usr/local/nginx/sbin/nginx -t</p></blockquote><blockquote><p>配置:<br>vi /usr/local/nginx/conf/nginx.conf<br>第一个server前面加：(根据配置)</p><pre class="line-numbers language-none"><code class="language-none">upstream tomcat_test  &#123;     server localhost:8080 weight&#x3D;1;     server localhost:8082 weight&#x3D;1;  &#125;   server &#123;       listen       8089;       server_name  localhost;       #charset koi8-r;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释Local:</p><pre class="line-numbers language-none"><code class="language-none">#location &#x2F; &#123;       #access_log  logs&#x2F;host.access.log  main;       #location &#x2F; &#123;        #   root   html;        #   index  index.html index.htm;       #&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加location</p><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;  proxy_pass http:&#x2F;&#x2F;tomcat_test;  proxy_redirect     off;  proxy_set_header   Host             $host:$server_port;  proxy_set_header   X-Real-IP        $remote_addr;  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;  proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;  proxy_max_temp_file_size 0;  proxy_connect_timeout      90; #连接前面的服务器超时时间  proxy_send_timeout         90;#请求转发数据报文的超时时间  proxy_read_timeout         90;#读取超时时间  proxy_buffer_size          4k; # 缓冲区的大小  proxy_buffers              4 32k; #  proxy_busy_buffers_size    64k; # #proxy_buffers缓冲区，网页平均在32k以下的  proxy_temp_file_write_size 64k; ##高负荷下缓冲大小（proxy_buffers*2）&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>location:详解：</p><pre class="line-numbers language-none"><code class="language-none">location &#x2F; &#123;  proxy_pass http:&#x2F;&#x2F;tomcat_pool;    #转向tomcat处理  proxy_redirect     off;#是否跳转  proxy_set_header   Host             $host; #请求要转发的host  proxy_set_header   X-Real-IP        $remote_addr;#请求的远程地址    这些在浏览器的header都可看，不一一解释  proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;  proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;  proxy_max_temp_file_size 0;  proxy_connect_timeout      90; #连接前面的服务器超时时间  proxy_send_timeout         90;#请求转发数据报文的超时时间  proxy_read_timeout         90;#读取超时时间  proxy_buffer_size          4k; # 缓冲区的大小  proxy_buffers              4 32k; #  proxy_busy_buffers_size    64k; # #proxy_buffers缓冲区，网页平均在32k以下的  proxy_temp_file_write_size 64k; ##高负荷下缓冲大小（proxy_buffers*2）&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="加入服务"><a href="#加入服务" class="headerlink" title="加入服务"></a>加入服务</h2><blockquote><p>vi /usr/lib/systemd/system/nginx.service<br>创建nginx.service加入以下内容:</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description&#x3D;nginx -  web serverAfter&#x3D;network.target remote-fs.target nss-lookup.target [Service]Type&#x3D;forkingPIDFile&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pidExecStartPre&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -t -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confExecReload&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reloadExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stopExecQuit&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s quitPrivateTmp&#x3D;true [Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关操作：</p><pre class="line-numbers language-none"><code class="language-none">systemctl start  nginx.servicesystemctl stop  nginx.servicesystemctl  enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos下添加tomcat服务并自启动</title>
      <link href="/2021/09/13/linux-tomcat-service-autostart/"/>
      <url>/2021/09/13/linux-tomcat-service-autostart/</url>
      
        <content type="html"><![CDATA[<p>&emsp;</p><h1 id="centos下添加tomcat服务并自启动"><a href="#centos下添加tomcat服务并自启动" class="headerlink" title="centos下添加tomcat服务并自启动"></a>centos下添加tomcat服务并自启动</h1><h2 id="为Tomcat添加启动参数"><a href="#为Tomcat添加启动参数" class="headerlink" title="为Tomcat添加启动参数"></a>为Tomcat添加启动参数</h2><blockquote><p>catalina.sh在执行的时候会调用同级路径下的setenv.sh来设置额外的环境变量，<br>因此在/usr/local/tomcat/apache-tomcat-9.0.31/bin（安装路径）下创建setenv.sh文件，内容如下：(根据安装路径设置)</p><pre class="line-numbers language-none"><code class="language-none">export CATALINA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-9.0.31export CATALINA_BASE&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-9.0.31#设置Tomcat的PID文件CATALINA_PID&#x3D;&quot;$CATALINA_BASE&#x2F;tomcat.pid&quot;#添加JVM选项JAVA_OPTS&#x3D;&quot;-server -XX:PermSize&#x3D;256M -XX:MaxPermSize&#x3D;1024m -Xms512M -Xmx1024M -XX:MaxNewSize&#x3D;256m&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="编写tomcat-service文件"><a href="#编写tomcat-service文件" class="headerlink" title="编写tomcat.service文件"></a>编写tomcat.service文件</h2><blockquote><p>在/usr/lib/systemd/system路径下添加tomcat.service</p><pre class="line-numbers language-none"><code class="language-none">[Unit]Description&#x3D;TomcatAfter&#x3D;syslog.target network.target remote-fs.target nss-lookup.target[Service]Type&#x3D;forkingPIDFile&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-9.0.31&#x2F;tomcat.pidExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-9.0.31&#x2F;bin&#x2F;startup.shExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPIDExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT $MAINPIDPrivateTmp&#x3D;true[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[unit]配置了服务的描述，规定了在network启动之后执行，<br>[service]配置服务的pid，服务的启动，停止，重启<br>[install]配置了使用用户</p></blockquote><h2 id="将Tomcat加入服务管理"><a href="#将Tomcat加入服务管理" class="headerlink" title="将Tomcat加入服务管理"></a>将Tomcat加入服务管理</h2><blockquote><p>systemctl enable tomcat.service<br>systemctl disable tomcat.service<br>systemctl start tomcat.service<br>systemctl stop tomcat.service<br>systemctl restart tomcat.service</p></blockquote><p>原文链接：<a href="https://blog.csdn.net/u012351661/article/details/76254268">https://blog.csdn.net/u012351661/article/details/76254268</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useradd -s /nologin创建用户后ftp无法登录</title>
      <link href="/2021/09/13/linux-ftp-login-error/"/>
      <url>/2021/09/13/linux-ftp-login-error/</url>
      
        <content type="html"><![CDATA[<h1 id="useradd-s-nologin创建用户后ftp无法登录"><a href="#useradd-s-nologin创建用户后ftp无法登录" class="headerlink" title="useradd -s /nologin创建用户后ftp无法登录"></a>useradd -s /nologin创建用户后ftp无法登录</h1><h2 id="530-Login-incorrect"><a href="#530-Login-incorrect" class="headerlink" title="530 Login incorrect"></a>530 Login incorrect</h2><blockquote><p>服务器中useradd -s /sbin/nologin xxx创建用户后客户端发现竟然不能登录，报530错误<br>检查本地配置没有问题，使用正常用户也可以登录。<br>原因：vsftpd默认会检查用户的shell，如果用户的shell在/etc/shells没有记录，则无法登陆ftp</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>在/etc/shells文件里面添加用户的shell解释器<br>vim /etc/shells<br>解释：/etc/shells文件的作用<br>1.系统某些服务在运行过程中，回去检查用户使用的shells，而这些shell查询就是借助/etc/shells这个文件。<br>2.修改该文件不会影响用户登陆服务器主机的权限，该文件提供给解释器给系统的某些服务判断一个用户是否是有效用户，<br>例如我创建的ftp用户解释器为/sbin/nologin，我系统的/etc/shells文件里面没有添加/sbin/nologin，<br>所以我创建的ftp用户登陆不了ftp服务，后面将/sbin/nologin添加进/etc/shells文件，则问题解决。<br>&emsp;<br>原文链接：<a href="https://blog.csdn.net/sunnySe/article/details/116023901">https://blog.csdn.net/sunnySe/article/details/116023901</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7搭建本地yum源</title>
      <link href="/2021/09/13/linux-create-yum/"/>
      <url>/2021/09/13/linux-create-yum/</url>
      
        <content type="html"><![CDATA[<h1 id="centos7搭建本地yum源"><a href="#centos7搭建本地yum源" class="headerlink" title="centos7搭建本地yum源"></a>centos7搭建本地yum源</h1><h2 id="安装启动httpd服务器"><a href="#安装启动httpd服务器" class="headerlink" title="安装启动httpd服务器"></a>安装启动httpd服务器</h2><pre class="line-numbers language-none"><code class="language-none">yum -y install httpd yumsystemctl start httpd#设置开机启动http服务systemctl enable httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器输入ip:80查看是否开启成功</p><h2 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h2><pre class="line-numbers language-none"><code class="language-none">#创建挂载目录mkdir -p &#x2F;mnt&#x2F;cdrom#挂载mount &#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;cdrom#编译此文件vi &#x2F;etc&#x2F;fstab#在文件最后一行增加以下内容：(挂载的镜像)&#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;cdrom iso9660 defaults 0 0#开启目录阅览vi &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;welcome.conf#将Options -Indexes修改为Options +Indexes#旧文件复制mv &#x2F;var&#x2F;www&#x2F;html &#x2F;var&#x2F;www&#x2F;html_old#做挂载目录 的软链接ln -s &#x2F;mnt&#x2F;cdrom&#x2F; &#x2F;var&#x2F;www&#x2F;html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启httpd</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;yum.repos.d&#x2F;zhsx-lan.repo#修改：(根据网络设置)[ZHSX-LAN-YUM]name&#x3D;CentOS7baseurl&#x3D;http:&#x2F;&#x2F;192.168.0.200:8000gpgcheck&#x3D;1gpgkey&#x3D;http:&#x2F;&#x2F;192.168.0.200:8000&#x2F;RPM-GPG-KEY-CentOS-7#测试是否能下载yum install telnet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+aop实现验证jwt+全局异常处理</title>
      <link href="/2021/09/08/jwt-springboot-aop/"/>
      <url>/2021/09/08/jwt-springboot-aop/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-aop实现验证jwt-全局异常处理"><a href="#springboot-aop实现验证jwt-全局异常处理" class="headerlink" title="springboot+aop实现验证jwt+全局异常处理"></a>springboot+aop实现验证jwt+全局异常处理</h1><h2 id="实现流程原理"><a href="#实现流程原理" class="headerlink" title="实现流程原理"></a>实现流程原理</h2><ol><li>模拟用户发送id密码登录，请求登录接口，登录接口放行</li><li>服务器验证密码，根据用户密码生成token并返回</li><li>模拟用户执行操作，请求测试接口，aop进行拦截，获取请求携带的token并验证，如通过则放行。</li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="/2021/09/08/jwt-springboot-aop/jwt1.png"></p><h2 id="引入相关依赖"><a href="#引入相关依赖" class="headerlink" title="引入相关依赖"></a>引入相关依赖</h2><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;          &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;          &lt;version&gt;1.2.46&lt;&#x2F;version&gt;      &lt;&#x2F;dependency&gt;      &lt;dependency&gt;          &lt;groupId&gt;io.jsonwebtoken&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;jjwt&lt;&#x2F;artifactId&gt;          &lt;version&gt;0.9.1&lt;&#x2F;version&gt;      &lt;&#x2F;dependency&gt;      &lt;dependency&gt;          &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;          &lt;version&gt;1.9.6&lt;&#x2F;version&gt;      &lt;&#x2F;dependency&gt;      &lt;dependency&gt;          &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;          &lt;version&gt;3.10&lt;&#x2F;version&gt;      &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建aspect包"><a href="#创建aspect包" class="headerlink" title="创建aspect包"></a>创建aspect包</h2><p>创建SafetyAspect类，（aop切面）</p><pre class="line-numbers language-none"><code class="language-none">import com.alibaba.fastjson.JSONObject;import com.example.testjwt.config.TokenCheckAnnotation;import com.example.testjwt.exception.AuthenticateException;import com.example.testjwt.utils.JwtTokenUtils;import com.example.testjwt.utils.response.ResponseServer;import com.example.testjwt.utils.response.ServerEnum;import org.apache.commons.lang3.StringUtils;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;&#x2F;** * description: 切面 * * @author zwq * @date 2021&#x2F;5&#x2F;15 15:59 *&#x2F;@Aspect@Componentpublic class SafetyAspect &#123;    &#x2F;**     * Pointcut 切入点     * 匹配包下面的所有方法     *&#x2F;    @Pointcut(value &#x3D; &quot;execution(public * com.example.testjwt.controller.*.*(..))&amp;&amp; @annotation(tokenCheckAnnotation)&quot;)    public void safetyAspect(TokenCheckAnnotation tokenCheckAnnotation) &#123;    &#125;    &#x2F;**     * 环绕通知     *&#x2F;    @Around(value &#x3D; &quot;safetyAspect(tokenCheckAnnotation)&quot;)    public Object around(ProceedingJoinPoint pjp, TokenCheckAnnotation tokenCheckAnnotation) &#123;        System.out.println(&quot;截获&quot;);        &#x2F;&#x2F;验证信息，保证接口安全        ServletRequestAttributes attributes &#x3D; (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        Object obj &#x3D; null;        &#x2F;&#x2F;方法的形参参数        Object[] args &#x3D; pjp.getArgs();        System.out.println(&quot;长度:&quot;+args.length);        if(args.length!&#x3D;1||!(JSONObject.class.isInstance(JSONObject.toJSON(args[0]))))&#123;            throw new AuthenticateException(ServerEnum.ERROR);        &#125;        JSONObject jsonObject &#x3D; (JSONObject)args[0];        System.out.println(&quot;元数据&quot;);        System.out.println(jsonObject.toJSONString());        String token &#x3D; (String)jsonObject.get(&quot;Authorization-token&quot;);        JSONObject data &#x3D; jsonObject.getJSONObject(&quot;data&quot;);        if(data &#x3D;&#x3D; null)&#123;            throw new AuthenticateException(ServerEnum.ERROR);        &#125;        Integer id &#x3D; (Integer)data.get(&quot;id&quot;);&#x2F;&#x2F;String pass &#x3D; id+id+&quot;thisispass&quot;;        String pass &#x3D; &quot;zwqzwq&quot;;        &#x2F;&#x2F; 验证token是否为空        if (!StringUtils.isNotBlank(token)) &#123;            throw new AuthenticateException(ServerEnum.TOKEN_ISNULL);        &#125;        &#x2F;&#x2F; 验证token是否失效        ResponseServer responseServer &#x3D; JwtTokenUtils.resolverToken(token, pass);        if (responseServer.getCode() !&#x3D; 200) &#123;            throw new AuthenticateException(ServerEnum.LOGIN_EXPIRED);        &#125;        &#x2F;&#x2F; 执行目标方法        try &#123;            args[0] &#x3D;data;            obj &#x3D; pjp.proceed(args);        &#125; catch (Throwable throwable) &#123;            throwable.printStackTrace();        &#125;        return obj;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建config包"><a href="#创建config包" class="headerlink" title="创建config包"></a>创建config包</h2><p>创建TokenCheckAnnotation注解，（自定义注解，用于标志接口是否需要验证）</p><pre class="line-numbers language-none"><code class="language-none">import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;&#x2F;** * description: 是否需要验证注解 * * @author zwq * @date 2021&#x2F;9&#x2F;8 15:01 *&#x2F;@Target(ElementType.METHOD) &#x2F;&#x2F; 修饰范围@Retention(RetentionPolicy.RUNTIME) &#x2F;&#x2F; 用来描述注解的声明周期public @interface TokenCheckAnnotation &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建exception包"><a href="#创建exception包" class="headerlink" title="创建exception包"></a>创建exception包</h2><p>创建AuthenticateException类（处理全局异常）</p><pre class="line-numbers language-none"><code class="language-none">import com.example.testjwt.utils.response.ServerEnum;&#x2F;** * description: 异常处理 * * @author zwq * @date 2021&#x2F;9&#x2F;8 14:57 *&#x2F;public class AuthenticateException extends RuntimeException&#123;    private Integer code;    public AuthenticateException(ServerEnum serverEnum) &#123;        super(serverEnum.getMsg());        this.code&#x3D;serverEnum.getCode();    &#125;    public Integer getCode() &#123;        return code;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建utils包"><a href="#创建utils包" class="headerlink" title="创建utils包"></a>创建utils包</h2><p>创建jwt工具类（生成token,验证token）</p><pre class="line-numbers language-none"><code class="language-none">import com.example.testjwt.utils.response.ResponseServer;import com.example.testjwt.utils.response.ServerEnum;import io.jsonwebtoken.*;import sun.misc.BASE64Encoder;import java.util.Date;import java.util.HashMap;import java.util.Map;&#x2F;** * description: jwt * * @author zwq * @date 2021&#x2F;9&#x2F;8 14:47 *&#x2F;public class JwtTokenUtils &#123;    public static  String createToken(Map&lt;String,Object&gt; map,String pass)&#123;        &#x2F;&#x2F;声明头部信息        Map&lt;String,Object&gt; headerMap&#x3D;new HashMap&lt;String,Object&gt;();        headerMap.put(&quot;alg&quot;,&quot;HS256&quot;);        headerMap.put(&quot;typ&quot;,&quot;JWT&quot;);        Map&lt;String,Object&gt; payload&#x3D;new HashMap&lt;String,Object&gt;();        payload.putAll(map);        Long iat&#x3D;System.currentTimeMillis();        &#x2F;&#x2F;设置jwt的失效时间 一分钟        Long endTime &#x3D; iat+60000l;        &#x2F;&#x2F;签名值就是我们的安全密钥        String token&#x3D;Jwts.builder()                .setHeader(headerMap)                .setClaims(payload)                .setExpiration(new Date(endTime))                .signWith(SignatureAlgorithm.HS256,getSecretKey(pass))                .compact();        return token;    &#125;    public static ResponseServer resolverToken(String token ,String pass)&#123;        Claims claims&#x3D;null;        try &#123;            claims &#x3D; Jwts.parser()                    .setSigningKey(getSecretKey(pass))                    .parseClaimsJws(token)                    .getBody();        &#125;catch (ExpiredJwtException exp)&#123;            System.out.println(&quot;token超时，token失效了&quot;);            return ResponseServer.error(ServerEnum.TOKEN_TIMEOUT);        &#125;catch (SignatureException sing)&#123;            System.out.println(&quot;token解析失败&quot;);            return ResponseServer.error(ServerEnum.SAFETY_ERROR);        &#125;        return ResponseServer.success(claims);    &#125;    private static String getSecretKey(String key)&#123;        return new BASE64Encoder().encode(key.getBytes());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>创建response包<br>包里面创建两个类:ResponseServer(返回数据的封装)、ServerEnum(状态码)</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * description: 返回的数据 * * @author zwq * @date 2021&#x2F;9&#x2F;8 14:56 *&#x2F;public class ResponseServer &#123;    private Integer code;    private String msg;    private Object data;    private ResponseServer()&#123;    &#125;    private ResponseServer(Integer code,String msg)&#123;        this.code&#x3D;code;        this.msg&#x3D;msg;    &#125;    private ResponseServer(Integer code,String msg,Object data)&#123;        this.code&#x3D;code;        this.msg&#x3D;msg;        this.data&#x3D;data;    &#125;    &#x2F;**     * 返回默认的 成功状态 200     * @return     *&#x2F;    public static  ResponseServer success()&#123;        return new ResponseServer(ServerEnum.SUCCESS.getCode(),ServerEnum.SUCCESS.getMsg());    &#125;    &#x2F;**     * 返回默认的带数据 成功状态 200     * @param data     * @return     *&#x2F;    public static  ResponseServer success(Object data)&#123;        return new ResponseServer(ServerEnum.SUCCESS.getCode(),ServerEnum.SUCCESS.getMsg(),data);    &#125;    &#x2F;**     * 其他特殊类型的成功状态，     * @param serverEnum     * @return     *&#x2F;    public static  ResponseServer success(ServerEnum serverEnum)&#123;        return new ResponseServer(serverEnum.getCode(),serverEnum.getMsg());    &#125;    &#x2F;**     * 带返回数据的其他特殊类型的成功状态     * @param serverEnum     * @param data     * @return     *&#x2F;    public static  ResponseServer success(ServerEnum serverEnum,Object data)&#123;        return new ResponseServer(serverEnum.getCode(),serverEnum.getMsg(),data);    &#125;    &#x2F;&#x2F;失败    public static ResponseServer error(Integer code,String msg)&#123;        return new ResponseServer(code,msg);    &#125;    &#x2F;**     +     * @return     *&#x2F;    public static  ResponseServer error()&#123;        return new ResponseServer(ServerEnum.ERROR.getCode(),ServerEnum.ERROR.getMsg());    &#125;    &#x2F;**     * 返回默认的带数据 失败状态 500     * @param data     * @return     *&#x2F;    public static  ResponseServer error(Object data)&#123;        return new ResponseServer(ServerEnum.ERROR.getCode(),ServerEnum.ERROR.getMsg(),data);    &#125;    &#x2F;**     * 其他特殊类型的失败状态，     * @param serverEnum     * @return     *&#x2F;    public static  ResponseServer error(ServerEnum serverEnum)&#123;        return new ResponseServer(serverEnum.getCode(),serverEnum.getMsg());    &#125;    &#x2F;**     * 带返回数据的其他特殊类型的失败状态     * @param serverEnum     * @param data     * @return     *&#x2F;    public static  ResponseServer error(ServerEnum serverEnum,Object data)&#123;        return new ResponseServer(serverEnum.getCode(),serverEnum.getMsg(),data);    &#125;    public Integer getCode() &#123;        return code;    &#125;    public String getMsg() &#123;        return msg;    &#125;    public Object getData() &#123;        return data;    &#125;    public void setCode(Integer code) &#123;        this.code &#x3D; code;    &#125;    public void setMsg(String msg) &#123;        this.msg &#x3D; msg;    &#125;    public void setData(Object data) &#123;        this.data &#x3D; data;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * description: 状态码 * @author zwq * @date 2021&#x2F;9&#x2F;8 15:00 *&#x2F;public enum ServerEnum &#123;    SUCCESS(200,&quot;操作成功&quot;),    DEL_DEPT_SCUCCESS(201,&quot;删除部门成功&quot;),    LOGIN_ISNULL(5000,&quot;用户名或者密码为空&quot;),    PHONE_ISNULL(5007,&quot;手机号不能为空&quot;),    USERNAME_NOTEXIST(5001,&quot;用户名输入有误。&quot;),    PASSWORD_WRONG(5002,&quot;密码输入错误，请检查&quot;),    LOGIN_SUCCESS(5003,&quot;登陆成功&quot;),    LOGIN_EXPIRED(5004,&quot;登录超时，请重新登陆&quot;),    SECRET_ERROR(5005,&quot;传入的token值有误，不能通过签名验证&quot;),    TOKEN_TIMEOUT(5006,&quot;登录失效，请重新登录&quot;),    TOKEN_ISNULL(5008,&quot;获取到的Token值为空&quot;),    NO_MENU_RIGHT(6000,&quot;没有权限访问该菜单，请联系管理员&quot;),    NOT_DATA(7001,&quot;没有要导出的数据&quot;),    HTTP_URL_ISNULL(8002,&quot;你传递的URL路径为空了&quot;),    SERVER_TIMEOUT(8004,&quot;服务连接请求超时&quot;),    HTTP_ERROR(8003,&quot;接口访问失败&quot;),    SERVER_STOP(8005,&quot;服务连接不上&quot;),    SAFETY_ERROR(9000,&quot;接口验签失败&quot;),    SAFETY_BAD(9001,&quot;接口被非法攻击&quot;),    SAFETY_TIMEOUT(9002,&quot;接口访问超时&quot;),    SAFETY_INVALID(9003,&quot;签名值无效&quot;),    SAFETY_REPLAY_ATTACK(9004,&quot;接口被重放攻击&quot;),    LOGIN_PHONEORCODE_INNULL(10000,&quot;手机号或者验证码为空了&quot;),    LOGIN_CODE_ERROR(10001,&quot;手机验证码输入有误&quot;),    ALL_STOCK_NULL(20001,&quot;商品的库存都不足了&quot;),    NO_ORDER_TO_PAY(20002,&quot;没有要支付的订单&quot;),    CRATER_PAY_ERROR(20003,&quot;生成支付二维码失败&quot;),    PAY_TIMEOUT(20004,&quot;支付超时请刷新页面&quot;),    ERROR(500,&quot;操作失败&quot;);    private ServerEnum(int code ,String msg)&#123;        this.code&#x3D;code;        this.msg&#x3D;msg;    &#125;    private Integer code;    private String msg;    public Integer getCode() &#123;        return code;    &#125;    public String getMsg() &#123;        return msg;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建pojo包"><a href="#创建pojo包" class="headerlink" title="创建pojo包"></a>创建pojo包</h2><p>创建用户类User:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * description: 用户类 * @author zwq * @date 2021&#x2F;9&#x2F;8 14:46 *&#x2F;public class User &#123;    private Long userId;    private String userName;    private String password;    public Long getUserId() &#123;        return userId;    &#125;    public void setUserId(Long userId) &#123;        this.userId &#x3D; userId;    &#125;    public String getUserName() &#123;        return userName;    &#125;    public void setUserName(String userName) &#123;        this.userName &#x3D; userName;    &#125;    public String getPassword() &#123;        return password;    &#125;    public void setPassword(String password) &#123;        this.password &#x3D; password;    &#125;    @Override    public String toString() &#123;        return &quot;User&#123;&quot; +                &quot;userId&#x3D;&quot; + userId +                &quot;, userName&#x3D;&#39;&quot; + userName + &#39;\&#39;&#39; +                &quot;, password&#x3D;&#39;&quot; + password + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建controller包"><a href="#创建controller包" class="headerlink" title="创建controller包"></a>创建controller包</h2><p>创建全局异常处理类：GlobalExceptionHandler</p><pre class="line-numbers language-none"><code class="language-none">import com.example.testjwt.exception.AuthenticateException;import com.example.testjwt.utils.response.ResponseServer;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.RestControllerAdvice;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;&#x2F;** * description: 全局异常处理 * * @author zwq * @date 2021&#x2F;9&#x2F;8 14:58 *&#x2F;@RestControllerAdvicepublic class GlobalExceptionHandler &#123;    @ExceptionHandler(AuthenticateException.class)    public ResponseServer authenticateException(AuthenticateException e, HttpServletRequest request, HttpServletResponse response)&#123;        return ResponseServer.error(e.getCode(),e.getMessage());    &#125;    @ExceptionHandler(Exception.class)    public ResponseServer exceptionHandler(Exception e,HttpServletRequest request, HttpServletResponse response)&#123;        e.printStackTrace();        System.out.println(&quot;全局异常&quot;);        return ResponseServer.error();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;<br>创建testController接口:</p><pre class="line-numbers language-none"><code class="language-none">import com.alibaba.fastjson.JSONObject;import com.example.testjwt.config.TokenCheckAnnotation;import com.example.testjwt.utils.JwtTokenUtils;import com.example.testjwt.utils.response.ResponseServer;import netscape.javascript.JSObject;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import java.util.HashMap;import java.util.Map;&#x2F;** * description: 测试 * @author zwq * @date 2021&#x2F;9&#x2F;8 14:34 *&#x2F;@RestControllerpublic class TestController &#123;    @RequestMapping(value &#x3D; &quot;&#x2F;get&quot;, method &#x3D; RequestMethod.POST)    public String getToken(@RequestBody JSONObject jsonObject) &#123;        JSONObject data &#x3D; jsonObject.getJSONObject(&quot;data&quot;);        boolean a &#x3D; Integer.valueOf(1).equals(data.get(&quot;id&quot;));        boolean b &#x3D; &quot;zwqzwq&quot;.equals(data.get(&quot;pass&quot;));        System.out.println(&quot;a,b:&quot; + a + b);        if (a &amp;&amp; b) &#123;            Map&lt;String, Object&gt; map;            map &#x3D; new HashMap();            map.put(&quot;uid&quot;, 1);            String token &#x3D; JwtTokenUtils.createToken(map, &quot;zwqzwq&quot;);            System.out.println(token);            return token;        &#125;        return &quot;error&quot;;    &#125;    @TokenCheckAnnotation    @RequestMapping(value &#x3D; &quot;&#x2F;test&quot;, method &#x3D; RequestMethod.POST)    public void test(@RequestBody JSONObject jsonObject) &#123;        System.out.println(&quot;接口数据&quot;);        System.out.println(jsonObject.toJSONString());    &#125;    @RequestMapping(value &#x3D; &quot;&#x2F;test2&quot;, method &#x3D; RequestMethod.POST)    public ResponseServer test2(@RequestBody JSONObject jsonObject) &#123;        String sss &#x3D; (String) jsonObject.get(&quot;fdsdf&quot;);        sss.equals(&quot;99&quot;);        System.out.println(&quot;异常后&quot;);        System.out.println(&quot;接口里面&quot;);        return ResponseServer.success();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/zwqmore/springboot-jwt.git">https://github.com/zwqmore/springboot-jwt.git</a></p>]]></content>
      
      
      <categories>
          
          <category> jwt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jwt </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解jwt</title>
      <link href="/2021/09/07/jwt-study/"/>
      <url>/2021/09/07/jwt-study/</url>
      
        <content type="html"><![CDATA[<h1 id="理解jwt"><a href="#理解jwt" class="headerlink" title="理解jwt"></a>理解jwt</h1><h2 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT?"></a>什么是JWT?</h2><blockquote><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p></blockquote><h2 id="传统的session认证"><a href="#传统的session认证" class="headerlink" title="传统的session认证"></a>传统的session认证</h2><blockquote><p>http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。<br>但是这种基于session的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于session认证应用的问题就会暴露出来.</p></blockquote><h2 id="基于token的鉴权机制"><a href="#基于token的鉴权机制" class="headerlink" title="基于token的鉴权机制"></a>基于token的鉴权机制</h2><blockquote><p>基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。<br>流程上是这样的：</p><ul><li>用户使用用户名密码来请求服务器</li><li>服务器进行验证用户的信息</li><li>服务器通过验证发送给用户一个token</li><li>客户端存储token，并在每次请求时附送上这个token值</li><li>服务端验证token值，并返回数据<br>这个token必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持CORS(跨来源资源共享)策略，一般我们在服务端这么做就可以了Access-Control-Allow-Origin: *。</li></ul></blockquote><h2 id="JWT的构成"><a href="#JWT的构成" class="headerlink" title="JWT的构成"></a>JWT的构成</h2><blockquote><p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p></blockquote><h3 id="第一部分-header"><a href="#第一部分-header" class="headerlink" title="第一部分 header"></a>第一部分 header</h3><blockquote><p>jwt的头部承载两部分信息：<br>声明类型，这里是jwt<br>声明加密的算法 通常直接使用 HMAC SHA256<br>完整的头部就像下面这样的JSON：</p><pre class="line-numbers language-none"><code class="language-none">&#123; &#39;typ&#39;: &#39;JWT&#39;, &#39;alg&#39;: &#39;HS256&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.</p><pre class="line-numbers language-none"><code class="language-none">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;</p></blockquote><h3 id="第二部分-playload"><a href="#第二部分-playload" class="headerlink" title="第二部分 playload"></a>第二部分 playload</h3><blockquote><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分：</p><ul><li>标准中注册的声明</li><li>公共的声明</li><li>私有的声明<br>标准中注册的声明 (建议但不强制使用) ：</li><li>iss: jwt签发者</li><li>sub: jwt所面向的用户</li><li>aud: 接收jwt的一方</li><li>exp: jwt的过期时间，这个过期时间必须要大于签发时间</li><li>nbf: 定义在什么时间之前，该jwt都是不可用的.</li><li>iat: jwt的签发时间</li><li>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。<br>公共的声明 ：</li><li>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</li></ul><p>私有的声明 ：</p><ul><li>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。<br>下面是一个payload:<pre class="line-numbers language-none"><code class="language-none">&#123; &quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot;, &quot;admin&quot;: true&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>然后将其进行base64加密，得到Jwt的第二部分。<pre class="line-numbers language-none"><code class="language-none">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>&emsp;</li></ul></blockquote><h3 id="第三部分-signature"><a href="#第三部分-signature" class="headerlink" title="第三部分 signature"></a>第三部分 signature</h3><blockquote><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ul><li>header (base64后的)</li><li>payload (base64后的)</li><li>secret<br>第三部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; javascriptvar encodedString &#x3D; base64UrlEncode(header) + &#39;.&#39; + base64UrlEncode(payload);var signature &#x3D; HMACSHA256(encodedString, &#39;secret&#39;); &#x2F;&#x2F; TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>最后将这三部分用.连接成一个完整的字符串,构成了最终的jwt:<pre class="line-numbers language-none"><code class="language-none">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</li></ul></blockquote><h2 id="验证流程"><a href="#验证流程" class="headerlink" title="验证流程"></a>验证流程</h2><blockquote><ol><li>客户端发送用户名和密码登录</li><li>服务器端验证密码，验证后生成token返回给客户端（服务器端不保留token）</li><li>客户端收到token保存起来，后面每次请求都需要带上token</li><li>服务器端收到客户端操作请求必须要验证token是否正确。<br><img src="/2021/09/07/jwt-study/jwt1.png"></li></ol></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>优点：</p><ul><li>因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。</li><li>因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。</li><li>便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。</li><li>它不需要在服务端保存会话信息, 所以它易于应用的扩展，节省服务器空间。</li></ul><p>注意点：</p><ul><li>Token本身并没有任何加密机制，base64是把JSON编码，相当于明码。对前两个部分进行sha256也只是做的防篡改。需要自己加密。</li><li>sha256是不可逆hash加密，token验证其实是将用户发来的token前两个部分提出来，用自己独有的secret进行sha256 hash加密，然后与用户的token第三部分进行比较，如果相同，则说明没有被篡改，token是有效的。</li><li>jwt验证存在一个问题，用户注销后，token是不会消除的，只会随时间而过期，解决方案可以是将其加入黑名单的方式。</li></ul></blockquote><h3 id><a href="#" class="headerlink" title></a></h3><p>参考：<a href="https://www.jianshu.com/p/576dbf44b2ae">https://www.jianshu.com/p/576dbf44b2ae</a></p>]]></content>
      
      
      <categories>
          
          <category> jwt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
